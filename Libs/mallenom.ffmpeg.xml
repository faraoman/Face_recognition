<?xml version="1.0"?>
<doc>
    <assembly>
        "mallenom.ffmpeg"
    </assembly>
    <members>
        <member name="T:Mallenom.FFmpeg.NativeDictionaryEnumerator">
            <summary>Перечислитель пар ключ-значение unmanaged-словаря.</summary>
        </member>
        <member name="T:Mallenom.FFmpeg.NativeDictionaryValuesEnumerator">
            <summary>Перечислитель значений unmanaged-словаря.</summary>
        </member>
        <member name="M:ffmpeg.av_chroma_location_name(ffmpeg.AVChromaLocation)">
@return the name for provided chroma location or NULL if unknown.

</member>
        <member name="M:ffmpeg.av_color_space_name(ffmpeg.AVColorSpace)">
@return the name for provided color space or NULL if unknown.

</member>
        <member name="M:ffmpeg.av_color_transfer_name(ffmpeg.AVColorTransferCharacteristic)">
@return the name for provided color transfer or NULL if unknown.

</member>
        <member name="M:ffmpeg.av_color_primaries_name(ffmpeg.AVColorPrimaries)">
@return the name for provided color primaries or NULL if unknown.

</member>
        <member name="M:ffmpeg.av_color_range_name(ffmpeg.AVColorRange)">
@return the name for provided color range or NULL if unknown.

</member>
        <member name="M:ffmpeg.av_get_pix_fmt_loss(ffmpeg.AVPixelFormat,ffmpeg.AVPixelFormat,System.Int32)">
 Compute what kind of losses will occur when converting from one specific
 pixel format to another.
 When converting from one pixel format to another, information loss may occur.
 For example, when converting from RGB24 to GRAY, the color information will
 be lost. Similarly, other losses occur when converting from some formats to
 other formats. These losses can involve loss of chroma, but also loss of
 resolution, loss of color depth, loss due to the color space conversion, loss
 of the alpha bits or loss due to color quantization.
 av_get_fix_fmt_loss() informs you about the various types of losses
 which will occur when converting from one pixel format to another.

 @param[in] dst_pix_fmt destination pixel format
 @param[in] src_pix_fmt source pixel format
 @param[in] has_alpha Whether the source pixel format alpha channel is used.
 @return Combination of flags informing you what kind of losses will occur
 (maximum loss for an invalid dst_pix_fmt).

</member>
        <member name="M:ffmpeg.av_pix_fmt_count_planes(ffmpeg.AVPixelFormat)">
@return number of planes in pix_fmt, a negative AVERROR if pix_fmt is not a
valid pixel format.

</member>
        <member name="M:ffmpeg.av_pix_fmt_get_chroma_sub_sample(ffmpeg.AVPixelFormat,System.Int32*,System.Int32*)">
 Utility function to access log2_chroma_w log2_chroma_h from
 the pixel format AVPixFmtDescriptor.

 See av_get_chroma_sub_sample() for a function that asserts a
 valid pixel format instead of returning an error code.
 Its recommended that you use avcodec_get_chroma_sub_sample unless
 you do check the return code!

 @param[in]  pix_fmt the pixel format
 @param[out] h_shift store log2_chroma_w (horizontal/width shift)
 @param[out] v_shift store log2_chroma_h (vertical/height shift)

 @return 0 on success, AVERROR(ENOSYS) on invalid or unknown pixel format

</member>
        <member name="M:ffmpeg.av_pix_fmt_desc_next(ffmpeg.AVPixFmtDescriptor!System.Runtime.CompilerServices.IsConst*)">
 Iterate over all pixel format descriptors known to libavutil.

 @param prev previous descriptor. NULL to get the first descriptor.

 @return next descriptor or NULL after the last descriptor

</member>
        <member name="M:ffmpeg.av_pix_fmt_desc_get(ffmpeg.AVPixelFormat)">
@return a pixel format descriptor for provided pixel format or NULL if
this pixel format is unknown.

</member>
        <member name="M:ffmpeg.av_get_padded_bits_per_pixel(ffmpeg.AVPixFmtDescriptor!System.Runtime.CompilerServices.IsConst*)">
Return the number of bits per pixel for the pixel format
described by pixdesc, including any padding or unused bits.

</member>
        <member name="M:ffmpeg.av_get_bits_per_pixel(ffmpeg.AVPixFmtDescriptor!System.Runtime.CompilerServices.IsConst*)">
 Return the number of bits per pixel used by the pixel format
 described by pixdesc. Note that this is not the same as the number
 of bits per sample.

 The returned number of bits refers to the number of bits actually
 used for storing the pixel information, that is padding bits are
 not counted.

</member>
        <member name="M:ffmpeg.av_get_pix_fmt_string(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.Int32,ffmpeg.AVPixelFormat)">
 Print in buf the string corresponding to the pixel format with
 number pix_fmt, or a header if pix_fmt is negative.

 @param buf the buffer where to write the string
 @param buf_size the size of buf
 @param pix_fmt the number of the pixel format to print the
 corresponding info string, or a negative value to print the
 corresponding header.

</member>
        <member name="M:ffmpeg.av_get_pix_fmt_name(ffmpeg.AVPixelFormat)">
 Return the short name for a pixel format, NULL in case pix_fmt is
 unknown.

 @see av_get_pix_fmt(), av_get_pix_fmt_string()

</member>
        <member name="M:ffmpeg.av_write_image_line(System.UInt16!System.Runtime.CompilerServices.IsConst*,System.Byte**,System.Int32!System.Runtime.CompilerServices.IsConst*,ffmpeg.AVPixFmtDescriptor!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32,System.Int32,System.Int32)">
 Write the values from src to the pixel format component c of an
 image line.

 @param src array containing the values to write
 @param data the array containing the pointers to the planes of the
 image to write into. It is supposed to be zeroed.
 @param linesize the array containing the linesizes of the image
 @param desc the pixel format descriptor for the image
 @param x the horizontal coordinate of the first pixel to write
 @param y the vertical coordinate of the first pixel to write
 @param w the width of the line to write, that is the number of
 values to write to the image line

</member>
        <member name="M:ffmpeg.av_read_image_line(System.UInt16*,System.Byte!System.Runtime.CompilerServices.IsConst**,System.Int32!System.Runtime.CompilerServices.IsConst*,ffmpeg.AVPixFmtDescriptor!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
Pixel format is big-endian.

Pixel format has a palette in data[1], values are indexes in this palette.

All values of a component are bit-wise packed end to end.

Pixel format is an HW accelerated format.

At least one pixel component is not in the first data plane.

The pixel format contains RGB-like data (as opposed to YUV/grayscale).

The pixel format is "pseudo-paletted". This means that it contains a
fixed palette in the 2nd plane but the palette is fixed/constant for each
PIX_FMT. This allows interpreting the data as if it was PAL8, which can
in some cases be simpler. Or the data can be interpreted purely based on
the pixel format without using the palette.
An example of a pseudo-paletted format is AV_PIX_FMT_GRAY8

 The pixel format has an alpha channel. This is set on all formats that
 support alpha in some way. The exception is AV_PIX_FMT_PAL8, which can
 carry alpha as part of the palette. Details are explained in the
 AVPixelFormat enum, and are also encoded in the corresponding
 AVPixFmtDescriptor.

 The alpha is always straight, never pre-multiplied.

 If a codec or a filter does not support alpha, it should set all alpha to
 opaque, or use the equivalent pixel formats without alpha component, e.g.
 AV_PIX_FMT_RGB0 (or AV_PIX_FMT_RGB24 etc.) instead of AV_PIX_FMT_RGBA.

 Read a line from an image, and write the values of the
 pixel format component c to dst.

 @param data the array containing the pointers to the planes of the image
 @param linesize the array containing the linesizes of the image
 @param desc the pixel format descriptor for the image
 @param x the horizontal coordinate of the first pixel to read
 @param y the vertical coordinate of the first pixel to read
 @param w the width of the line to read, that is the number of
 values to write to dst
 @param read_pal_component if not zero and the format is a paletted
 format writes the values corresponding to the palette
 component c in data[1] to dst, rather than the palette indexes in
 data[0]. The behavior is undefined if the format is not paletted.

</member>
        <member name="F:ffmpeg.AVPixFmtDescriptor.alias">
Alternative comma-separated names.

</member>
        <member name="F:ffmpeg.AVPixFmtDescriptor.comp">
 Parameters that describe how pixels are packed.
 If the format has 1 or 2 components, then luma is 0.
 If the format has 3 or 4 components:
   if the RGB flag is set then 0 is red, 1 is green and 2 is blue;
   otherwise 0 is luma, 1 is chroma-U and 2 is chroma-V.

 If present, the Alpha channel is always the last component.

</member>
        <member name="F:ffmpeg.AVPixFmtDescriptor.flags">
Combination of AV_PIX_FMT_FLAG_... flags.

</member>
        <member name="F:ffmpeg.AVPixFmtDescriptor.log2_chroma_h">
Amount to shift the luma height right to find the chroma height.
For YV12 this is 1 for example.
chroma_height= AV_CEIL_RSHIFT(luma_height, log2_chroma_h)
The note above is needed to ensure rounding up.
This value only refers to the chroma components.

</member>
        <member name="F:ffmpeg.AVPixFmtDescriptor.log2_chroma_w">
Amount to shift the luma width right to find the chroma width.
For YV12 this is 1 for example.
chroma_width = AV_CEIL_RSHIFT(luma_width, log2_chroma_w)
The note above is needed to ensure rounding up.
This value only refers to the chroma components.

</member>
        <member name="T:ffmpeg.AVPixFmtDescriptor">
 Descriptor that unambiguously describes how the bits of a pixel are
 stored in the up to 4 data planes of an image. It also stores the
 subsampling factors and number of components.

 @note This is separate of the colorspace (RGB, YCbCr, YPbPr, JPEG-style YUV
       and all the YUV variants) AVPixFmtDescriptor just stores how values
       are stored not what these values represent.

</member>
        <member name="F:ffmpeg.AVComponentDescriptor.offset_plus1">
deprecated, use offset instead 
</member>
        <member name="F:ffmpeg.AVComponentDescriptor.depth_minus1">
deprecated, use depth instead 
</member>
        <member name="F:ffmpeg.AVComponentDescriptor.step_minus1">
deprecated, use step instead 
</member>
        <member name="F:ffmpeg.AVComponentDescriptor.depth">
Number of bits in the component.

</member>
        <member name="F:ffmpeg.AVComponentDescriptor.shift">
Number of least significant bits that must be shifted away
to get the value.

</member>
        <member name="F:ffmpeg.AVComponentDescriptor.offset">
Number of elements before the component of the first pixel.
Elements are bits for bitstream formats, bytes otherwise.

</member>
        <member name="F:ffmpeg.AVComponentDescriptor.step">
Number of elements between 2 horizontally consecutive pixels.
Elements are bits for bitstream formats, bytes otherwise.

</member>
        <member name="F:ffmpeg.AVComponentDescriptor.plane">
Which of the 4 planes contains the component.

</member>
        <member name="T:ffmpeg.SwrDitherType">
@file
Libswresample version macros

</member>
        <member name="M:ffmpeg.swscale_version">
@file
swscale version macros

FF_API_* defines may be placed below to indicate public API that will be
dropped at a future version bump. The defines themselves are not part of
the public API and may change, break or disappear at any time.

</member>
        <member name="M:ffmpeg.avio_accept(ffmpeg.AVIOContext*,ffmpeg.AVIOContext**)">
Accept and allocate a client context on a server context.
@param  s the server context
@param  c the client context, must be unallocated
@return   &gt;= 0 on success or a negative value corresponding
          to an AVERROR on failure

</member>
        <member name="M:ffmpeg.avio_read_to_bprint(ffmpeg.AVIOContext*,ffmpeg.AVBPrint*,System.UInt32)">
 Read contents of h into print buffer, up to max_size bytes, or up to EOF.

 @return 0 for success (max_size bytes read or EOF reached), negative error
 code otherwise

</member>
        <member name="M:ffmpeg.avio_seek_time(ffmpeg.AVIOContext*,System.Int32,System.Int64,System.Int32)">
 Seek to a given timestamp relative to some component stream.
 Only meaningful if using a network streaming protocol (e.g. MMS.).

 @param h IO context from which to call the seek function pointers
 @param stream_index The stream index that the timestamp is relative to.
        If stream_index is (-1) the timestamp should be in AV_TIME_BASE
        units from the beginning of the presentation.
        If a stream_index &gt;= 0 is used and the protocol does not support
        seeking based on component streams, the call will fail.
 @param timestamp timestamp in AVStream.time_base units
        or if there is no stream specified then in AV_TIME_BASE units.
 @param flags Optional combination of AVSEEK_FLAG_BACKWARD, AVSEEK_FLAG_BYTE
        and AVSEEK_FLAG_ANY. The protocol may silently ignore
        AVSEEK_FLAG_BACKWARD and AVSEEK_FLAG_ANY, but AVSEEK_FLAG_BYTE will
        fail if used and not supported.
 @return &gt;= 0 on success
 @see AVInputFormat::read_seek

</member>
        <member name="M:ffmpeg.avio_pause(ffmpeg.AVIOContext*,System.Int32)">
 Pause and resume playing - only meaningful if using a network streaming
 protocol (e.g. MMS).

 @param h     IO context from which to call the read_pause function pointer
 @param pause 1 for pause, 0 for resume

</member>
        <member name="M:ffmpeg.avio_enum_protocols(System.Void**,System.Int32)">
 Iterate through names of available protocols.

 @param opaque A private pointer representing current protocol.
        It must be a pointer to NULL on first iteration and will
        be updated by successive calls to avio_enum_protocols.
 @param output If set to 1, iterate over output protocols,
               otherwise over input protocols.

 @return A static string containing the name of current protocol or NULL

</member>
        <member name="M:ffmpeg.avio_close_dyn_buf(ffmpeg.AVIOContext*,System.Byte**)">
 Return the written size and a pointer to the buffer. The buffer
 must be freed with av_free().
 Padding of AV_INPUT_BUFFER_PADDING_SIZE is added to the buffer.

 @param s IO context
 @param pbuffer pointer to a byte buffer
 @return the length of the byte buffer

</member>
        <member name="M:ffmpeg.avio_open_dyn_buf(ffmpeg.AVIOContext**)">
 Open a write only memory stream.

 @param s new IO context
 @return zero if no error.

</member>
        <member name="M:ffmpeg.avio_open2(ffmpeg.AVIOContext**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,ffmpeg.AVIOInterruptCB!System.Runtime.CompilerServices.IsConst*,ffmpeg.AVDictionary**)">
 Create and initialize a AVIOContext for accessing the
 resource indicated by url.
 @note When the resource indicated by url has been opened in
 read+write mode, the AVIOContext can be used only for writing.

 @param s Used to return the pointer to the created AVIOContext.
 In case of failure the pointed to value is set to NULL.
 @param url resource to access
 @param flags flags which control how the resource indicated by url
 is to be opened
 @param int_cb an interrupt callback to be used at the protocols level
 @param options  A dictionary filled with protocol-private options. On return
 this parameter will be destroyed and replaced with a dict containing options
 that were not found. May be NULL.
 @return &gt;= 0 in case of success, a negative value corresponding to an
 AVERROR code in case of failure

</member>
        <member name="M:ffmpeg.avio_open(ffmpeg.AVIOContext**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
@name URL open modes
The flags argument to avio_open must be one of the following
constants, optionally ORed with other flags.
@{

@}

Use non-blocking mode.
If this flag is set, operations on the context will return
AVERROR(EAGAIN) if they can not be performed immediately.
If this flag is not set, operations on the context will never return
AVERROR(EAGAIN).
Note that this flag does not affect the opening/connecting of the
context. Connecting a protocol will always block if necessary (e.g. on
network protocols) but never hang (e.g. on busy devices).
Warning: non-blocking protocols is work-in-progress; this flag may be
silently ignored.

Use direct mode.
avio_read and avio_write should if possible be satisfied directly
instead of going through a buffer, and avio_seek will always
call the underlying seek function directly.

 Create and initialize a AVIOContext for accessing the
 resource indicated by url.
 @note When the resource indicated by url has been opened in
 read+write mode, the AVIOContext can be used only for writing.

 @param s Used to return the pointer to the created AVIOContext.
 In case of failure the pointed to value is set to NULL.
 @param url resource to access
 @param flags flags which control how the resource indicated by url
 is to be opened
 @return &gt;= 0 in case of success, a negative value corresponding to an
 AVERROR code in case of failure

</member>
        <member name="M:ffmpeg.avio_r8(ffmpeg.AVIOContext*)">
 @name Functions for reading from AVIOContext
 @{

 @note return 0 if EOF, so you cannot use it if EOF handling is
       necessary

</member>
        <member name="M:ffmpeg.avio_read(ffmpeg.AVIOContext*,System.Byte*,System.Int32)">
Read size bytes from AVIOContext into buf.
@return number of bytes read or AVERROR

</member>
        <member name="M:ffmpeg.avio_flush(ffmpeg.AVIOContext*)">
 Force flushing of buffered data.

 For write streams, force the buffered data to be immediately written to the output,
 without to wait to fill the internal buffer.

 For read streams, discard all currently buffered data, and advance the
 reported file position to that of the underlying stream. This does not
 read new data, and does not perform any seeks.

</member>
        <member name="M:ffmpeg.avio_printf(ffmpeg.AVIOContext*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,BTEllipsis)">
@warning Writes up to 4 KiB per call 
</member>
        <member name="M:ffmpeg.url_feof(ffmpeg.AVIOContext*)">
@deprecated use avio_feof()

</member>
        <member name="M:ffmpeg.avio_feof(ffmpeg.AVIOContext*)">
feof() equivalent for AVIOContext.
@return non zero if and only if end of file

</member>
        <member name="M:ffmpeg.avio_size(ffmpeg.AVIOContext*)">
Get the filesize.
@return filesize or AVERROR

</member>
        <member name="M:ffmpeg.avio_tell(ffmpeg.AVIOContext*)">
ftell() equivalent for AVIOContext.
@return position or AVERROR.

</member>
        <member name="M:ffmpeg.avio_skip(ffmpeg.AVIOContext*,System.Int64)">
Skip given number of bytes forward
@return new position or AVERROR.

</member>
        <member name="M:ffmpeg.avio_put_str16be(ffmpeg.AVIOContext*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Convert an UTF-8 string to UTF-16BE and write it.
 @param s the AVIOContext
 @param str NULL-terminated UTF-8 string

 @return number of bytes written.

</member>
        <member name="M:ffmpeg.avio_put_str16le(ffmpeg.AVIOContext*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Convert an UTF-8 string to UTF-16LE and write it.
 @param s the AVIOContext
 @param str NULL-terminated UTF-8 string

 @return number of bytes written.

</member>
        <member name="M:ffmpeg.avio_put_str(ffmpeg.AVIOContext*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Write a NULL-terminated string.
@return number of bytes written.

</member>
        <member name="M:ffmpeg.avio_alloc_context(System.Byte*,System.Int32,System.Int32,System.Void*,=FUNC:System.Int32(System.Void*,System.Byte*,System.Int32),=FUNC:System.Int32(System.Void*,System.Byte*,System.Int32),=FUNC:System.Int64(System.Void*,System.Int64,System.Int32))">
 Allocate and initialize an AVIOContext for buffered I/O. It must be later
 freed with av_free().

 @param buffer Memory block for input/output operations via AVIOContext.
        The buffer must be allocated with av_malloc() and friends.
        It may be freed and replaced with a new buffer by libavformat.
        AVIOContext.buffer holds the buffer currently in use,
        which must be later freed with av_free().
 @param buffer_size The buffer size is very important for performance.
        For protocols with fixed blocksize it should be set to this blocksize.
        For others a typical size is a cache page, e.g. 4kb.
 @param write_flag Set to 1 if the buffer should be writable, 0 otherwise.
 @param opaque An opaque pointer to user-specific data.
 @param read_packet  A function for refilling the buffer, may be NULL.
 @param write_packet A function for writing the buffer contents, may be NULL.
        The function may not change the input buffers content.
 @param seek A function for seeking to specified byte position, may be NULL.

 @return Allocated AVIOContext or NULL on failure.

</member>
        <member name="M:ffmpeg.avio_free_directory_entry(ffmpeg.AVIODirEntry**)">
 Free entry allocated by avio_read_dir().

 @param entry entry to be freed.

</member>
        <member name="M:ffmpeg.avio_close_dir(ffmpeg.AVIODirContext**)">
 Close directory.

 @note Entries created using avio_read_dir() are not deleted and must be
 freeded with avio_free_directory_entry().

 @param s         directory read context.
 @return &gt;=0 on success or negative on error.

</member>
        <member name="M:ffmpeg.avio_read_dir(ffmpeg.AVIODirContext*,ffmpeg.AVIODirEntry**)">
 Get next directory entry.

 Returned entry must be freed with avio_free_directory_entry(). In particular
 it may outlive AVIODirContext.

 @param s         directory read context.
 @param[out] next next entry or NULL when no more entries.
 @return &gt;=0 on success or negative on error. End of list is not considered an
             error.

</member>
        <member name="M:ffmpeg.avio_open_dir(ffmpeg.AVIODirContext**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,ffmpeg.AVDictionary**)">
 Open directory for reading.

 @param s       directory read context. Pointer to a NULL pointer must be passed.
 @param url     directory to be listed.
 @param options A dictionary filled with protocol-private options. On return
                this parameter will be destroyed and replaced with a dictionary
                containing options that were not found. May be NULL.
 @return &gt;=0 on success or negative on error.

</member>
        <member name="M:ffmpeg.avpriv_io_delete(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Delete a resource.

 @param url resource to be deleted.
 @return &gt;=0 on success or negative on error.

</member>
        <member name="M:ffmpeg.avpriv_io_move(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Move or rename a resource.

 @note url_src and url_dst should share the same protocol and authority.

 @param url_src url to resource to be moved
 @param url_dst new url to resource if the operation succeeded
 @return &gt;=0 on success or negative on error.

</member>
        <member name="M:ffmpeg.avio_check(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
 Return AVIO_FLAG_* access flags corresponding to the access permissions
 of the resource in url, or a negative value corresponding to an
 AVERROR code in case of failure. The returned access flags are
 masked by the value in flags.

 @note This function is intrinsically unsafe, in the sense that the
 checked resource may change its existence or permission status from
 one call to another. Thus you should not trust the returned value,
 unless you are sure that no other processes are accessing the
 checked resource.

</member>
        <member name="M:ffmpeg.avio_find_protocol_name(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Return the name of the protocol that will handle the passed URL.

 NULL is returned if no protocol could be found for the given URL.

 @return Name of the protocol or NULL.

</member>
        <member name="F:ffmpeg.AVIOContext.protocol_whitelist">
',' separated list of allowed protocols.

</member>
        <member name="F:ffmpeg.AVIOContext.short_seek_threshold">
Threshold to favor readahead over seek.
This is current internal only, do not use from outside.

</member>
        <member name="F:ffmpeg.AVIOContext.orig_buffer_size">
Original buffer size
used internally after probing and ensure seekback to reset the buffer size
This field is internal to libavformat and access from outside is not allowed.

</member>
        <member name="F:ffmpeg.AVIOContext.writeout_count">
writeout statistic
This field is internal to libavformat and access from outside is not allowed.

</member>
        <member name="F:ffmpeg.AVIOContext.seek_count">
seek statistic
This field is internal to libavformat and access from outside is not allowed.

</member>
        <member name="F:ffmpeg.AVIOContext.bytes_read">
Bytes read statistic
This field is internal to libavformat and access from outside is not allowed.

</member>
        <member name="F:ffmpeg.AVIOContext.direct">
avio_read and avio_write should if possible be satisfied directly
instead of going through a buffer, and avio_seek will always
call the underlying seek function directly.

</member>
        <member name="F:ffmpeg.AVIOContext.maxsize">
max filesize, used to limit allocations
This field is internal to libavformat and access from outside is not allowed.

</member>
        <member name="F:ffmpeg.AVIOContext.seekable">
A combination of AVIO_SEEKABLE_ flags or 0 when the stream is not seekable.

</member>
        <member name="F:ffmpeg.AVIOContext.read_seek">
Seek to a given timestamp in stream with the specified stream_index.
Needed for some network streaming protocols which don't support seeking
to byte position.

</member>
        <member name="F:ffmpeg.AVIOContext.read_pause">
Pause or resume playback for network streaming protocols - e.g. MMS.

</member>
        <member name="F:ffmpeg.AVIOContext.av_class">
 A class for private options.

 If this AVIOContext is created by avio_open2(), av_class is set and
 passes the options down to protocols.

 If this AVIOContext is manually allocated, then av_class may be set by
 the caller.

 warning -- this field can be NULL, be sure to not pass this AVIOContext
 to any av_opt_* functions in that case.

</member>
        <member name="T:ffmpeg.AVIOContext">
 Bytestream IO Context.
 New fields can be added to the end with minor version bumps.
 Removal, reordering and changes to existing fields require a major
 version bump.
 sizeof(AVIOContext) must not be used outside libav*.

 @note None of the function pointers in AVIOContext should be called
       directly, they should only be set by the client application
       when implementing custom I/O. Normally these are set to the
       function pointers specified in avio_alloc_context()

</member>
        <member name="T:ffmpeg.AVIODirEntry">
 Describes single entry of the directory.

 Only name and type fields are guaranteed be set.
 Rest of fields are protocol or/and platform dependent and might be unknown.

</member>
        <member name="T:ffmpeg.AVIODirEntryType">
Directory entry types.

</member>
        <member name="T:ffmpeg.AVIOInterruptCB">
@}

@file
@ingroup lavf_io
Buffered I/O operations

@file
common internal and external API header

@file
@ingroup libavf
Libavformat version macros

 FF_API_* defines may be placed below to indicate public API that will be
 dropped at a future version bump. The defines themselves are not part of
 the public API and may change, break or disappear at any time.

 @note, when bumping the major version it is recommended to manually
 disable each FF_API_* in its own commit instead of disabling them all
 at once through the bump. This improves the git bisect-ability of the change.


 Callback for checking whether to abort blocking functions.
 AVERROR_EXIT is returned in this case by the interrupted
 function. During blocking operations, callback is called with
 opaque as parameter. If the callback returns 1, the
 blocking operation will be aborted.

 No members can be added to this struct without a major bump, if
 new elements have been added after this struct in AVFormatContext
 or AVIOContext.

</member>
        <member name="M:ffmpeg.av_cpb_properties_alloc(System.UInt32*)">
 Allocate a CPB properties structure and initialize its fields to default
 values.

 @param size if non-NULL, the size of the allocated struct will be written
             here. This is useful for embedding it in side data.

 @return the newly allocated struct or NULL on failure

</member>
        <member name="M:ffmpeg.avcodec_descriptor_get_by_name(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
@return codec descriptor with the given name or NULL if no such descriptor
        exists.

</member>
        <member name="M:ffmpeg.avcodec_descriptor_next(ffmpeg.AVCodecDescriptor!System.Runtime.CompilerServices.IsConst*)">
 Iterate over all codec descriptors known to libavcodec.

 @param prev previous descriptor. NULL to get the first descriptor.

 @return next descriptor or NULL after the last descriptor

</member>
        <member name="M:ffmpeg.avcodec_descriptor_get(ffmpeg.AVCodecID)">
@return descriptor for given codec ID or NULL if no descriptor exists.

</member>
        <member name="M:ffmpeg.av_codec_is_decoder(ffmpeg.AVCodec!System.Runtime.CompilerServices.IsConst*)">
@return a non-zero number if codec is a decoder, zero otherwise

</member>
        <member name="M:ffmpeg.av_codec_is_encoder(ffmpeg.AVCodec!System.Runtime.CompilerServices.IsConst*)">
@return a non-zero number if codec is an encoder, zero otherwise

</member>
        <member name="M:ffmpeg.avcodec_is_open(ffmpeg.AVCodecContext*)">
@return a positive value if s is open (i.e. avcodec_open2() was called on it
with no corresponding avcodec_close()), 0 otherwise.

</member>
        <member name="M:ffmpeg.avcodec_get_name(ffmpeg.AVCodecID)">
Get the name of a codec.
@return  a static string identifying the codec; never NULL

</member>
        <member name="M:ffmpeg.av_lockmgr_register(=FUNC:System.Int32(System.Void**,ffmpeg.AVLockOp))">
 Register a user provided lock manager supporting the operations
 specified by AVLockOp. The "mutex" argument to the function points
 to a (void *) where the lockmgr should store/get a pointer to a user
 allocated mutex. It is NULL upon AV_LOCK_CREATE and equal to the
 value left by the last call for all other ops. If the lock manager is
 unable to perform the op then it should leave the mutex in the same
 state as when it was called and return a non-zero value. However,
 when called with AV_LOCK_DESTROY the mutex will always be assumed to
 have been successfully destroyed. If av_lockmgr_register succeeds
 it will return a non-negative value, if it fails it will return a
 negative value and destroy all mutex and unregister all callbacks.
 av_lockmgr_register is not thread-safe, it must be called from a
 single thread before any calls which make use of locking are used.

 @param cb User defined callback. av_lockmgr_register invokes calls
           to this callback and the previously registered callback.
           The callback will be used to create more than one mutex
           each of which must be backed by its own underlying locking
           mechanism (i.e. do not use a single static object to
           implement your lock manager). If cb is set to NULL the
           lockmgr will be unregistered.

</member>
        <member name="T:ffmpeg.AVLockOp">
Lock operation used by lockmgr

</member>
        <member name="M:ffmpeg.av_hwaccel_next(ffmpeg.AVHWAccel!System.Runtime.CompilerServices.IsConst*)">
If hwaccel is NULL, returns the first registered hardware accelerator,
if hwaccel is non-NULL, returns the next registered hardware accelerator
after hwaccel, or NULL if hwaccel is the last one.

</member>
        <member name="M:ffmpeg.av_register_hwaccel(ffmpeg.AVHWAccel*)">
Register the hardware accelerator hwaccel.

</member>
        <member name="M:ffmpeg.av_log_ask_for_sample(System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,BTEllipsis)">
Log a generic warning message asking for a sample. This function is
intended to be used internally by FFmpeg (libavcodec, libavformat, etc.)
only, and would normally not be used by applications.
@param[in] avc a pointer to an arbitrary struct of which the first field is
a pointer to an AVClass struct
@param[in] msg string containing an optional message, or NULL if no message
@deprecated Use avpriv_request_sample() instead.

</member>
        <member name="M:ffmpeg.av_log_missing_feature(System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
Log a generic warning message about a missing feature. This function is
intended to be used internally by FFmpeg (libavcodec, libavformat, etc.)
only, and would normally not be used by applications.
@param[in] avc a pointer to an arbitrary struct of which the first field is
a pointer to an AVClass struct
@param[in] feature string containing the name of the missing feature
@param[in] want_sample indicates if samples are wanted which exhibit this feature.
If want_sample is non-zero, additional verbage will be added to the log
message which tells the user how to report samples to the development
mailing list.
@deprecated Use avpriv_report_missing_feature() instead.

</member>
        <member name="M:ffmpeg.av_xiphlacing(System.Byte*,System.UInt32)">
 Encode extradata length to a buffer. Used by xiph codecs.

 @param s buffer to write to; must be at least (v/255+1) bytes long
 @param v size of extradata in bytes
 @return number of bytes written to the buffer.

</member>
        <member name="M:ffmpeg.av_fast_padded_mallocz(System.Void*,System.UInt32*,System.UInt32)">
Same behaviour av_fast_padded_malloc except that buffer will always
be 0-initialized after call.

</member>
        <member name="M:ffmpeg.av_fast_padded_malloc(System.Void*,System.UInt32*,System.UInt32)">
 Same behaviour av_fast_malloc but the buffer has additional
 AV_INPUT_BUFFER_PADDING_SIZE at the end which will always be 0.

 In addition the whole buffer will initially and after resizes
 be 0-initialized so that no uninitialized data will ever appear.

</member>
        <member name="M:ffmpeg.av_bitstream_filter_next(ffmpeg.AVBitStreamFilter!System.Runtime.CompilerServices.IsConst*)">
 If f is NULL, return the first registered bitstream filter,
 if f is non-NULL, return the next registered bitstream filter
 after f, or NULL if f is the last one.

 This function can be used to iterate over all registered bitstream
 filters.

</member>
        <member name="M:ffmpeg.av_bitstream_filter_close(ffmpeg.AVBitStreamFilterContext*)">
 Release bitstream filter context.

 @param bsf the bitstream filter context created with
 av_bitstream_filter_init(), can be NULL

</member>
        <member name="M:ffmpeg.av_bitstream_filter_filter(ffmpeg.AVBitStreamFilterContext*,ffmpeg.AVCodecContext*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Byte**,System.Int32*,System.Byte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32)">
 Filter bitstream.

 This function filters the buffer buf with size buf_size, and places the
 filtered buffer in the buffer pointed to by poutbuf.

 The output buffer must be freed by the caller.

 @param bsfc            bitstream filter context created by av_bitstream_filter_init()
 @param avctx           AVCodecContext accessed by the filter, may be NULL.
                        If specified, this must point to the encoder context of the
                        output stream the packet is sent to.
 @param args            arguments which specify the filter configuration, may be NULL
 @param poutbuf         pointer which is updated to point to the filtered buffer
 @param poutbuf_size    pointer which is updated to the filtered buffer size in bytes
 @param buf             buffer containing the data to filter
 @param buf_size        size in bytes of buf
 @param keyframe        set to non-zero if the buffer to filter corresponds to a key-frame packet data
 @return &gt;= 0 in case of success, or a negative error code in case of failure

 If the return value is positive, an output buffer is allocated and
 is available in *poutbuf, and is distinct from the input buffer.

 If the return value is 0, the output buffer is not allocated and
 should be considered identical to the input buffer, or in case
 *poutbuf was set it points to the input buffer (not necessarily to
 its starting address).

</member>
        <member name="M:ffmpeg.av_bitstream_filter_init(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Create and initialize a bitstream filter context given a bitstream
 filter name.

 The returned context must be freed with av_bitstream_filter_close().

 @param name    the name of the bitstream filter
 @return a bitstream filter context if a matching filter was found
 and successfully initialized, NULL otherwise

</member>
        <member name="M:ffmpeg.av_register_bitstream_filter(ffmpeg.AVBitStreamFilter*)">
 Register a bitstream filter.

 The filter will be accessible to the application code through
 av_bitstream_filter_next() or can be directly initialized with
 av_bitstream_filter_init().

 @see avcodec_register_all()

</member>
        <member name="F:ffmpeg.AVBitStreamFilterContext.args">
Internal default arguments, used if NULL is passed to av_bitstream_filter_filter().
Not for access by library users.

</member>
        <member name="M:ffmpeg.av_get_audio_frame_duration(ffmpeg.AVCodecContext*,System.Int32)">
 Return audio frame duration.

 @param avctx        codec context
 @param frame_bytes  size of the frame, or 0 if unknown
 @return             frame duration, in samples, if known. 0 if not able to
                     determine.

</member>
        <member name="M:ffmpeg.av_get_exact_bits_per_sample(ffmpeg.AVCodecID)">
 Return codec bits per sample.
 Only return non-zero if the bits per sample is exactly correct, not an
 approximation.

 @param[in] codec_id the codec
 @return Number of bits per sample or zero if unknown for the given codec.

</member>
        <member name="M:ffmpeg.av_get_bits_per_sample(ffmpeg.AVCodecID)">
 Return codec bits per sample.

 @param[in] codec_id the codec
 @return Number of bits per sample or zero if unknown for the given codec.

</member>
        <member name="M:ffmpeg.avcodec_flush_buffers(ffmpeg.AVCodecContext*)">
 Reset the internal decoder state / flush internal buffers. Should be called
 e.g. when seeking or when switching to a different stream.

 @note when refcounted frames are not used (i.e. avctx-&gt;refcounted_frames is 0),
 this invalidates the frames previously returned from the decoder. When
 refcounted frames are used, the decoder just releases any references it might
 keep internally, but the caller's reference remains valid.

</member>
        <member name="M:ffmpeg.avcodec_fill_audio_frame(ffmpeg.AVFrame*,System.Int32,ffmpeg.AVSampleFormat,System.Byte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32)">
 Fill AVFrame audio data and linesize pointers.

 The buffer buf must be a preallocated buffer with a size big enough
 to contain the specified samples amount. The filled AVFrame data
 pointers will point to this buffer.

 AVFrame extended_data channel pointers are allocated if necessary for
 planar audio.

 @param frame       the AVFrame
                    frame-&gt;nb_samples must be set prior to calling the
                    function. This function fills in frame-&gt;data,
                    frame-&gt;extended_data, frame-&gt;linesize[0].
 @param nb_channels channel count
 @param sample_fmt  sample format
 @param buf         buffer to use for frame data
 @param buf_size    size of buffer
 @param align       plane size sample alignment (0 = default)
 @return            &gt;=0 on success, negative error code on failure
 @todo return the size in bytes required to store the samples in
 case of success, at the next libavutil bump

</member>
        <member name="M:ffmpeg.avcodec_profile_name(ffmpeg.AVCodecID,System.Int32)">
 Return a name for the specified profile, if available.

 @param codec_id the ID of the codec to which the requested profile belongs
 @param profile the profile value for which a name is requested
 @return A name for the profile if found, NULL otherwise.

 @note unlike av_get_profile_name(), which searches a list of profiles
       supported by a specific decoder or encoder implementation, this
       function searches the list of profiles from the AVCodecDescriptor

</member>
        <member name="M:ffmpeg.av_get_profile_name(ffmpeg.AVCodec!System.Runtime.CompilerServices.IsConst*,System.Int32)">
 Return a name for the specified profile, if available.

 @param codec the codec that is searched for the given profile
 @param profile the profile value for which a name is requested
 @return A name for the profile if found, NULL otherwise.

</member>
        <member name="M:ffmpeg.av_get_codec_tag_string(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.UInt32,System.UInt32)">
 Put a string representing the codec tag codec_tag in buf.

 @param buf       buffer to place codec tag in
 @param buf_size size in bytes of buf
 @param codec_tag codec tag to assign
 @return the length of the string that would have been generated if
 enough space had been available, excluding the trailing null

</member>
        <member name="M:ffmpeg.avcodec_set_dimensions(ffmpeg.AVCodecContext*,System.Int32,System.Int32)">
@}

@deprecated this function is not supposed to be used from outside of lavc

</member>
        <member name="M:ffmpeg.avcodec_get_pix_fmt_loss(ffmpeg.AVPixelFormat,ffmpeg.AVPixelFormat,System.Int32)">
@deprecated see av_get_pix_fmt_loss()

</member>
        <member name="M:ffmpeg.avcodec_pix_fmt_to_codec_tag(ffmpeg.AVPixelFormat)">
Return a value representing the fourCC code associated to the
pixel format pix_fmt, or 0 if no associated fourCC code can be
found.

</member>
        <member name="M:ffmpeg.avcodec_get_chroma_sub_sample(ffmpeg.AVPixelFormat,System.Int32*,System.Int32*)">
@}

 @defgroup lavc_misc Utility functions
 @ingroup libavc

 Miscellaneous utility functions related to both encoding and decoding
 (or neither).
 @{

 @defgroup lavc_misc_pixfmt Pixel formats

 Functions for working with pixel formats.
 @{

 Utility function to access log2_chroma_w log2_chroma_h from
 the pixel format AVPixFmtDescriptor.

 This function asserts that pix_fmt is valid. See av_pix_fmt_get_chroma_sub_sample
 for one that returns a failure code and continues in case of invalid
 pix_fmts.

 @param[in]  pix_fmt the pixel format
 @param[out] h_shift store log2_chroma_w
 @param[out] v_shift store log2_chroma_h

 @see av_pix_fmt_get_chroma_sub_sample

</member>
        <member name="M:ffmpeg.av_picture_pad(ffmpeg.AVPicture*,ffmpeg.AVPicture!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32,ffmpeg.AVPixelFormat,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32*)">
@deprecated unused

</member>
        <member name="M:ffmpeg.av_picture_crop(ffmpeg.AVPicture*,ffmpeg.AVPicture!System.Runtime.CompilerServices.IsConst*,ffmpeg.AVPixelFormat,System.Int32,System.Int32)">
@deprecated unused

</member>
        <member name="M:ffmpeg.av_picture_copy(ffmpeg.AVPicture*,ffmpeg.AVPicture!System.Runtime.CompilerServices.IsConst*,ffmpeg.AVPixelFormat,System.Int32,System.Int32)">
@deprecated av_image_copy() instead.

</member>
        <member name="M:ffmpeg.avpicture_get_size(ffmpeg.AVPixelFormat,System.Int32,System.Int32)">
@deprecated use av_image_get_buffer_size() instead.

</member>
        <member name="M:ffmpeg.avpicture_layout(ffmpeg.AVPicture!System.Runtime.CompilerServices.IsConst*,ffmpeg.AVPixelFormat,System.Int32,System.Int32,System.Byte*,System.Int32)">
@deprecated use av_image_copy_to_buffer() instead.

</member>
        <member name="M:ffmpeg.avpicture_fill(ffmpeg.AVPicture*,System.Byte!System.Runtime.CompilerServices.IsConst*,ffmpeg.AVPixelFormat,System.Int32,System.Int32)">
@deprecated use av_image_fill_arrays() instead.

</member>
        <member name="M:ffmpeg.avpicture_free(ffmpeg.AVPicture*)">
@deprecated unused

</member>
        <member name="M:ffmpeg.avpicture_alloc(ffmpeg.AVPicture*,ffmpeg.AVPixelFormat,System.Int32,System.Int32)">
@}

@addtogroup lavc_picture
@{

@deprecated unused

</member>
        <member name="M:ffmpeg.av_resample_compensate(ffmpeg.AVResampleContext*,System.Int32,System.Int32)">
 Compensate samplerate/timestamp drift. The compensation is done by changing
 the resampler parameters, so no audible clicks or similar distortions occur
 @param compensation_distance distance in output samples over which the compensation should be performed
 @param sample_delta number of output samples which should be output less

 example: av_resample_compensate(c, 10, 500)
 here instead of 510 samples only 500 samples would be output

 note, due to rounding the actual compensation might be slightly different,
 especially if the compensation_distance is large and the in_rate used during init is small

</member>
        <member name="M:ffmpeg.av_resample(ffmpeg.AVResampleContext*,System.Int16*,System.Int16*,System.Int32*,System.Int32,System.Int32,System.Int32)">
Resample an array of samples using a previously configured context.
@param src an array of unconsumed samples
@param consumed the number of samples of src which have been consumed are returned here
@param src_size the number of unconsumed samples available
@param dst_size the amount of space in samples available in dst
@param update_ctx If this is 0 then the context will not be modified, that way several channels can be resampled with the same context.
@return the number of samples written in dst or -1 if an error occurred

</member>
        <member name="T:ffmpeg.AVResampleContext">
 * Initialize an audio resampler.
 * Note, if either rate is not an integer then simply scale both rates up so they are.
 * @param filter_length length of each FIR filter in the filterbank relative to the cutoff freq
 * @param log2_phase_count log2 of the number of entries in the polyphase filterbank
 * @param linear If 1 then the used FIR filter will be linearly interpolated
                 between the 2 closest, if 0 the closest will be used
 * @param cutoff cutoff frequency, 1.0 corresponds to half the output sampling rate

</member>
        <member name="M:ffmpeg.audio_resample_close(ffmpeg.ReSampleContext*)">
 Free resample context.

 @param s a non-NULL pointer to a resample context previously
          created with av_audio_resample_init()

</member>
        <member name="M:ffmpeg.av_audio_resample_init(System.Int32,System.Int32,System.Int32,System.Int32,ffmpeg.AVSampleFormat,ffmpeg.AVSampleFormat,System.Int32,System.Int32,System.Int32,System.Double)">
 *  Initialize audio resampling context.
 *
 * @param output_channels  number of output channels
 * @param input_channels   number of input channels
 * @param output_rate      output sample rate
 * @param input_rate       input sample rate
 * @param sample_fmt_out   requested output sample format
 * @param sample_fmt_in    input sample format
 * @param filter_length    length of each FIR filter in the filterbank relative to the cutoff frequency
 * @param log2_phase_count log2 of the number of entries in the polyphase filterbank
 * @param linear           if 1 then the used FIR filter will be linearly interpolated
                           between the 2 closest, if 0 the closest will be used
 * @param cutoff           cutoff frequency, 1.0 corresponds to half the output sampling rate
 * @return allocated ReSampleContext, NULL if error occurred

</member>
        <member name="T:ffmpeg.ReSampleContext">
@}

 @defgroup lavc_resample Audio resampling
 @ingroup libavc
 @deprecated use libswresample instead

 @{

</member>
        <member name="M:ffmpeg.avcodec_encode_video2(ffmpeg.AVCodecContext*,ffmpeg.AVPacket*,ffmpeg.AVFrame!System.Runtime.CompilerServices.IsConst*,System.Int32*)">
 Encode a frame of video.

 Takes input raw video data from frame and writes the next output packet, if
 available, to avpkt. The output packet does not necessarily contain data for
 the most recent frame, as encoders can delay and reorder input frames
 internally as needed.

 @param avctx     codec context
 @param avpkt     output AVPacket.
                  The user can supply an output buffer by setting
                  avpkt-&gt;data and avpkt-&gt;size prior to calling the
                  function, but if the size of the user-provided data is not
                  large enough, encoding will fail. All other AVPacket fields
                  will be reset by the encoder using av_init_packet(). If
                  avpkt-&gt;data is NULL, the encoder will allocate it.
                  The encoder will set avpkt-&gt;size to the size of the
                  output packet. The returned data (if any) belongs to the
                  caller, he is responsible for freeing it.

                  If this function fails or produces no output, avpkt will be
                  freed using av_packet_unref().
 @param[in] frame AVFrame containing the raw video data to be encoded.
                  May be NULL when flushing an encoder that has the
                  AV_CODEC_CAP_DELAY capability set.
 @param[out] got_packet_ptr This field is set to 1 by libavcodec if the
                            output packet is non-empty, and to 0 if it is
                            empty. If the function returns an error, the
                            packet can be assumed to be invalid, and the
                            value of got_packet_ptr is undefined and should
                            not be used.
 @return          0 on success, negative error code on failure

</member>
        <member name="M:ffmpeg.avcodec_encode_audio2(ffmpeg.AVCodecContext*,ffmpeg.AVPacket*,ffmpeg.AVFrame!System.Runtime.CompilerServices.IsConst*,System.Int32*)">
 Encode a frame of audio.

 Takes input samples from frame and writes the next output packet, if
 available, to avpkt. The output packet does not necessarily contain data for
 the most recent frame, as encoders can delay, split, and combine input frames
 internally as needed.

 @param avctx     codec context
 @param avpkt     output AVPacket.
                  The user can supply an output buffer by setting
                  avpkt-&gt;data and avpkt-&gt;size prior to calling the
                  function, but if the size of the user-provided data is not
                  large enough, encoding will fail. If avpkt-&gt;data and
                  avpkt-&gt;size are set, avpkt-&gt;destruct must also be set. All
                  other AVPacket fields will be reset by the encoder using
                  av_init_packet(). If avpkt-&gt;data is NULL, the encoder will
                  allocate it. The encoder will set avpkt-&gt;size to the size
                  of the output packet.

                  If this function fails or produces no output, avpkt will be
                  freed using av_packet_unref().
 @param[in] frame AVFrame containing the raw audio data to be encoded.
                  May be NULL when flushing an encoder that has the
                  AV_CODEC_CAP_DELAY capability set.
                  If AV_CODEC_CAP_VARIABLE_FRAME_SIZE is set, then each frame
                  can have any number of samples.
                  If it is not set, frame-&gt;nb_samples must be equal to
                  avctx-&gt;frame_size for all frames except the last.
                  The final frame may be smaller than avctx-&gt;frame_size.
 @param[out] got_packet_ptr This field is set to 1 by libavcodec if the
                            output packet is non-empty, and to 0 if it is
                            empty. If the function returns an error, the
                            packet can be assumed to be invalid, and the
                            value of got_packet_ptr is undefined and should
                            not be used.
 @return          0 on success, negative error code on failure

</member>
        <member name="M:ffmpeg.avcodec_find_encoder_by_name(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Find a registered encoder with the specified name.

 @param name name of the requested encoder
 @return An encoder if one was found, NULL otherwise.

</member>
        <member name="M:ffmpeg.avcodec_find_encoder(ffmpeg.AVCodecID)">
@}
@}

@addtogroup lavc_encoding
@{

 Find a registered encoder with a matching codec ID.

 @param id AVCodecID of the requested encoder
 @return An encoder if one was found, NULL otherwise.

</member>
        <member name="M:ffmpeg.av_parser_change(ffmpeg.AVCodecParserContext*,ffmpeg.AVCodecContext*,System.Byte**,System.Int32*,System.Byte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32)">
@return 0 if the output buffer is a subset of the input, 1 if it is allocated and must be freed
@deprecated use AVBitStreamFilter

</member>
        <member name="F:ffmpeg.AVCodecParserContext.format">
 The format of the coded data, corresponds to enum AVPixelFormat for video
 and for enum AVSampleFormat for audio.

 Note that a decoder can have considerable freedom in how exactly it
 decodes the data, so the format reported here might be different from the
 one returned by a decoder.

</member>
        <member name="F:ffmpeg.AVCodecParserContext.coded_width">
Dimensions of the coded video.

</member>
        <member name="F:ffmpeg.AVCodecParserContext.width">
Dimensions of the decoded video intended for presentation.

</member>
        <member name="F:ffmpeg.AVCodecParserContext.output_picture_number">
 Picture number incremented in presentation or output order.
 This field may be reinitialized at the first picture of a new sequence.

 For example, this corresponds to H.264 PicOrderCnt.

</member>
        <member name="F:ffmpeg.AVCodecParserContext.duration">
Duration of the current frame.
For audio, this is in units of 1 / AVCodecContext.sample_rate.
For all other types, this is in units of AVCodecContext.time_base.

</member>
        <member name="F:ffmpeg.AVCodecParserContext.last_pos">
Previous frame byte position.

</member>
        <member name="F:ffmpeg.AVCodecParserContext.pos">
Byte position of currently parsed frame in stream.

</member>
        <member name="F:ffmpeg.AVCodecParserContext.cur_frame_pos">
 Position of the packet in file.

 Analogous to cur_frame_pts/dts

</member>
        <member name="F:ffmpeg.AVCodecParserContext.pts_dts_delta">
 Presentation delay of current frame in units of AVCodecContext.time_base.

 Set to INT_MIN when dts_sync_point unused. Otherwise, it must
 contain valid non-negative timestamp delta (presentation time of a frame
 must not lie in the past).

 This delay represents the difference between decoding and presentation
 time of the frame.

 For example, this corresponds to H.264 dpb_output_delay.

</member>
        <member name="F:ffmpeg.AVCodecParserContext.dts_ref_dts_delta">
 Offset of the current timestamp against last timestamp sync point in
 units of AVCodecContext.time_base.

 Set to INT_MIN when dts_sync_point unused. Otherwise, it must
 contain a valid timestamp offset.

 Note that the timestamp of sync point has usually a nonzero
 dts_ref_dts_delta, which refers to the previous sync point. Offset of
 the next frame after timestamp sync point will be usually 1.

 For example, this corresponds to H.264 cpb_removal_delay.

</member>
        <member name="F:ffmpeg.AVCodecParserContext.convergence_duration">
@deprecated unused

</member>
        <member name="F:ffmpeg.AVCodecParserContext.key_frame">
Set by parser to 1 for key frames and 0 for non-key frames.
It is initialized to -1, so if the parser doesn't set this flag,
old-style fallback using AV_PICTURE_TYPE_I picture type as key frames
will be used.

</member>
        <member name="F:ffmpeg.AVCodecParserContext.offset">
Set if the parser has a valid file offset
</member>
        <member name="F:ffmpeg.AVCodecParserContext.repeat_pict">
 This field is used for proper frame duration computation in lavf.
 It signals, how much longer the frame duration of the current frame
 is compared to normal frame duration.

 frame_duration = (1 + repeat_pict) * time_base

 It is used by codecs like H.264 to display telecined material.

</member>
        <member name="T:ffmpeg.AVPictureStructure">
@defgroup lavc_parsing Frame parsing
@{


 Indicate whether a picture is coded as a frame, top field or bottom field.

 For example, H.264 field_pic_flag equal to 0 corresponds to
 AV_PICTURE_STRUCTURE_FRAME. An H.264 picture with field_pic_flag
 equal to 1 and bottom_field_flag equal to 0 corresponds to
 AV_PICTURE_STRUCTURE_TOP_FIELD.

</member>
        <member name="M:ffmpeg.avcodec_decode_subtitle2(ffmpeg.AVCodecContext*,ffmpeg.AVSubtitle*,System.Int32*,ffmpeg.AVPacket*)">
 Decode a subtitle message.
 Return a negative value on error, otherwise return the number of bytes used.
 If no subtitle could be decompressed, got_sub_ptr is zero.
 Otherwise, the subtitle is stored in *sub.
 Note that AV_CODEC_CAP_DR1 is not available for subtitle codecs. This is for
 simplicity, because the performance difference is expect to be negligible
 and reusing a get_buffer written for video codecs would probably perform badly
 due to a potentially very different allocation pattern.

 Some decoders (those marked with CODEC_CAP_DELAY) have a delay between input
 and output. This means that for some packets they will not immediately
 produce decoded output and need to be flushed at the end of decoding to get
 all the decoded data. Flushing is done by calling this function with packets
 with avpkt-&gt;data set to NULL and avpkt-&gt;size set to 0 until it stops
 returning subtitles. It is safe to flush even those decoders that are not
 marked with CODEC_CAP_DELAY, then no subtitles will be returned.

 @note The AVCodecContext MUST have been opened with @ref avcodec_open2()
 before packets may be fed to the decoder.

 @param avctx the codec context
 @param[out] sub The Preallocated AVSubtitle in which the decoded subtitle will be stored,
                 must be freed with avsubtitle_free if *got_sub_ptr is set.
 @param[in,out] got_sub_ptr Zero if no subtitle could be decompressed, otherwise, it is nonzero.
 @param[in] avpkt The input AVPacket containing the input buffer.

</member>
        <member name="M:ffmpeg.avcodec_decode_audio4(ffmpeg.AVCodecContext*,ffmpeg.AVFrame*,System.Int32*,ffmpeg.AVPacket!System.Runtime.CompilerServices.IsConst*)">
 Decode the audio frame of size avpkt-&gt;size from avpkt-&gt;data into frame.

 Some decoders may support multiple frames in a single AVPacket. Such
 decoders would then just decode the first frame and the return value would be
 less than the packet size. In this case, avcodec_decode_audio4 has to be
 called again with an AVPacket containing the remaining data in order to
 decode the second frame, etc...  Even if no frames are returned, the packet
 needs to be fed to the decoder with remaining data until it is completely
 consumed or an error occurs.

 Some decoders (those marked with AV_CODEC_CAP_DELAY) have a delay between input
 and output. This means that for some packets they will not immediately
 produce decoded output and need to be flushed at the end of decoding to get
 all the decoded data. Flushing is done by calling this function with packets
 with avpkt-&gt;data set to NULL and avpkt-&gt;size set to 0 until it stops
 returning samples. It is safe to flush even those decoders that are not
 marked with AV_CODEC_CAP_DELAY, then no samples will be returned.

 @warning The input buffer, avpkt-&gt;data must be AV_INPUT_BUFFER_PADDING_SIZE
          larger than the actual read bytes because some optimized bitstream
          readers read 32 or 64 bits at once and could read over the end.

 @note The AVCodecContext MUST have been opened with @ref avcodec_open2()
 before packets may be fed to the decoder.

 @param      avctx the codec context
 @param[out] frame The AVFrame in which to store decoded audio samples.
                   The decoder will allocate a buffer for the decoded frame by
                   calling the AVCodecContext.get_buffer2() callback.
                   When AVCodecContext.refcounted_frames is set to 1, the frame is
                   reference counted and the returned reference belongs to the
                   caller. The caller must release the frame using av_frame_unref()
                   when the frame is no longer needed. The caller may safely write
                   to the frame if av_frame_is_writable() returns 1.
                   When AVCodecContext.refcounted_frames is set to 0, the returned
                   reference belongs to the decoder and is valid only until the
                   next call to this function or until closing or flushing the
                   decoder. The caller may not write to it.
 @param[out] got_frame_ptr Zero if no frame could be decoded, otherwise it is
                           non-zero. Note that this field being set to zero
                           does not mean that an error has occurred. For
                           decoders with AV_CODEC_CAP_DELAY set, no given decode
                           call is guaranteed to produce a frame.
 @param[in]  avpkt The input AVPacket containing the input buffer.
                   At least avpkt-&gt;data and avpkt-&gt;size should be set. Some
                   decoders might also require additional fields to be set.
 @return A negative error code is returned if an error occurred during
         decoding, otherwise the number of bytes consumed from the input
         AVPacket is returned.

</member>
        <member name="M:ffmpeg.avcodec_enum_to_chroma_pos(System.Int32*,System.Int32*,ffmpeg.AVChromaLocation)">
 Converts AVChromaLocation to swscale x/y chroma position.

 The positions represent the chroma (0,0) position in a coordinates system
 with luma (0,0) representing the origin and luma(1,1) representing 256,256

 @param xpos  horizontal chroma sample position
 @param ypos  vertical   chroma sample position

</member>
        <member name="M:ffmpeg.avcodec_align_dimensions2(ffmpeg.AVCodecContext*,System.Int32*,System.Int32*,System.Int32*)">
 Modify width and height values so that they will result in a memory
 buffer that is acceptable for the codec if you also ensure that all
 line sizes are a multiple of the respective linesize_align[i].

 May only be used if a codec with AV_CODEC_CAP_DR1 has been opened.

</member>
        <member name="M:ffmpeg.avcodec_align_dimensions(ffmpeg.AVCodecContext*,System.Int32*,System.Int32*)">
 Modify width and height values so that they will result in a memory
 buffer that is acceptable for the codec if you do not use any horizontal
 padding.

 May only be used if a codec with AV_CODEC_CAP_DR1 has been opened.

</member>
        <member name="M:ffmpeg.avcodec_get_edge_width">
 Return the amount of padding in pixels which the get_buffer callback must
 provide around the edge of the image for codecs which do not have the
 CODEC_FLAG_EMU_EDGE flag.

 @return Required padding in pixels.

 @deprecated CODEC_FLAG_EMU_EDGE is deprecated, so this function is no longer
 needed

</member>
        <member name="M:ffmpeg.avcodec_default_get_buffer2(ffmpeg.AVCodecContext*,ffmpeg.AVFrame*,System.Int32)">
The default callback for AVCodecContext.get_buffer2(). It is made public so
it can be called by custom get_buffer2() implementations for decoders without
AV_CODEC_CAP_DR1 set.

</member>
        <member name="M:ffmpeg.avcodec_find_decoder_by_name(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Find a registered decoder with the specified name.

 @param name name of the requested decoder
 @return A decoder if one was found, NULL otherwise.

</member>
        <member name="M:ffmpeg.avcodec_find_decoder(ffmpeg.AVCodecID)">
@}

@addtogroup lavc_decoding
@{

 Find a registered decoder with a matching codec ID.

 @param id AVCodecID of the requested decoder
 @return A decoder if one was found, NULL otherwise.

</member>
        <member name="M:ffmpeg.av_packet_rescale_ts(ffmpeg.AVPacket*,ffmpeg.AVRational,ffmpeg.AVRational)">
 Convert valid timing fields (timestamps / durations) in a packet from one
 timebase to another. Timestamps with unknown values (AV_NOPTS_VALUE) will be
 ignored.

 @param pkt packet on which the conversion will be performed
 @param tb_src source timebase, in which the timing fields in pkt are
               expressed
 @param tb_dst destination timebase, to which the timing fields will be
               converted

</member>
        <member name="M:ffmpeg.av_packet_copy_props(ffmpeg.AVPacket*,ffmpeg.AVPacket!System.Runtime.CompilerServices.IsConst*)">
 Copy only "properties" fields from src to dst.

 Properties for the purpose of this function are all the fields
 beside those related to the packet data (buf, data, size)

 @param dst Destination packet
 @param src Source packet

 @return 0 on success AVERROR on failure.


</member>
        <member name="M:ffmpeg.av_packet_move_ref(ffmpeg.AVPacket*,ffmpeg.AVPacket*)">
 Move every field in src to dst and reset src.

 @see av_packet_unref

 @param src Source packet, will be reset
 @param dst Destination packet

</member>
        <member name="M:ffmpeg.av_packet_unref(ffmpeg.AVPacket*)">
 Wipe the packet.

 Unreference the buffer referenced by the packet and reset the
 remaining packet fields to their default values.

 @param pkt The packet to be unreferenced.

</member>
        <member name="M:ffmpeg.av_packet_ref(ffmpeg.AVPacket*,ffmpeg.AVPacket!System.Runtime.CompilerServices.IsConst*)">
 Setup a new reference to the data described by a given packet

 If src is reference-counted, setup dst as a new reference to the
 buffer in src. Otherwise allocate a new buffer in dst and copy the
 data from src into it.

 All the other fields are copied from src.

 @see av_packet_unref

 @param dst Destination packet
 @param src Source packet

 @return 0 on success, a negative AVERROR on error.

</member>
        <member name="M:ffmpeg.av_packet_free_side_data(ffmpeg.AVPacket*)">
 Convenience function to free all the side data stored.
 All the other fields stay untouched.

 @param pkt packet

</member>
        <member name="M:ffmpeg.av_packet_pack_dictionary(ffmpeg.AVDictionary*,System.Int32*)">
 Pack a dictionary for use in side_data.

 @param dict The dictionary to pack.
 @param size pointer to store the size of the returned data
 @return pointer to data if successful, NULL otherwise

</member>
        <member name="M:ffmpeg.av_packet_get_side_data(ffmpeg.AVPacket*,ffmpeg.AVPacketSideDataType,System.Int32*)">
 Get side information from packet.

 @param pkt packet
 @param type desired side information type
 @param size pointer for side information size to store (optional)
 @return pointer to data if present or NULL otherwise

</member>
        <member name="M:ffmpeg.av_packet_add_side_data(ffmpeg.AVPacket*,ffmpeg.AVPacketSideDataType,System.Byte*,System.UInt32)">
 Wrap an existing array as a packet side data.

 @param pkt packet
 @param type side information type
 @param data the side data array. It must be allocated with the av_malloc()
             family of functions. The ownership of the data is transferred to
             pkt.
 @param size side information size
 @return a non-negative number on success, a negative AVERROR code on
         failure. On failure, the packet is unchanged and the data remains
         owned by the caller.

</member>
        <member name="M:ffmpeg.av_packet_new_side_data(ffmpeg.AVPacket*,ffmpeg.AVPacketSideDataType,System.Int32)">
 Allocate new information of a packet.

 @param pkt packet
 @param type side information type
 @param size side information size
 @return pointer to fresh allocated data or NULL otherwise

</member>
        <member name="M:ffmpeg.av_free_packet(ffmpeg.AVPacket*)">
 Free a packet.

 @deprecated Use av_packet_unref

 @param pkt packet to free

</member>
        <member name="M:ffmpeg.av_copy_packet_side_data(ffmpeg.AVPacket*,ffmpeg.AVPacket!System.Runtime.CompilerServices.IsConst*)">
 Copy packet side data

 @return 0 on success, negative AVERROR on fail

</member>
        <member name="M:ffmpeg.av_copy_packet(ffmpeg.AVPacket*,ffmpeg.AVPacket!System.Runtime.CompilerServices.IsConst*)">
 Copy packet, including contents

 @return 0 on success, negative AVERROR on fail

</member>
        <member name="M:ffmpeg.av_dup_packet(ffmpeg.AVPacket*)">
 @warning This is a hack - the packet memory allocation stuff is broken. The
 packet is allocated if it was not really allocated.

 @deprecated Use av_packet_ref

</member>
        <member name="M:ffmpeg.av_packet_from_data(ffmpeg.AVPacket*,System.Byte*,System.Int32)">
 Initialize a reference-counted packet from av_malloc()ed data.

 @param pkt packet to be initialized. This function will set the data, size,
        buf and destruct fields, all others are left untouched.
 @param data Data allocated by av_malloc() to be used as packet data. If this
        function returns successfully, the data is owned by the underlying AVBuffer.
        The caller may not access the data through other means.
 @param size size of data in bytes, without the padding. I.e. the full buffer
        size is assumed to be size + AV_INPUT_BUFFER_PADDING_SIZE.

 @return 0 on success, a negative AVERROR on error

</member>
        <member name="M:ffmpeg.av_grow_packet(ffmpeg.AVPacket*,System.Int32)">
 Increase packet size, correctly zeroing padding

 @param pkt packet
 @param grow_by number of bytes by which to increase the size of the packet

</member>
        <member name="M:ffmpeg.av_shrink_packet(ffmpeg.AVPacket*,System.Int32)">
 Reduce packet size, correctly zeroing padding

 @param pkt packet
 @param size new size

</member>
        <member name="M:ffmpeg.av_new_packet(ffmpeg.AVPacket*,System.Int32)">
 Allocate the payload of a packet and initialize its fields with
 default values.

 @param pkt packet
 @param size wanted payload size
 @return 0 if OK, AVERROR_xxx otherwise

</member>
        <member name="M:ffmpeg.av_init_packet(ffmpeg.AVPacket*)">
 Initialize optional fields of a packet with default values.

 Note, this does not touch the data and size members, which have to be
 initialized separately.

 @param pkt packet

</member>
        <member name="M:ffmpeg.av_packet_free(ffmpeg.AVPacket**)">
 Free the packet, if the packet is reference counted, it will be
 unreferenced first.

 @param packet packet to be freed. The pointer will be set to NULL.
 @note passing NULL is a no-op.

</member>
        <member name="M:ffmpeg.av_packet_clone(ffmpeg.AVPacket*)">
 Create a new packet that references the same data as src.

 This is a shortcut for av_packet_alloc()+av_packet_ref().

 @return newly created AVPacket on success, NULL on error.

 @see av_packet_alloc
 @see av_packet_ref

</member>
        <member name="M:ffmpeg.av_packet_alloc">
@}

@addtogroup lavc_packet
@{

 Allocate an AVPacket and set its fields to default values.  The resulting
 struct must be freed using av_packet_free().

 @return An AVPacket filled with default values or NULL on failure.

 @note this only allocates the AVPacket itself, not the data buffers. Those
 must be allocated through other means such as av_new_packet.

 @see av_new_packet

</member>
        <member name="M:ffmpeg.avsubtitle_free(ffmpeg.AVSubtitle*)">
 Free all allocated data in the given subtitle struct.

 @param sub AVSubtitle to free.

</member>
        <member name="M:ffmpeg.avcodec_close(ffmpeg.AVCodecContext*)">
 Close a given AVCodecContext and free all the data associated with it
 (but not the AVCodecContext itself).

 Calling this function on an AVCodecContext that hasn't been opened will free
 the codec-specific data allocated in avcodec_alloc_context3() /
 avcodec_get_context_defaults3() with a non-NULL codec. Subsequent calls will
 do nothing.

</member>
        <member name="M:ffmpeg.avcodec_copy_context(ffmpeg.AVCodecContext*,ffmpeg.AVCodecContext!System.Runtime.CompilerServices.IsConst*)">
 Copy the settings of the source AVCodecContext into the destination
 AVCodecContext. The resulting destination codec context will be
 unopened, i.e. you are required to call avcodec_open2() before you
 can use this AVCodecContext to decode/encode video/audio data.

 @param dest target codec context, should be initialized with
             avcodec_alloc_context3(NULL), but otherwise uninitialized
 @param src source codec context
 @return AVERROR() on error (e.g. memory allocation error), 0 on success

</member>
        <member name="M:ffmpeg.avcodec_get_subtitle_rect_class">
 Get the AVClass for AVSubtitleRect. It can be used in combination with
 AV_OPT_SEARCH_FAKE_OBJ for examining options.

 @see av_opt_find().

</member>
        <member name="M:ffmpeg.avcodec_get_frame_class">
 Get the AVClass for AVFrame. It can be used in combination with
 AV_OPT_SEARCH_FAKE_OBJ for examining options.

 @see av_opt_find().

</member>
        <member name="M:ffmpeg.avcodec_get_class">
 Get the AVClass for AVCodecContext. It can be used in combination with
 AV_OPT_SEARCH_FAKE_OBJ for examining options.

 @see av_opt_find().

</member>
        <member name="M:ffmpeg.avcodec_get_context_defaults3(ffmpeg.AVCodecContext*,ffmpeg.AVCodec!System.Runtime.CompilerServices.IsConst*)">
 Set the fields of the given AVCodecContext to default values corresponding
 to the given codec (defaults may be codec-dependent).

 Do not call this function if a non-NULL codec has been passed
 to avcodec_alloc_context3() that allocated this AVCodecContext.
 If codec is non-NULL, it is illegal to call avcodec_open2() with a
 different codec on this AVCodecContext.

</member>
        <member name="M:ffmpeg.avcodec_free_context(ffmpeg.AVCodecContext**)">
Free the codec context and everything associated with it and write NULL to
the provided pointer.

</member>
        <member name="M:ffmpeg.avcodec_alloc_context3(ffmpeg.AVCodec!System.Runtime.CompilerServices.IsConst*)">
 Allocate an AVCodecContext and set its fields to default values. The
 resulting struct should be freed with avcodec_free_context().

 @param codec if non-NULL, allocate private data and initialize defaults
              for the given codec. It is illegal to then call avcodec_open2()
              with a different codec.
              If NULL, then the codec-specific defaults won't be initialized,
              which may result in suboptimal default settings (this is
              important mainly for encoders, e.g. libx264).

 @return An AVCodecContext filled with default values or NULL on failure.
 @see avcodec_get_context_defaults

</member>
        <member name="M:ffmpeg.avcodec_register_all">
 Register all the codecs, parsers and bitstream filters which were enabled at
 configuration time. If you do not call this function you can select exactly
 which formats you want to support, by using the individual registration
 functions.

 @see avcodec_register
 @see av_register_codec_parser
 @see av_register_bitstream_filter

</member>
        <member name="M:ffmpeg.avcodec_register(ffmpeg.AVCodec*)">
 Register the codec codec and initialize libavcodec.

 @warning either this function or avcodec_register_all() must be called
 before any other libavcodec functions.

 @see avcodec_register_all()

</member>
        <member name="M:ffmpeg.avcodec_license">
Return the libavcodec license.

</member>
        <member name="M:ffmpeg.avcodec_configuration">
Return the libavcodec build-time configuration.

</member>
        <member name="M:ffmpeg.avcodec_version">
Return the LIBAVCODEC_VERSION_INT constant.

</member>
        <member name="M:ffmpeg.av_codec_next(ffmpeg.AVCodec!System.Runtime.CompilerServices.IsConst*)">
If c is NULL, returns the first registered codec,
if c is non-NULL, returns the next registered codec after c,
or NULL if c is the last one.

</member>
        <member name="F:ffmpeg.AVSubtitleRect.ass">
0 terminated ASS/SSA compatible event line.
The presentation of this is unaffected by the other values in this
struct.

</member>
        <member name="F:ffmpeg.AVSubtitleRect.data">
data+linesize for the bitmap of this subtitle.
Can be set for text/ass as well once they are rendered.

</member>
        <member name="F:ffmpeg.AVSubtitleRect.pict">
@deprecated unused

</member>
        <member name="T:ffmpeg.AVSubtitleType">
@}

</member>
        <member name="F:SUBTITLE_ASS">
Formatted text, the ass field must be set by the decoder and is
authoritative. pict and text fields may contain approximations.

</member>
        <member name="F:SUBTITLE_TEXT">
Plain text, the text field must be set by the decoder and is
authoritative. ass and pict fields may contain approximations.

</member>
        <member name="T:ffmpeg.AVPicture">
 Hardware acceleration should be used for decoding even if the codec level
 used is unknown or higher than the maximum supported level reported by the
 hardware driver.

 It's generally a good idea to pass this flag unless you have a specific
 reason not to, as hardware tends to under-report supported levels.

Hardware acceleration can output YUV pixel formats with a different chroma
sampling than 4:2:0 and/or other than 8 bits per component.

@}

 @defgroup lavc_picture AVPicture

 Functions for working with AVPicture
 @{

 Picture data structure.

 Up to four components can be stored into it, the last component is
 alpha.
 @deprecated use AVFrame or imgutils functions instead

</member>
        <member name="F:ffmpeg.AVHWAccel.priv_data_size">
Size of the private data to allocate in
AVCodecInternal.hwaccel_priv_data.

</member>
        <member name="F:ffmpeg.AVHWAccel.uninit">
 Uninitialize the hwaccel private data.

 This will be called from get_format() or avcodec_close(), after hwaccel
 and hwaccel_context are already uninitialized.

</member>
        <member name="F:ffmpeg.AVHWAccel.init">
 Initialize the hwaccel private data.

 This will be called from ff_get_format(), after hwaccel and
 hwaccel_context are set and the hwaccel private data in AVCodecInternal
 is allocated.

</member>
        <member name="F:ffmpeg.AVHWAccel.decode_mb">
 Called for every Macroblock in a slice.

 XvMC uses it to replace the ff_mpv_decode_mb().
 Instead of decoding to raw picture, MB parameters are
 stored in an array provided by the video driver.

 @param s the mpeg context

</member>
        <member name="F:ffmpeg.AVHWAccel.frame_priv_data_size">
 Size of per-frame hardware accelerator private data.

 Private data is allocated with av_mallocz() before
 AVCodecContext.get_buffer() and deallocated after
 AVCodecContext.release_buffer().

</member>
        <member name="F:ffmpeg.AVHWAccel.end_frame">
 Called at the end of each frame or field picture.

 The whole picture is parsed at this point and can now be sent
 to the hardware accelerator. This function is mandatory.

 @param avctx the codec context
 @return zero if successful, a negative value otherwise

</member>
        <member name="F:ffmpeg.AVHWAccel.decode_slice">
 Callback for each slice.

 Meaningful slice information (codec specific) is guaranteed to
 be parsed at this point. This function is mandatory.
 The only exception is XvMC, that works on MB level.

 @param avctx the codec context
 @param buf the slice data buffer base
 @param buf_size the size of the slice in bytes
 @return zero if successful, a negative value otherwise

</member>
        <member name="F:ffmpeg.AVHWAccel.start_frame">
 Called at the beginning of each frame or field picture.

 Meaningful frame information (codec specific) is guaranteed to
 be parsed at this point. This function is mandatory.

 Note that buf can be NULL along with buf_size set to 0.
 Otherwise, this means the whole frame is available at this point.

 @param avctx the codec context
 @param buf the frame data buffer base
 @param buf_size the size of the frame in bytes
 @return zero if successful, a negative value otherwise

</member>
        <member name="F:ffmpeg.AVHWAccel.alloc_frame">
Allocate a custom buffer

</member>
        <member name="F:ffmpeg.AVHWAccel.capabilities">
Hardware accelerated codec capabilities.
see HWACCEL_CODEC_CAP_*

</member>
        <member name="F:ffmpeg.AVHWAccel.name">
Name of the hardware accelerated codec.
The name is globally unique among encoders and among decoders (but an
encoder and a decoder can share the same name).

</member>
        <member name="F:ffmpeg.AVCodec.caps_internal">
Internal codec capabilities.
See FF_CODEC_CAP_* in internal.h

</member>
        <member name="F:ffmpeg.AVCodec.flush">
Flush buffers.
Will be called when seeking

</member>
        <member name="F:ffmpeg.AVCodec.encode2">
 Encode data to an AVPacket.

 @param      avctx          codec context
 @param      avpkt          output AVPacket (may contain a user-provided buffer)
 @param[in]  frame          AVFrame containing the raw data to be encoded
 @param[out] got_packet_ptr encoder sets to 0 or 1 to indicate that a
                            non-empty packet was returned in avpkt.
 @return 0 on success, negative error code on failure

</member>
        <member name="F:ffmpeg.AVCodec.init_static_data">
Initialize codec static data, called from avcodec_register().

</member>
        <member name="F:ffmpeg.AVCodec.defaults">
@} 
Private codec-specific defaults.

</member>
        <member name="F:ffmpeg.AVCodec.update_thread_context">
 Copy necessary context variables from a previous thread context to the current one.
 If not defined, the next thread will start automatically; otherwise, the codec
 must call ff_thread_finish_setup().

 dst and src will (rarely) point to the same context, in which case memcpy should be skipped.

</member>
        <member name="F:ffmpeg.AVCodec.init_thread_copy">
@name Frame-level threading support functions
@{

If defined, called on thread contexts when they are created.
If the codec allocates writable tables in init(), re-allocate them here.
priv_data will be set to a copy of the original.

</member>
        <member name="F:ffmpeg.AVCodec.capabilities">
Codec capabilities.
see AV_CODEC_CAP_*

</member>
        <member name="F:ffmpeg.AVCodec.long_name">
Descriptive name for the codec, meant to be more human readable than name.
You should use the NULL_IF_CONFIG_SMALL() macro to define it.

</member>
        <member name="F:ffmpeg.AVCodec.name">
Name of the codec implementation.
The name is globally unique among encoders and among decoders (but an
encoder and a decoder can share the same name).
This is the primary way to find a codec from the user perspective.

</member>
        <member name="T:ffmpeg.AVCodec">
AVCodec.

</member>
        <member name="F:ffmpeg.AVCodecContext.coded_side_data">
 Additional data associated with the entire coded stream.

 - decoding: unused
 - encoding: may be set by libavcodec after avcodec_open2().

</member>
        <member name="F:ffmpeg.AVCodecContext.codec_whitelist">
',' separated list of allowed decoders.
If NULL then all are allowed
- encoding: unused
- decoding: set by user through AVOPtions (NO direct access)

</member>
        <member name="F:ffmpeg.AVCodecContext.dump_separator">
dump format separator.
can be ", " or "\n      " or anything else
Code outside libavcodec should access this field using AVOptions
(NO direct access).
- encoding: Set by user.
- decoding: Set by user.

</member>
        <member name="F:ffmpeg.AVCodecContext.chroma_intra_matrix">
custom intra quantization matrix
Code outside libavcodec should access this field using av_codec_g/set_chroma_intra_matrix()
- encoding: Set by user, can be NULL.
- decoding: unused.

</member>
        <member name="F:ffmpeg.AVCodecContext.seek_preroll">
Number of samples to skip after a discontinuity
- decoding: unused
- encoding: set by libavcodec

</member>
        <member name="F:ffmpeg.AVCodecContext.skip_alpha">
 Skip processing alpha if supported by codec.
 Note that if the format uses pre-multiplied alpha (common with VP6,
 and recommended due to better video quality/compression)
 the image will look as if alpha-blended onto a black background.
 However for formats that do not use pre-multiplied alpha
 there might be serious artefacts (though e.g. libswscale currently
 assumes pre-multiplied alpha anyway).
 Code outside libavcodec should access this field using AVOptions

 - decoding: set by user
 - encoding: unused

</member>
        <member name="F:ffmpeg.AVCodecContext.sub_charenc_mode">
Subtitles character encoding mode. Formats or codecs might be adjusting
this setting (if they are doing the conversion themselves for instance).
- decoding: set by libavcodec
- encoding: unused

</member>
        <member name="F:ffmpeg.AVCodecContext.sub_charenc">
Character encoding of the input subtitles file.
- decoding: set by user
- encoding: unused

</member>
        <member name="F:ffmpeg.AVCodecContext.pts_correction_num_faulty_pts">
Current statistics for PTS correction.
- decoding: maintained and used by libavcodec, not intended to be used by user apps
- encoding: unused

</member>
        <member name="F:ffmpeg.AVCodecContext.codec_descriptor">
AVCodecDescriptor
Code outside libavcodec should access this field using:
av_codec_{get,set}_codec_descriptor(avctx)
- encoding: unused.
- decoding: set by libavcodec.

</member>
        <member name="F:ffmpeg.AVCodecContext.pkt_timebase">
Timebase in which pkt_dts/pts and AVPacket.dts/pts are.
Code outside libavcodec should access this field using:
av_codec_{get,set}_pkt_timebase(avctx)
- encoding unused.
- decoding set by user.

</member>
        <member name="F:ffmpeg.AVCodecContext.framerate">
- decoding: For codecs that store a framerate value in the compressed
            bitstream, the decoder may export it here. { 0, 1} when
            unknown.
- encoding: unused

</member>
        <member name="F:ffmpeg.AVCodecContext.initial_padding">
 Audio only. The number of "priming" samples (padding) inserted by the
 encoder at the beginning of the audio. I.e. this number of leading
 decoded samples must be discarded by the caller to get the original audio
 without leading padding.

 - decoding: unused
 - encoding: Set by libavcodec. The timestamps on the output packets are
             adjusted by the encoder so that they always refer to the
             first sample of the data actually contained in the packet,
             including any added padding.  E.g. if the timebase is
             1/samplerate and the timestamp of the first input sample is
             0, the timestamp of the first output packet will be
             -initial_padding.

</member>
        <member name="F:ffmpeg.AVCodecContext.side_data_only_packets">
 Encoding only and set by default. Allow encoders to output packets
 that do not contain any encoded data, only side data.

 Some encoders need to output such packets, e.g. to update some stream
 parameters at the end of encoding.

 @deprecated this field disables the default behaviour and
             it is kept only for compatibility.

</member>
        <member name="F:ffmpeg.AVCodecContext.vbv_delay">
VBV delay coded in the last frame (in periods of a 27 MHz clock).
Used for compliant TS muxing.
- encoding: Set by libavcodec.
- decoding: unused.
@deprecated this value is now exported as a part of
AV_PKT_DATA_CPB_PROPERTIES packet side data

</member>
        <member name="F:ffmpeg.AVCodecContext.error_rate">
@deprecated use the 'error_rate' private AVOption of the mpegvideo
encoders

</member>
        <member name="F:ffmpeg.AVCodecContext.subtitle_header">
Header containing style information for text subtitles.
For SUBTITLE_ASS subtitle type, it should contain the whole ASS
[Script Info] and [V4+ Styles] section, plus the [Events] line and
the Format line following. It shouldn't include any Dialogue line.
- encoding: Set/allocated/freed by user (before avcodec_open2())
- decoding: Set/allocated/freed by libavcodec (by avcodec_open2())

</member>
        <member name="F:ffmpeg.AVCodecContext.level">
level
- encoding: Set by user.
- decoding: Set by libavcodec.

</member>
        <member name="F:ffmpeg.AVCodecContext.profile">
profile
- encoding: Set by user.
- decoding: Set by libavcodec.

</member>
        <member name="F:ffmpeg.AVCodecContext.nsse_weight">
noise vs. sse weight for the nsse comparison function
- encoding: Set by user.
- decoding: unused

</member>
        <member name="F:ffmpeg.AVCodecContext.execute">
The codec may call this to execute several independent things.
It will return only after finishing all tasks.
The user may replace this with some multithreaded implementation,
the default implementation will execute the parts serially.
@param count the number of things to execute
- encoding: Set by libavcodec, user can override.
- decoding: Set by libavcodec, user can override.

</member>
        <member name="F:ffmpeg.AVCodecContext.thread_safe_callbacks">
Set by the client if its custom get_buffer() callback can be called
synchronously from another thread, which allows faster multithreaded decoding.
draw_horiz_band() will be called from other threads regardless of this setting.
Ignored if the default get_buffer() is used.
- encoding: Set by user.
- decoding: Set by user.

</member>
        <member name="F:ffmpeg.AVCodecContext.active_thread_type">
Which multithreading methods are in use by the codec.
- encoding: Set by libavcodec.
- decoding: Set by libavcodec.

</member>
        <member name="F:ffmpeg.AVCodecContext.thread_type">
 Which multithreading methods to use.
 Use of FF_THREAD_FRAME will increase decoding delay by one frame per thread,
 so clients which cannot provide future frames should not use it.

 - encoding: Set by user, otherwise the default is used.
 - decoding: Set by user, otherwise the default is used.

</member>
        <member name="F:ffmpeg.AVCodecContext.thread_count">
thread count
is used to decide how many independent tasks should be passed to execute()
- encoding: Set by user.
- decoding: Set by user.

</member>
        <member name="F:ffmpeg.AVCodecContext.coded_frame">
 the picture in the bitstream
 - encoding: Set by libavcodec.
 - decoding: unused

 @deprecated use the quality factor packet side data instead

</member>
        <member name="F:ffmpeg.AVCodecContext.lowres">
low resolution decoding, 1-&gt; 1/2 size, 2-&gt;1/4 size
- encoding: unused
- decoding: Set by user.
Code outside libavcodec should access this field using:
av_codec_{get,set}_lowres(avctx)

</member>
        <member name="F:ffmpeg.AVCodecContext.bits_per_raw_sample">
Bits per sample/pixel of internal libavcodec pixel/sample format.
- encoding: set by user.
- decoding: set by libavcodec.

</member>
        <member name="F:ffmpeg.AVCodecContext.bits_per_coded_sample">
bits per sample/pixel from the demuxer (needed for huffyuv).
- encoding: Set by libavcodec.
- decoding: Set by user.

</member>
        <member name="F:ffmpeg.AVCodecContext.idct_algo">
IDCT algorithm, see FF_IDCT_* below.
- encoding: Set by user.
- decoding: Set by user.

</member>
        <member name="F:ffmpeg.AVCodecContext.dct_algo">
DCT algorithm, see FF_DCT_* below
- encoding: Set by user.
- decoding: unused

</member>
        <member name="F:ffmpeg.AVCodecContext.hwaccel_context">
Hardware accelerator context.
For some hardware accelerators, a global context needs to be
provided by the user. In that case, this holds display-dependent
data FFmpeg cannot instantiate itself. Please refer to the
FFmpeg HW accelerator documentation to know how to fill this
is. e.g. for VA API, this is a struct vaapi_context.
- encoding: unused
- decoding: Set by user

</member>
        <member name="T:ffmpeg.AVHWAccel">
Hardware accelerator in use
- encoding: unused.
- decoding: Set by libavcodec


@defgroup lavc_hwaccel AVHWAccel
@{

</member>
        <member name="F:ffmpeg.AVCodecContext.reordered_opaque">
Verify checksums embedded in the bitstream (could be of either encoded or
decoded data, depending on the codec) and print an error message on mismatch.
If AV_EF_EXPLODE is also set, a mismatching checksum will result in the
decoder returning an error.

opaque 64bit number (generally a PTS) that will be reordered and
output in AVFrame.reordered_opaque
- encoding: unused
- decoding: Set by user.

</member>
        <member name="F:ffmpeg.AVCodecContext.err_recognition">
Error recognition; may misdetect some more or less valid parts as errors.
- encoding: unused
- decoding: Set by user.

</member>
        <member name="F:ffmpeg.AVCodecContext.debug_mv">
@deprecated this option does nothing

debug
Code outside libavcodec should access this field using AVOptions
- encoding: Set by user.
- decoding: Set by user.

</member>
        <member name="F:ffmpeg.AVCodecContext.debug">
debug
- encoding: Set by user.
- decoding: Set by user.

</member>
        <member name="F:ffmpeg.AVCodecContext.error_concealment">
error concealment flags
- encoding: unused
- decoding: Set by user.

</member>
        <member name="F:ffmpeg.AVCodecContext.strict_std_compliance">
strictly follow the standard (MPEG4, ...).
- encoding: Set by user.
- decoding: Set by user.
Setting this to STRICT or higher means the encoder and decoder will
generally do stupid things, whereas setting it to unofficial or lower
will mean the encoder might produce output that is not supported by all
spec-compliant decoders. Decoders don't differentiate between normal,
unofficial and experimental (that is, they always try to decode things
when they can) unless they are explicitly asked to behave stupidly
(=strictly conform to the specs)

</member>
        <member name="F:ffmpeg.AVCodecContext.workaround_bugs">
Work around bugs in encoders which sometimes cannot be detected automatically.
- encoding: Set by user
- decoding: Set by user

</member>
        <member name="F:ffmpeg.AVCodecContext.stats_in">
pass2 encoding statistics input buffer
Concatenated stuff from stats_out of pass1 should be placed here.
- encoding: Allocated/set/freed by user.
- decoding: unused

</member>
        <member name="F:ffmpeg.AVCodecContext.stats_out">
pass1 encoding statistics output buffer
- encoding: Set by libavcodec.
- decoding: unused

</member>
        <member name="F:ffmpeg.AVCodecContext.frame_bits">
@deprecated this field is unused 
</member>
        <member name="F:ffmpeg.AVCodecContext.rtp_payload_size">
@deprecated use encoder private options instead 
</member>
        <member name="F:ffmpeg.AVCodecContext.rtp_callback">
@deprecated unused

</member>
        <member name="F:ffmpeg.AVCodecContext.timecode_frame_start">
@deprecated use encoder private options instead 
</member>
        <member name="F:ffmpeg.AVCodecContext.max_prediction_order">
@deprecated use encoder private options instead 
</member>
        <member name="F:ffmpeg.AVCodecContext.min_prediction_order">
@deprecated use encoder private options instead 
</member>
        <member name="F:ffmpeg.AVCodecContext.trellis">
trellis RD quantization
- encoding: Set by user.
- decoding: unused

</member>
        <member name="F:ffmpeg.AVCodecContext.frame_skip_cmp">
@deprecated use encoder private options instead 
</member>
        <member name="F:ffmpeg.AVCodecContext.frame_skip_exp">
@deprecated use encoder private options instead 
</member>
        <member name="F:ffmpeg.AVCodecContext.frame_skip_factor">
@deprecated use encoder private options instead 
</member>
        <member name="F:ffmpeg.AVCodecContext.frame_skip_threshold">
@deprecated use encoder private options instead 
</member>
        <member name="F:ffmpeg.AVCodecContext.lmax">
@deprecated use encoder private options instead

</member>
        <member name="F:ffmpeg.AVCodecContext.lmin">
@deprecated use encoder private options instead

</member>
        <member name="F:ffmpeg.AVCodecContext.context_model">
@deprecated use encoder private options instead 
</member>
        <member name="F:ffmpeg.AVCodecContext.coder_type">
@deprecated use encoder private options instead

</member>
        <member name="F:ffmpeg.AVCodecContext.rc_initial_buffer_occupancy">
Number of bits which should be loaded into the rc buffer before decoding starts.
- encoding: Set by user.
- decoding: unused

</member>
        <member name="F:ffmpeg.AVCodecContext.rc_buffer_aggressivity">
@deprecated use encoder private options instead

</member>
        <member name="F:ffmpeg.AVCodecContext.rc_min_rate">
minimum bitrate
- encoding: Set by user.
- decoding: unused

</member>
        <member name="F:ffmpeg.AVCodecContext.rc_max_rate">
maximum bitrate
- encoding: Set by user.
- decoding: Set by user, may be overwritten by libavcodec.

</member>
        <member name="F:ffmpeg.AVCodecContext.rc_eq">
@deprecated use encoder private options instead

</member>
        <member name="F:ffmpeg.AVCodecContext.rc_override_count">
ratecontrol override, see RcOverride
- encoding: Allocated/set/freed by user.
- decoding: unused

</member>
        <member name="F:ffmpeg.AVCodecContext.rc_buffer_size">
decoder bitstream buffer size
- encoding: Set by user.
- decoding: unused

</member>
        <member name="F:ffmpeg.AVCodecContext.rc_qsquish">
@deprecated use encoder private options instead

</member>
        <member name="F:ffmpeg.AVCodecContext.max_qdiff">
maximum quantizer difference between frames
- encoding: Set by user.
- decoding: unused

</member>
        <member name="F:ffmpeg.AVCodecContext.qmax">
maximum quantizer
- encoding: Set by user.
- decoding: unused

</member>
        <member name="F:ffmpeg.AVCodecContext.qmin">
minimum quantizer
- encoding: Set by user.
- decoding: unused

</member>
        <member name="F:ffmpeg.AVCodecContext.refcounted_frames">
 If non-zero, the decoded audio and video frames returned from
 avcodec_decode_video2() and avcodec_decode_audio4() are reference-counted
 and are valid indefinitely. The caller must free them with
 av_frame_unref() when they are not needed anymore.
 Otherwise, the decoded frames must not be freed by the caller and are
 only valid until the next decode call.

 - encoding: unused
 - decoding: set by the caller before avcodec_open2().

</member>
        <member name="F:ffmpeg.AVCodecContext.get_buffer2">
 This callback is called at the beginning of each frame to get data
 buffer(s) for it. There may be one contiguous buffer for all the data or
 there may be a buffer per each data plane or anything in between. What
 this means is, you may set however many entries in buf[] you feel necessary.
 Each buffer must be reference-counted using the AVBuffer API (see description
 of buf[] below).

 The following fields will be set in the frame before this callback is
 called:
 - format
 - width, height (video only)
 - sample_rate, channel_layout, nb_samples (audio only)
 Their values may differ from the corresponding values in
 AVCodecContext. This callback must use the frame values, not the codec
 context values, to calculate the required buffer size.

 This callback must fill the following fields in the frame:
 - data[]
 - linesize[]
 - extended_data:
   * if the data is planar audio with more than 8 channels, then this
     callback must allocate and fill extended_data to contain all pointers
     to all data planes. data[] must hold as many pointers as it can.
     extended_data must be allocated with av_malloc() and will be freed in
     av_frame_unref().
   * otherwise exended_data must point to data
 - buf[] must contain one or more pointers to AVBufferRef structures. Each of
   the frame's data and extended_data pointers must be contained in these. That
   is, one AVBufferRef for each allocated chunk of memory, not necessarily one
   AVBufferRef per data[] entry. See: av_buffer_create(), av_buffer_alloc(),
   and av_buffer_ref().
 - extended_buf and nb_extended_buf must be allocated with av_malloc() by
   this callback and filled with the extra buffers if there are more
   buffers than buf[] can hold. extended_buf will be freed in
   av_frame_unref().

 If AV_CODEC_CAP_DR1 is not set then get_buffer2() must call
 avcodec_default_get_buffer2() instead of providing buffers allocated by
 some other means.

 Each data plane must be aligned to the maximum required by the target
 CPU.

 @see avcodec_default_get_buffer2()

 Video:

 If AV_GET_BUFFER_FLAG_REF is set in flags then the frame may be reused
 (read and/or written to if it is writable) later by libavcodec.

 avcodec_align_dimensions2() should be used to find the required width and
 height, as they normally need to be rounded up to the next multiple of 16.

 Some decoders do not support linesizes changing between frames.

 If frame multithreading is used and thread_safe_callbacks is set,
 this callback may be called from a different thread, but not from more
 than one at once. Does not need to be reentrant.

 @see avcodec_align_dimensions2()

 Audio:

 Decoders request a buffer of a particular size by setting
 AVFrame.nb_samples prior to calling get_buffer2(). The decoder may,
 however, utilize only part of the buffer by setting AVFrame.nb_samples
 to a smaller value in the output frame.

 As a convenience, av_samples_get_buffer_size() and
 av_samples_fill_arrays() in libavutil may be used by custom get_buffer2()
 functions to find the required data size and to fill data pointers and
 linesize. In AVFrame.linesize, only linesize[0] may be set for audio
 since all planes must be the same size.

 @see av_samples_get_buffer_size(), av_samples_fill_arrays()

 - encoding: unused
 - decoding: Set by libavcodec, user can override.

</member>
        <member name="T:ffmpeg.AVAudioServiceType">
Type of service that the audio stream conveys.
- encoding: Set by user.
- decoding: Set by libavcodec.

</member>
        <member name="F:ffmpeg.AVCodecContext.request_channel_layout">
Request decoder to use this channel layout if it can (0 for default)
- encoding: unused
- decoding: Set by user.

</member>
        <member name="F:ffmpeg.AVCodecContext.channel_layout">
Audio channel layout.
- encoding: set by user.
- decoding: set by user, may be overwritten by libavcodec.

</member>
        <member name="F:ffmpeg.AVCodecContext.cutoff">
Audio cutoff bandwidth (0 means "automatic")
- encoding: Set by user.
- decoding: unused

</member>
        <member name="F:ffmpeg.AVCodecContext.block_align">
number of bytes per packet if constant and known or 0
Used by some WAV based audio codecs.

</member>
        <member name="F:ffmpeg.AVCodecContext.frame_number">
 Frame counter, set by libavcodec.

 - decoding: total number of frames returned from the decoder so far.
 - encoding: total number of frames passed to the encoder so far.

   @note the counter is not incremented if encoding/decoding resulted in
   an error.

</member>
        <member name="F:ffmpeg.AVCodecContext.frame_size">
 Number of samples per channel in an audio frame.

 - encoding: set by libavcodec in avcodec_open2(). Each submitted frame
   except the last must contain exactly frame_size samples per channel.
   May be 0 when the codec has AV_CODEC_CAP_VARIABLE_FRAME_SIZE set, then the
   frame size is not restricted.
 - decoding: may be set by some decoders to indicate constant frame size

</member>
        <member name="T:ffmpeg.AVFieldOrder">
Field order
     * - encoding: set by libavcodec
     * - decoding: Set by user.

</member>
        <member name="F:ffmpeg.AVCodecContext.slices">
Number of slices.
Indicates number of picture subdivisions. Used for parallelized
decoding.
- encoding: Set by user
- decoding: unused

</member>
        <member name="F:ffmpeg.AVCodecContext.b_sensitivity">
@deprecated use encoder private options instead 
</member>
        <member name="F:ffmpeg.AVCodecContext.mv0_threshold">

 Note: Value depends upon the compare function used for fullpel ME.
 - encoding: Set by user.
 - decoding: unused

</member>
        <member name="F:ffmpeg.AVCodecContext.scenechange_factor">
Multiplied by qscale for each frame and added to scene_change_score.
- encoding: Set by user.
- decoding: unused

</member>
        <member name="F:ffmpeg.AVCodecContext.chromaoffset">
@deprecated use encoder private options instead 
</member>
        <member name="F:ffmpeg.AVCodecContext.refs">
number of reference frames
- encoding: Set by user.
- decoding: Set by lavc.

</member>
        <member name="F:ffmpeg.AVCodecContext.keyint_min">
minimum GOP size
- encoding: Set by user.
- decoding: unused

</member>
        <member name="F:ffmpeg.AVCodecContext.brd_scale">
@deprecated use encoder private options instead 
</member>
        <member name="F:ffmpeg.AVCodecContext.bidir_refine">

 - encoding: Set by user.
 - decoding: unused

</member>
        <member name="F:ffmpeg.AVCodecContext.me_penalty_compensation">
@deprecated use encoder private options instead

</member>
        <member name="F:ffmpeg.AVCodecContext.mb_lmax">
maximum MB lagrange multipler
- encoding: Set by user.
- decoding: unused

</member>
        <member name="F:ffmpeg.AVCodecContext.mb_lmin">
minimum MB lagrange multipler
- encoding: Set by user.
- decoding: unused

</member>
        <member name="F:ffmpeg.AVCodecContext.border_masking">
@deprecated use encoder private options instead

</member>
        <member name="F:ffmpeg.AVCodecContext.skip_bottom">
Number of macroblock rows at the bottom which are skipped.
- encoding: unused
- decoding: Set by user.

</member>
        <member name="F:ffmpeg.AVCodecContext.skip_top">
Number of macroblock rows at the top which are skipped.
- encoding: unused
- decoding: Set by user.

</member>
        <member name="F:ffmpeg.AVCodecContext.intra_dc_precision">
precision of the intra DC coefficient - 8
- encoding: Set by user.
- decoding: Set by libavcodec

</member>
        <member name="F:ffmpeg.AVCodecContext.mb_threshold">
@deprecated this field is unused

</member>
        <member name="F:ffmpeg.AVCodecContext.me_threshold">
@deprecated this field is unused

</member>
        <member name="F:ffmpeg.AVCodecContext.noise_reduction">
@deprecated use encoder private options instead 
</member>
        <member name="F:ffmpeg.AVCodecContext.scenechange_threshold">
@deprecated use encoder private options instead 
</member>
        <member name="F:ffmpeg.AVCodecContext.inter_matrix">
custom inter quantization matrix
- encoding: Set by user, can be NULL.
- decoding: Set by libavcodec.

</member>
        <member name="F:ffmpeg.AVCodecContext.intra_matrix">
custom intra quantization matrix
- encoding: Set by user, can be NULL.
- decoding: Set by libavcodec.

</member>
        <member name="F:ffmpeg.AVCodecContext.mb_decision">
macroblock decision mode
- encoding: Set by user.
- decoding: unused

</member>
        <member name="F:ffmpeg.AVCodecContext.xvmc_acceleration">
XVideo Motion Acceleration
- encoding: forbidden
- decoding: set by decoder
@deprecated XvMC doesn't need it anymore.

</member>
        <member name="F:ffmpeg.AVCodecContext.slice_flags">
slice flags
- encoding: unused
- decoding: Set by user.

</member>
        <member name="F:ffmpeg.AVCodecContext.inter_quant_bias">
@deprecated use encoder private option instead

</member>
        <member name="F:ffmpeg.AVCodecContext.intra_quant_bias">
@deprecated use encoder private option instead

</member>
        <member name="F:ffmpeg.AVCodecContext.me_range">
 maximum motion estimation search range in subpel units
 If 0 then no limit.

 - encoding: Set by user.
 - decoding: unused

</member>
        <member name="F:ffmpeg.AVCodecContext.dtg_active_format">
 DTG active format information (additional aspect ratio
 information only used in DVB MPEG-2 transport streams)
 0 if not set.

 - encoding: unused
 - decoding: Set by decoder.
 @deprecated Deprecated in favor of AVSideData

</member>
        <member name="F:ffmpeg.AVCodecContext.me_subpel_quality">
subpel ME quality
- encoding: Set by user.
- decoding: unused

</member>
        <member name="F:ffmpeg.AVCodecContext.me_pre_cmp">
motion estimation prepass comparison function
- encoding: Set by user.
- decoding: unused

</member>
        <member name="F:ffmpeg.AVCodecContext.pre_me">
@deprecated use encoder private options instead 
</member>
        <member name="F:ffmpeg.AVCodecContext.last_predictor_count">
amount of previous MV predictors (2a+1 x 2a+1 square)
- encoding: Set by user.
- decoding: unused

</member>
        <member name="F:ffmpeg.AVCodecContext.ildct_cmp">
interlaced DCT comparison function
- encoding: Set by user.
- decoding: unused

</member>
        <member name="F:ffmpeg.AVCodecContext.mb_cmp">
macroblock comparison function (not supported yet)
- encoding: Set by user.
- decoding: unused

</member>
        <member name="F:ffmpeg.AVCodecContext.me_sub_cmp">
subpixel motion estimation comparison function
- encoding: Set by user.
- decoding: unused

</member>
        <member name="F:ffmpeg.AVCodecContext.me_cmp">
motion estimation comparison function
- encoding: Set by user.
- decoding: unused

</member>
        <member name="F:ffmpeg.AVCodecContext.sample_aspect_ratio">
sample aspect ratio (0 if unknown)
That is the width of a pixel divided by the height of the pixel.
Numerator and denominator must be relatively prime and smaller than 256 for some video standards.
- encoding: Set by user.
- decoding: Set by libavcodec.

</member>
        <member name="F:ffmpeg.AVCodecContext.slice_offset">
slice offsets in the frame in bytes
- encoding: Set/allocated by libavcodec.
- decoding: Set/allocated by user (or NULL).

</member>
        <member name="F:ffmpeg.AVCodecContext.prediction_method">
@deprecated use encoder private options instead 
</member>
        <member name="F:ffmpeg.AVCodecContext.slice_count">
slice count
- encoding: Set by libavcodec.
- decoding: Set by user (or 0).

</member>
        <member name="F:ffmpeg.AVCodecContext.dark_masking">
darkness masking (0-&gt; disabled)
- encoding: Set by user.
- decoding: unused

</member>
        <member name="F:ffmpeg.AVCodecContext.p_masking">
p block masking (0-&gt; disabled)
- encoding: Set by user.
- decoding: unused

</member>
        <member name="F:ffmpeg.AVCodecContext.spatial_cplx_masking">
spatial complexity masking (0-&gt; disabled)
- encoding: Set by user.
- decoding: unused

</member>
        <member name="F:ffmpeg.AVCodecContext.temporal_cplx_masking">
temporary complexity masking (0-&gt; disabled)
- encoding: Set by user.
- decoding: unused

</member>
        <member name="F:ffmpeg.AVCodecContext.lumi_masking">
luminance masking (0-&gt; disabled)
- encoding: Set by user.
- decoding: unused

</member>
        <member name="F:ffmpeg.AVCodecContext.i_quant_offset">
qscale offset between P and I-frames
- encoding: Set by user.
- decoding: unused

</member>
        <member name="F:ffmpeg.AVCodecContext.mpeg_quant">
@deprecated use encoder private options instead 
</member>
        <member name="F:ffmpeg.AVCodecContext.has_b_frames">
Size of the frame reordering buffer in the decoder.
For MPEG-2 it is 1 IPB or 0 low delay IP.
- encoding: Set by libavcodec.
- decoding: Set by libavcodec.

</member>
        <member name="F:ffmpeg.AVCodecContext.b_quant_offset">
qscale offset between IP and B-frames
- encoding: Set by user.
- decoding: unused

</member>
        <member name="F:ffmpeg.AVCodecContext.b_frame_strategy">
@deprecated use encoder private options instead 
</member>
        <member name="F:ffmpeg.AVCodecContext.rc_strategy">
@deprecated use codec private option instead 
</member>
        <member name="F:ffmpeg.AVCodecContext.max_b_frames">
maximum number of B-frames between non-B-frames
Note: The output will be delayed by max_b_frames+1 relative to the input.
- encoding: Set by user.
- decoding: unused

</member>
        <member name="F:ffmpeg.AVCodecContext.draw_horiz_band">
If non NULL, 'draw_horiz_band' is called by the libavcodec
decoder to draw a horizontal band. It improves cache usage. Not
all codecs can do that. You must check the codec capabilities
beforehand.
When multithreading is used, it may be called from multiple threads
at the same time; threads might draw different parts of the same AVFrame,
or multiple AVFrames, and there is no guarantee that slices will be drawn
in order.
The function is also used by hardware acceleration APIs.
It is called at least once during frame decoding to pass
the data needed for hardware render.
In that mode instead of pixel data, AVFrame points to
a structure specific to the acceleration API. The application
reads the structure and can change some fields to indicate progress
or mark state.
- encoding: unused
- decoding: Set by user.
@param height the height of the slice
@param y the y position of the slice
@param type 1-&gt;top field, 2-&gt;bottom field, 3-&gt;frame
@param offset offset into the AVFrame.data from which the slice should be read

</member>
        <member name="F:ffmpeg.AVCodecContext.me_method">
This option does nothing
@deprecated use codec private options instead

</member>
        <member name="T:ffmpeg.AVPixelFormat">
 Pixel format, see AV_PIX_FMT_xxx.
 May be set by the demuxer if known from headers.
 May be overridden by the decoder if it knows better.

 @note This field may not match the value of the last
 AVFrame outputted by avcodec_decode_video2 due frame
 reordering.

 - encoding: Set by user.
 - decoding: Set by user if known, overridden by libavcodec while
             parsing the data.


callback to negotiate the pixelFormat
@param fmt is the list of formats which are supported by the codec,
it is terminated by -1 as 0 is a valid format, the formats are ordered by quality.
The first is always the native one.
@note The callback may be called again immediately if initialization for
the selected (hardware-accelerated) pixel format failed.
@warning Behavior is undefined if the callback returns a value not
in the fmt list of formats.
@return the chosen format
- encoding: unused
- decoding: Set by user, if not set the native format will be chosen.


Nominal unaccelerated pixel format, see AV_PIX_FMT_xxx.
- encoding: unused.
- decoding: Set by libavcodec before calling get_format()


 Supported pixel format.

 Only hardware accelerated formats are supported here.


 Find the best pixel format to convert to given a certain source pixel
 format.  When converting from one pixel format to another, information loss
 may occur.  For example, when converting from RGB24 to GRAY, the color
 information will be lost. Similarly, other losses occur when converting from
 some formats to other formats. avcodec_find_best_pix_fmt_of_2() searches which of
 the given pixel formats should be used to suffer the least amount of loss.
 The pixel formats from which it chooses one, are determined by the
 pix_fmt_list parameter.


 @param[in] pix_fmt_list AV_PIX_FMT_NONE terminated array of pixel formats to choose from
 @param[in] src_pix_fmt source pixel format
 @param[in] has_alpha Whether the source pixel format alpha channel is used.
 @param[out] loss_ptr Combination of flags informing you what kind of losses will occur.
 @return The best pixel format to convert to or -1 if none was found.


@deprecated see av_find_best_pix_fmt_of_2()


 Return the pixel format corresponding to name.

 If there is no pixel format with name name, then looks for a
 pixel format with the name corresponding to the native endian
 format of name.
 For example in a little-endian system, first looks for "gray16",
 then for "gray16le".

 Finally if no pixel format has been found, returns AV_PIX_FMT_NONE.


@return an AVPixelFormat id described by desc, or AV_PIX_FMT_NONE if desc
is not a valid pointer to a pixel format descriptor.


 Utility function to swap the endianness of a pixel format.

 @param[in]  pix_fmt the pixel format

 @return pixel format with swapped endianness if it exists,
 otherwise AV_PIX_FMT_NONE


 Compute what kind of losses will occur when converting from one specific
 pixel format to another.
 When converting from one pixel format to another, information loss may occur.
 For example, when converting from RGB24 to GRAY, the color information will
 be lost. Similarly, other losses occur when converting from some formats to
 other formats. These losses can involve loss of chroma, but also loss of
 resolution, loss of color depth, loss due to the color space conversion, loss
 of the alpha bits or loss due to color quantization.
 av_get_fix_fmt_loss() informs you about the various types of losses
 which will occur when converting from one pixel format to another.

 @param[in] dst_pix_fmt destination pixel format
 @param[in] src_pix_fmt source pixel format
 @param[in] has_alpha Whether the source pixel format alpha channel is used.
 @return Combination of flags informing you what kind of losses will occur
 (maximum loss for an invalid dst_pix_fmt).

</member>
        <member name="F:ffmpeg.AVCodecContext.gop_size">
the number of pictures in a group of pictures, or 0 for intra_only
- encoding: Set by user.
- decoding: unused

</member>
        <member name="F:ffmpeg.AVCodecContext.coded_width">
 Bitstream width / height, may be different from width/height e.g. when
 the decoded frame is cropped before being output or lowres is enabled.

 @note Those field may not match the value of the last
 AVFrame outputted by avcodec_decode_video2 due frame
 reordering.

 - encoding: unused
 - decoding: May be set by the user before opening the decoder if known
             e.g. from the container. During decoding, the decoder may
             overwrite those values as required while parsing the data.

</member>
        <member name="F:ffmpeg.AVCodecContext.width">
 picture width / height.

 @note Those fields may not match the values of the last
 AVFrame outputted by avcodec_decode_video2 due frame
 reordering.

 - encoding: MUST be set by user.
 - decoding: May be set by the user before opening the decoder if known e.g.
             from the container. Some decoders will require the dimensions
             to be set by the caller. During decoding, the decoder may
             overwrite those values as required while parsing the data.

</member>
        <member name="F:ffmpeg.AVCodecContext.delay">
 Codec delay.

 Encoding: Number of frames delay there will be from the encoder input to
           the decoder output. (we assume the decoder matches the spec)
 Decoding: Number of frames delay in addition to what a standard decoder
           as specified in the spec would produce.

 Video:
   Number of frames the decoded output will be delayed relative to the
   encoded input.

 Audio:
   For encoding, this field is unused (see initial_padding).

   For decoding, this is the number of samples the decoder needs to
   output before the decoder's output is valid. When seeking, you should
   start decoding this many samples prior to your desired seek point.

 - encoding: Set by libavcodec.
 - decoding: Set by libavcodec.

</member>
        <member name="F:ffmpeg.AVCodecContext.ticks_per_frame">
 For some codecs, the time base is closer to the field rate than the frame rate.
 Most notably, H.264 and MPEG-2 specify time_base as half of frame duration
 if no telecine is used ...

 Set to time_base ticks per frame. Default 1, e.g., H.264/MPEG-2 set it to 2.

</member>
        <member name="F:ffmpeg.AVCodecContext.time_base">
This is the fundamental unit of time (in seconds) in terms
of which frame timestamps are represented. For fixed-fps content,
timebase should be 1/framerate and timestamp increments should be
identically 1.
This often, but not always is the inverse of the frame rate or field rate
for video.
- encoding: MUST be set by user.
- decoding: the use of this field for decoding is deprecated.
            Use framerate instead.

</member>
        <member name="F:ffmpeg.AVCodecContext.extradata">
some codecs need / can use extradata like Huffman tables.
mjpeg: Huffman tables
rv10: additional flags
mpeg4: global headers (they can be in the bitstream or here)
The allocated memory should be AV_INPUT_BUFFER_PADDING_SIZE bytes larger
than extradata_size to avoid problems if it is read with the bitstream reader.
The bytewise contents of extradata must not depend on the architecture or CPU endianness.
- encoding: Set/allocated/freed by libavcodec.
- decoding: Set/allocated/freed by user.

</member>
        <member name="F:ffmpeg.AVCodecContext.flags2">
AV_CODEC_FLAG2_*
- encoding: Set by user.
- decoding: Set by user.

</member>
        <member name="F:ffmpeg.AVCodecContext.flags">
AV_CODEC_FLAG_*.
- encoding: Set by user.
- decoding: Set by user.

</member>
        <member name="F:ffmpeg.AVCodecContext.compression_level">
- encoding: Set by user.
- decoding: unused

</member>
        <member name="F:ffmpeg.AVCodecContext.global_quality">
Global quality for codecs which cannot change it per frame.
This should be proportional to MPEG-1/2/4 qscale.
- encoding: Set by user.
- decoding: unused

</member>
        <member name="F:ffmpeg.AVCodecContext.bit_rate_tolerance">
number of bits the bitstream is allowed to diverge from the reference.
          the reference can be CBR (for CBR pass1) or VBR (for pass2)
- encoding: Set by user; unused for constant quantizer encoding.
- decoding: unused

</member>
        <member name="F:ffmpeg.AVCodecContext.bit_rate">
the average bitrate
- encoding: Set by user; unused for constant quantizer encoding.
- decoding: Set by user, may be overwritten by libavcodec
            if this info is available in the stream

</member>
        <member name="F:ffmpeg.AVCodecContext.opaque">
Private data of the user, can be used to carry app specific stuff.
- encoding: Set by user.
- decoding: Set by user.

</member>
        <member name="F:ffmpeg.AVCodecContext.stream_codec_tag">
@deprecated this field is unused

</member>
        <member name="F:ffmpeg.AVCodecContext.codec_name">
@deprecated this field is not used for anything in libavcodec

</member>
        <member name="F:ffmpeg.AVCodecContext.av_class">
information on struct for av_log
- set by avcodec_alloc_context3

</member>
        <member name="T:ffmpeg.AVCodecContext">
main external API structure.
New fields can be added to the end with minor version bumps.
Removal, reordering and changes to existing fields require a major
version bump.
Please use AVOptions (av_opt* / av_set/get*()) to access these fields from user
applications.
sizeof(AVCodecContext) must not be used outside libav*.

</member>
        <member name="T:ffmpeg.AVCodecInternal">
@}


 Private context used for internal data.

 Unlike priv_data, this is not codec-specific. It is used in general
 libavcodec functions.

</member>
        <member name="F:ffmpeg.AVPacket.convergence_duration">
@deprecated Same as the duration field, but as int64_t. This was required
for Matroska subtitles, whose duration values could overflow when the
duration field was still an int.

</member>
        <member name="F:ffmpeg.AVPacket.duration">
Duration of this packet in AVStream-&gt;time_base units, 0 if unknown.
Equals next_pts - this_pts in presentation order.

</member>
        <member name="F:ffmpeg.AVPacket.side_data">
Additional packet data that can be provided by the container.
Packet can contain several types of side information.

</member>
        <member name="F:ffmpeg.AVPacket.flags">
A combination of AV_PKT_FLAG values

</member>
        <member name="F:ffmpeg.AVPacket.dts">
Decompression timestamp in AVStream-&gt;time_base units; the time at which
the packet is decompressed.
Can be AV_NOPTS_VALUE if it is not stored in the file.

</member>
        <member name="F:ffmpeg.AVPacket.pts">
Presentation timestamp in AVStream-&gt;time_base units; the time at which
the decompressed packet will be presented to the user.
Can be AV_NOPTS_VALUE if it is not stored in the file.
pts MUST be larger or equal to dts as presentation cannot happen before
decompression, unless one wants to view hex dumps. Some formats misuse
the terms dts and pts/cts to mean something different. Such timestamps
must be converted to true pts/dts before they are stored in AVPacket.

</member>
        <member name="F:ffmpeg.AVPacket.buf">
A reference to the reference-counted buffer where the packet data is
stored.
May be NULL, then the packet data is not reference-counted.

</member>
        <member name="T:ffmpeg.AVPacket">
 This structure stores compressed data. It is typically exported by demuxers
 and then passed as input to decoders, or received as output from encoders and
 then passed to muxers.

 For video, it should typically contain one compressed frame. For audio it may
 contain several compressed frames. Encoders are allowed to output empty
 packets, with no compressed data, containing only side data
 (e.g. to update some stream parameters at the end of encoding).

 AVPacket is one of the few structs in FFmpeg, whose size is a part of public
 ABI. Thus it may be allocated on stack and no new fields can be added to it
 without libavcodec and libavformat major bump.

 The semantics of data ownership depends on the buf field.
 If it is set, the packet data is dynamically allocated and is
 valid indefinitely until a call to av_packet_unref() reduces the
 reference count to 0.

 If the buf field is not set av_packet_ref() would make a copy instead
 of increasing the reference count.

 The side data is always allocated with av_malloc(), copied by
 av_packet_ref() and freed by av_packet_unref().

 @see av_packet_ref
 @see av_packet_unref

</member>
        <member name="T:ffmpeg.AVPacketSideDataType">
The decoder will keep a reference to the frame and may reuse it later.

 @defgroup lavc_packet AVPacket

 Types and functions for working with AVPacket.
 @{

</member>
        <member name="F:AV_PKT_DATA_MPEGTS_STREAM_ID">
MPEGTS stream ID, this is required to pass the stream ID
information from the demuxer to the corresponding muxer.

</member>
        <member name="F:AV_PKT_DATA_METADATA_UPDATE">
A list of zero terminated key/value strings. There is no end marker for
the list, so it is required to rely on the side data size to stop. This
side data includes updated metadata which appeared in the stream.

</member>
        <member name="F:AV_PKT_DATA_WEBVTT_SETTINGS">
The optional settings (rendering instructions) that immediately
follow the timestamp specifier of a WebVTT cue.

</member>
        <member name="F:AV_PKT_DATA_WEBVTT_IDENTIFIER">
The optional first identifier line of a WebVTT cue.

</member>
        <member name="F:AV_PKT_DATA_MATROSKA_BLOCKADDITIONAL">
Data found in BlockAdditional element of matroska container. There is
no end marker for the data, so it is required to rely on the side data
size to recognize the end. 8 byte id (as found in BlockAddId) followed
by data.

</member>
        <member name="F:AV_PKT_DATA_SUBTITLE_POSITION">
Subtitle event position
@code
u32le x1
u32le y1
u32le x2
u32le y2
@endcode

</member>
        <member name="F:AV_PKT_DATA_STRINGS_METADATA">
A list of zero terminated key/value strings. There is no end marker for
the list, so it is required to rely on the side data size to stop.

</member>
        <member name="F:AV_PKT_DATA_JP_DUALMONO">
An AV_PKT_DATA_JP_DUALMONO side data packet indicates that
the packet may contain "dual mono" audio specific to Japanese DTV
and if it is true, recommends only the selected channel to be used.
@code
u8    selected channels (0=mail/left, 1=sub/right, 2=both)
@endcode

</member>
        <member name="F:AV_PKT_DATA_SKIP_SAMPLES">
Recommmends skipping the specified number of samples
@code
u32le number of samples to skip from start of this packet
u32le number of samples to skip from end of this packet
u8    reason for start skip
u8    reason for end   skip (0=padding silence, 1=convergence)
@endcode

</member>
        <member name="F:AV_PKT_DATA_CPB_PROPERTIES">
This side data corresponds to the AVCPBProperties struct.

</member>
        <member name="F:AV_PKT_DATA_FALLBACK_TRACK">
This side data contains an integer value representing the stream index
of a "fallback" track.  A fallback track indicates an alternate
track to use when the current track can not be decoded for some reason.
e.g. no decoder available for codec.

</member>
        <member name="F:AV_PKT_DATA_QUALITY_STATS">
This side data contains quality related information from the encoder.
@code
u32le quality factor of the compressed frame. Allowed range is between 1 (good) and FF_LAMBDA_MAX (bad).
u8    picture type
u8    error count
u16   reserved
u64le[error count] sum of squared differences between encoder in and output
@endcode

</member>
        <member name="F:AV_PKT_DATA_AUDIO_SERVICE_TYPE">
This side data should be associated with an audio stream and corresponds
to enum AVAudioServiceType.

</member>
        <member name="F:AV_PKT_DATA_STEREO3D">
This side data should be associated with a video stream and contains
Stereoscopic 3D information in form of the AVStereo3D struct.

</member>
        <member name="F:AV_PKT_DATA_DISPLAYMATRIX">
 This side data contains a 3x3 transformation matrix describing an affine
 transformation that needs to be applied to the decoded video frames for
 correct presentation.

 See libavutil/display.h for a detailed description of the data.

</member>
        <member name="F:AV_PKT_DATA_REPLAYGAIN">
This side data should be associated with an audio stream and contains
ReplayGain information in form of the AVReplayGain struct.

</member>
        <member name="F:AV_PKT_DATA_H263_MB_INFO">
An AV_PKT_DATA_H263_MB_INFO side data packet contains a number of
structures with info about macroblocks relevant to splitting the
packet into smaller packets on macroblock edges (e.g. as for RFC 2190).
That is, it does not necessarily contain info about all macroblocks,
as long as the distance between macroblocks in the info is smaller
than the target payload size.
Each MB info structure is 12 bytes, and is laid out as follows:
@code
u32le bit offset from the start of the packet
u8    current quantizer at the start of the macroblock
u8    GOB number
u16le macroblock address within the GOB
u8    horizontal MV predictor
u8    vertical MV predictor
u8    horizontal MV predictor for block number 3
u8    vertical MV predictor for block number 3
@endcode

</member>
        <member name="F:ffmpeg.AVCPBProperties.vbv_delay">
 The delay between the time the packet this structure is associated with
 is received and the time when it should be decoded, in periods of a 27MHz
 clock.

 UINT64_MAX when unknown or unspecified.

</member>
        <member name="F:ffmpeg.AVCPBProperties.buffer_size">
The size of the buffer to which the ratecontrol is applied, in bits.
Zero if unknown or unspecified.

</member>
        <member name="F:ffmpeg.AVCPBProperties.avg_bitrate">
Average bitrate of the stream, in bits per second.
Zero if unknown or unspecified.

</member>
        <member name="F:ffmpeg.AVCPBProperties.min_bitrate">
Minimum bitrate of the stream, in bits per second.
Zero if unknown or unspecified.

</member>
        <member name="F:ffmpeg.AVCPBProperties.max_bitrate">
Maximum bitrate of the stream, in bits per second.
Zero if unknown or unspecified.

</member>
        <member name="T:ffmpeg.AVCPBProperties">
This structure describes the bitrate properties of an encoded bitstream. It
roughly corresponds to a subset the VBV parameters for MPEG-2 or HRD
parameters for H.264/HEVC.

</member>
        <member name="F:ffmpeg.AVPanScan.position">
position of the top left corner in 1/16 pel for up to 3 fields/frames
- encoding: Set by user.
- decoding: Set by libavcodec.

</member>
        <member name="F:ffmpeg.AVPanScan.width">
width and height in 1/16 pel
- encoding: Set by user.
- decoding: Set by libavcodec.

</member>
        <member name="F:ffmpeg.AVPanScan.id">
id
- encoding: Set by user.
- decoding: Set by libavcodec.

</member>
        <member name="T:ffmpeg.AVPanScan">
@deprecated there is no libavcodec-wide limit on the number of B-frames

Allow decoders to produce frames with data planes that are not aligned
to CPU requirements (e.g. due to cropping).

Use fixed qscale.

4 MV per MB allowed / advanced prediction for H.263.

Output even those frames that might be corrupted.

Use qpel MC.

Use internal 2pass ratecontrol in first pass mode.

Use internal 2pass ratecontrol in second pass mode.

loop filter.

Only decode/encode grayscale.

error[?] variables will be set during encoding.

Input bitstream might be truncated at a random location
instead of only at frame boundaries.

Use interlaced DCT.

Force low delay.

Place global headers in extradata instead of every keyframe.

Use only bitexact stuff (except (I)DCT).

H.263 advanced intra coding / MPEG-4 AC prediction

interlaced motion estimation

Allow non spec compliant speedup tricks.

Skip bitstream encoding.

Place global headers at every keyframe instead of in extradata.

timecode is in drop frame format. DEPRECATED!!!!

Input bitstream might be truncated at a packet boundaries
instead of only at frame boundaries.

Discard cropping information from SPS.

Show all frames before the first keyframe

Export motion vectors through frame side data

Do not skip samples and export skip information as frame side data

Decoder can use draw_horiz_band callback.

Codec uses get_buffer() for allocating buffers and supports custom allocators.
If not set, it might not use get_buffer() at all or use operations that
assume the buffer was allocated by avcodec_default_get_buffer.

 Encoder or decoder requires flushing with NULL input at the end in order to
 give the complete and correct output.

 NOTE: If this flag is not set, the codec is guaranteed to never be fed with
       with NULL data. The user can still send NULL data to the public encode
       or decode function, but libavcodec will not pass it along to the codec
       unless this flag is set.

 Decoders:
 The decoder has a non-zero delay and needs to be fed with avpkt-&gt;data=NULL,
 avpkt-&gt;size=0 at the end to get the delayed data until the decoder no longer
 returns frames.

 Encoders:
 The encoder needs to be fed with NULL data at the end of encoding until the
 encoder no longer returns data.

 NOTE: For encoders implementing the AVCodec.encode2() function, setting this
       flag also means that the encoder must set the pts and duration for
       each output packet. If this flag is not set, the pts and duration will
       be determined by libavcodec from the input frame.

Codec can be fed a final frame with a smaller size.
This can be used to prevent truncation of the last audio samples.

Codec can export data for HW decoding (VDPAU).

Codec can output multiple frames per AVPacket
Normally demuxers return one frame at a time, demuxers which do not do
are connected to a parser to split what they return into proper frames.
This flag is reserved to the very rare category of codecs which have a
bitstream that cannot be split into frames without timeconsuming
operations like full decoding. Demuxers carring such bitstreams thus
may return multiple frames in a packet. This has many disadvantages like
prohibiting stream copy in many cases thus it should only be considered
as a last resort.

Codec is experimental and is thus avoided in favor of non experimental
encoders

Codec should fill in channel configuration and samplerate instead of container

Codec supports frame-level multithreading.

Codec supports slice-based (or partition-based) multithreading.

Codec supports changed parameters at any point.

Codec supports avctx-&gt;thread_count == 0 (auto).

Audio encoder supports receiving a different number of samples in each call.

Codec is intra only.

Codec is lossless.

Allow decoders to produce frames with data planes that are not aligned
to CPU requirements (e.g. due to cropping).

@deprecated use the "gmc" private option of the libxvid encoder

@deprecated use the flag "mv0" in the "mpv_flags" private option of the
mpegvideo encoders

@deprecated passing reference-counted frames to the encoders replaces this
flag

@deprecated edges are not used/required anymore. I.e. this flag is now always
set.

@deprecated use the flag "naq" in the "mpv_flags" private option of the
mpegvideo encoders

Codec uses get_buffer() for allocating buffers and supports custom allocators.
If not set, it might not use get_buffer() at all or use operations that
assume the buffer was allocated by avcodec_default_get_buffer.

 Encoder or decoder requires flushing with NULL input at the end in order to
 give the complete and correct output.

 NOTE: If this flag is not set, the codec is guaranteed to never be fed with
       with NULL data. The user can still send NULL data to the public encode
       or decode function, but libavcodec will not pass it along to the codec
       unless this flag is set.

 Decoders:
 The decoder has a non-zero delay and needs to be fed with avpkt-&gt;data=NULL,
 avpkt-&gt;size=0 at the end to get the delayed data until the decoder no longer
 returns frames.

 Encoders:
 The encoder needs to be fed with NULL data at the end of encoding until the
 encoder no longer returns data.

 NOTE: For encoders implementing the AVCodec.encode2() function, setting this
       flag also means that the encoder must set the pts and duration for
       each output packet. If this flag is not set, the pts and duration will
       be determined by libavcodec from the input frame.

Codec can be fed a final frame with a smaller size.
This can be used to prevent truncation of the last audio samples.

Codec can export data for HW decoding (VDPAU).

Codec can output multiple frames per AVPacket
Normally demuxers return one frame at a time, demuxers which do not do
are connected to a parser to split what they return into proper frames.
This flag is reserved to the very rare category of codecs which have a
bitstream that cannot be split into frames without timeconsuming
operations like full decoding. Demuxers carring such bitstreams thus
may return multiple frames in a packet. This has many disadvantages like
prohibiting stream copy in many cases thus it should only be considered
as a last resort.

Codec is experimental and is thus avoided in favor of non experimental
encoders

Codec should fill in channel configuration and samplerate instead of container

@deprecated no codecs use this capability

Codec supports frame-level multithreading.

Codec supports slice-based (or partition-based) multithreading.

Codec supports changed parameters at any point.

Codec supports avctx-&gt;thread_count == 0 (auto).

Audio encoder supports receiving a different number of samples in each call.

Codec is intra only.

Codec is lossless.

HWAccel is experimental and is thus avoided in favor of non experimental
codecs

Pan Scan area.
This specifies the area which should be displayed.
Note there may be multiple such areas for one frame.

</member>
        <member name="T:ffmpeg.RcOverride">
@ingroup lavc_encoding

</member>
        <member name="T:ffmpeg.AVDiscard">
@ingroup lavc_decoding


Skip loop filtering for selected frames.
- encoding: unused
- decoding: Set by user.


Skip IDCT/dequantization for selected frames.
- encoding: unused
- decoding: Set by user.


Skip decoding for selected frames.
- encoding: unused
- decoding: Set by user.

</member>
        <member name="T:ffmpeg.AVProfile">
If non-NULL, an array of profiles recognized for this codec.
Terminated with FF_PROFILE_UNKNOWN.


AVProfile.

</member>
        <member name="F:ffmpeg.AVCodecDescriptor.mime_types">
MIME type(s) associated with the codec.
May be NULL; if not, a NULL-terminated array of MIME types.
The first item is always non-NULL and is the preferred MIME type.

</member>
        <member name="F:ffmpeg.AVCodecDescriptor.props">
Codec properties, a combination of AV_CODEC_PROP_* flags.

</member>
        <member name="F:ffmpeg.AVCodecDescriptor.long_name">
A more descriptive name for this codec. May be NULL.

</member>
        <member name="F:ffmpeg.AVCodecDescriptor.name">
Name of the codec described by this descriptor. It is non-empty and
unique for each codec descriptor. It should contain alphanumeric
characters and '_' only.

</member>
        <member name="T:ffmpeg.AVCodecDescriptor">
This struct describes the properties of a single codec described by an
AVCodecID.
@see avcodec_descriptor_get()

</member>
        <member name="T:ffmpeg.AVCodecID">
@}

@file
@ingroup libavc
Libavcodec version macros.

 FF_API_* defines may be placed below to indicate public API that will be
 dropped at a future version bump. The defines themselves are not part of
 the public API and may change, break or disappear at any time.

 @note, when bumping the major version it is recommended to manually
 disable each FF_API_* in its own commit instead of disabling them all
 at once through the bump. This improves the git bisect-ability of the change.

 @defgroup libavc Encoding/Decoding Library
 @{

 @defgroup lavc_decoding Decoding
 @{
 @}

 @defgroup lavc_encoding Encoding
 @{
 @}

 @defgroup lavc_codec Codecs
 @{
 @defgroup lavc_codec_native Native Codecs
 @{
 @}
 @defgroup lavc_codec_wrappers External library wrappers
 @{
 @}
 @defgroup lavc_codec_hwaccel Hardware Accelerators bridge
 @{
 @}
 @}
 @defgroup lavc_internal Internal
 @{
 @}
 @}


 @defgroup lavc_core Core functions/structures.
 @ingroup libavc

 Basic definitions, functions for querying libavcodec capabilities,
 allocating core structures, etc.
 @{

 Identify the syntax and semantics of the bitstream.
 The principle is roughly:
 Two decoders with the same ID can decode the same streams.
 Two encoders with the same ID can encode compatible streams.
 There may be slight deviations from the principle due to implementation
 details.

 If you add a codec ID to this list, add it so that
 1. no value of a existing codec ID changes (that would break ABI),
 2. it is as close as possible to similar codecs

 After adding new codec IDs, do not forget to add an entry to the codec
 descriptor list and bump libavcodec minor version.


 Codec implemented by the hardware accelerator.

 See AV_CODEC_ID_xxx


Return the PCM codec associated with a sample format.
@param be  endianness, 0 for little, 1 for big,
           -1 (or anything else) for native
@return  AV_CODEC_ID_PCM_* or AV_CODEC_ID_NONE

</member>
        <member name="M:ffmpeg.av_frame_side_data_name(ffmpeg.AVFrameSideDataType)">
@return a string identifying the side data type

</member>
        <member name="M:ffmpeg.av_frame_remove_side_data(ffmpeg.AVFrame*,ffmpeg.AVFrameSideDataType)">
If side data of the supplied type exists in the frame, free it and remove it
from the frame.

</member>
        <member name="M:ffmpeg.av_frame_get_side_data(ffmpeg.AVFrame!System.Runtime.CompilerServices.IsConst*,ffmpeg.AVFrameSideDataType)">
@return a pointer to the side data of a given type on success, NULL if there
is no side data with such type in this frame.

</member>
        <member name="M:ffmpeg.av_frame_new_side_data(ffmpeg.AVFrame*,ffmpeg.AVFrameSideDataType,System.Int32)">
 Add a new side data to a frame.

 @param frame a frame to which the side data should be added
 @param type type of the added side data
 @param size size of the side data

 @return newly added side data on success, NULL on error

</member>
        <member name="M:ffmpeg.av_frame_get_plane_buffer(ffmpeg.AVFrame*,System.Int32)">
 Get the buffer reference a given data plane is stored in.

 @param plane index of the data plane of interest in frame-&gt;extended_data.

 @return the buffer reference that contains the plane or NULL if the input
 frame is not valid.

</member>
        <member name="M:ffmpeg.av_frame_copy_props(ffmpeg.AVFrame*,ffmpeg.AVFrame!System.Runtime.CompilerServices.IsConst*)">
 Copy only "metadata" fields from src to dst.

 Metadata for the purpose of this function are those fields that do not affect
 the data layout in the buffers.  E.g. pts, sample rate (for audio) or sample
 aspect ratio (for video), but not width/height or channel layout.
 Side data is also copied.

</member>
        <member name="M:ffmpeg.av_frame_copy(ffmpeg.AVFrame*,ffmpeg.AVFrame!System.Runtime.CompilerServices.IsConst*)">
 Copy the frame data from src to dst.

 This function does not allocate anything, dst must be already initialized and
 allocated with the same parameters as src.

 This function only copies the frame data (i.e. the contents of the data /
 extended data arrays), not any other properties.

 @return &gt;= 0 on success, a negative AVERROR on error.

</member>
        <member name="M:ffmpeg.av_frame_make_writable(ffmpeg.AVFrame*)">
 Ensure that the frame data is writable, avoiding data copy if possible.

 Do nothing if the frame is writable, allocate new buffers and copy the data
 if it is not.

 @return 0 on success, a negative AVERROR on error.

 @see av_frame_is_writable(), av_buffer_is_writable(),
 av_buffer_make_writable()

</member>
        <member name="M:ffmpeg.av_frame_is_writable(ffmpeg.AVFrame*)">
 Check if the frame data is writable.

 @return A positive value if the frame data is writable (which is true if and
 only if each of the underlying buffers has only one reference, namely the one
 stored in this frame). Return 0 otherwise.

 If 1 is returned the answer is valid until av_buffer_ref() is called on any
 of the underlying AVBufferRefs (e.g. through av_frame_ref() or directly).

 @see av_frame_make_writable(), av_buffer_is_writable()

</member>
        <member name="M:ffmpeg.av_frame_get_buffer(ffmpeg.AVFrame*,System.Int32)">
 Allocate new buffer(s) for audio or video data.

 The following fields must be set on frame before calling this function:
 - format (pixel format for video, sample format for audio)
 - width and height for video
 - nb_samples and channel_layout for audio

 This function will fill AVFrame.data and AVFrame.buf arrays and, if
 necessary, allocate and fill AVFrame.extended_data and AVFrame.extended_buf.
 For planar formats, one buffer will be allocated for each plane.

 @param frame frame in which to store the new buffers.
 @param align required buffer size alignment

 @return 0 on success, a negative AVERROR on error.

</member>
        <member name="M:ffmpeg.av_frame_move_ref(ffmpeg.AVFrame*,ffmpeg.AVFrame*)">
Move everything contained in src to dst and reset src.

</member>
        <member name="M:ffmpeg.av_frame_unref(ffmpeg.AVFrame*)">
Unreference all the buffers referenced by frame and reset the frame fields.

</member>
        <member name="M:ffmpeg.av_frame_clone(ffmpeg.AVFrame!System.Runtime.CompilerServices.IsConst*)">
 Create a new frame that references the same data as src.

 This is a shortcut for av_frame_alloc()+av_frame_ref().

 @return newly created AVFrame on success, NULL on error.

</member>
        <member name="M:ffmpeg.av_frame_ref(ffmpeg.AVFrame*,ffmpeg.AVFrame!System.Runtime.CompilerServices.IsConst*)">
 Set up a new reference to the data described by the source frame.

 Copy frame properties from src to dst and create a new reference for each
 AVBufferRef from src.

 If src is not reference counted, new buffers are allocated and the data is
 copied.

 @return 0 on success, a negative AVERROR on error

</member>
        <member name="M:ffmpeg.av_frame_free(ffmpeg.AVFrame**)">
 Free the frame and any dynamically allocated objects in it,
 e.g. extended_data. If the frame is reference counted, it will be
 unreferenced first.

 @param frame frame to be freed. The pointer will be set to NULL.

</member>
        <member name="M:ffmpeg.av_frame_alloc">
 Allocate an AVFrame and set its fields to default values.  The resulting
 struct must be freed using av_frame_free().

 @return An AVFrame filled with default values or NULL on failure.

 @note this only allocates the AVFrame itself, not the data buffers. Those
 must be allocated through other means, e.g. with av_frame_get_buffer() or
 manually.

</member>
        <member name="M:ffmpeg.av_get_colorspace_name(ffmpeg.AVColorSpace)">
Get the name of a colorspace.
@return a static string identifying the colorspace; can be NULL.

</member>
        <member name="M:ffmpeg.av_frame_get_best_effort_timestamp(ffmpeg.AVFrame!System.Runtime.CompilerServices.IsConst*)">
Accessors for some AVFrame fields.
The position of these field in the structure is not part of the ABI,
they should not be accessed directly outside libavutil.

</member>
        <member name="F:ffmpeg.AVFrame.qp_table_buf">
Not to be accessed directly from outside libavutil

</member>
        <member name="F:ffmpeg.AVFrame.qstride">
QP store stride
Not to be accessed directly from outside libavutil

</member>
        <member name="F:ffmpeg.AVFrame.qscale_table">
QP table
Not to be accessed directly from outside libavutil

</member>
        <member name="F:ffmpeg.AVFrame.pkt_size">
size of the corresponding packet containing the compressed
frame. It must be accessed using av_frame_get_pkt_size() and
av_frame_set_pkt_size().
It is set to a negative value if unknown.
- encoding: unused
- decoding: set by libavcodec, read by user.

</member>
        <member name="F:ffmpeg.AVFrame.channels">
number of audio channels, only used for audio.
Code outside libavutil should access this field using:
av_frame_get_channels(frame)
- encoding: unused
- decoding: Read by user.

</member>
        <member name="F:ffmpeg.AVFrame.decode_error_flags">
decode error flags of the frame, set to a combination of
FF_DECODE_ERROR_xxx flags if the decoder produced a frame, but there
were errors during the decoding.
Code outside libavutil should access this field using:
av_frame_get_decode_error_flags(frame)
- encoding: unused
- decoding: set by libavcodec, read by user.

</member>
        <member name="F:ffmpeg.AVFrame.metadata">
metadata.
Code outside libavutil should access this field using:
av_frame_get_metadata(frame)
- encoding: Set by user.
- decoding: Set by libavcodec.

</member>
        <member name="F:ffmpeg.AVFrame.pkt_duration">
duration of the corresponding packet, expressed in
AVStream-&gt;time_base units, 0 if unknown.
Code outside libavutil should access this field using:
av_frame_get_pkt_duration(frame)
- encoding: unused
- decoding: Read by user.

</member>
        <member name="F:ffmpeg.AVFrame.pkt_pos">
reordered pos from the last AVPacket that has been input into the decoder
Code outside libavutil should access this field using:
av_frame_get_pkt_pos(frame)
- encoding: unused
- decoding: Read by user.

</member>
        <member name="F:ffmpeg.AVFrame.best_effort_timestamp">
frame timestamp estimated using various heuristics, in stream time base
Code outside libavutil should access this field using:
av_frame_get_best_effort_timestamp(frame)
- encoding: unused
- decoding: set by libavcodec, read by user.

</member>
        <member name="F:ffmpeg.AVFrame.hw_frames_ctx">
For hwaccel-format frames, this should be a reference to the
AVHWFramesContext describing the frame.

</member>
        <member name="F:ffmpeg.AVFrame.flags">
 @defgroup lavu_frame_flags AV_FRAME_FLAGS
 Flags describing additional frame properties.

 @{

The frame data may be corrupted, e.g. due to decoding errors.

@}

Frame flags, a combination of @ref lavu_frame_flags

</member>
        <member name="F:ffmpeg.AVFrame.nb_extended_buf">
Number of elements in extended_buf.

</member>
        <member name="F:ffmpeg.AVFrame.extended_buf">
 For planar audio which requires more than AV_NUM_DATA_POINTERS
 AVBufferRef pointers, this array will hold all the references which
 cannot fit into AVFrame.buf.

 Note that this is different from AVFrame.extended_data, which always
 contains all the pointers. This array only contains the extra pointers,
 which cannot fit into AVFrame.buf.

 This array is always allocated using av_malloc() by whoever constructs
 the frame. It is freed in av_frame_unref().

</member>
        <member name="F:ffmpeg.AVFrame.channel_layout">
Channel layout of the audio data.

</member>
        <member name="F:ffmpeg.AVFrame.sample_rate">
Sample rate of the audio data.

</member>
        <member name="F:ffmpeg.AVFrame.reordered_opaque">
reordered opaque 64bit (generally an integer or a double precision float
PTS but can be anything).
The user sets AVCodecContext.reordered_opaque to represent the input at
that time,
the decoder reorders values as needed and sets AVFrame.reordered_opaque
to exactly one of the values provided by the user through AVCodecContext.reordered_opaque
@deprecated in favor of pkt_pts

</member>
        <member name="F:ffmpeg.AVFrame.palette_has_changed">
Tell user application that palette has changed from previous frame.

</member>
        <member name="F:ffmpeg.AVFrame.top_field_first">
If the content is interlaced, is top field displayed first.

</member>
        <member name="F:ffmpeg.AVFrame.interlaced_frame">
The content of the picture is interlaced.

</member>
        <member name="F:ffmpeg.AVFrame.repeat_pict">
When decoding, this signals how much the picture must be delayed.
extra_delay = repeat_pict / (2*fps)

</member>
        <member name="F:ffmpeg.AVFrame.error">
@deprecated unused

</member>
        <member name="F:ffmpeg.AVFrame.opaque">
for some private data of the user

</member>
        <member name="F:ffmpeg.AVFrame.quality">
quality (between 1 (good) and FF_LAMBDA_MAX (bad))

</member>
        <member name="F:ffmpeg.AVFrame.display_picture_number">
picture number in display order

</member>
        <member name="F:ffmpeg.AVFrame.coded_picture_number">
picture number in bitstream order

</member>
        <member name="F:ffmpeg.AVFrame.pkt_dts">
DTS copied from the AVPacket that triggered returning this frame. (if frame threading isn't used)
This is also the Presentation time of this AVFrame calculated from
only AVPacket.dts values without pts values.

</member>
        <member name="F:ffmpeg.AVFrame.pkt_pts">
PTS copied from the AVPacket that was decoded to produce this frame.

</member>
        <member name="F:ffmpeg.AVFrame.pts">
Presentation timestamp in time_base units (time when frame should be shown to user).

</member>
        <member name="F:ffmpeg.AVFrame.sample_aspect_ratio">
Sample aspect ratio for the video frame, 0/1 if unknown/unspecified.

</member>
        <member name="F:ffmpeg.AVFrame.key_frame">
1 -&gt; keyframe, 0-&gt; not

</member>
        <member name="F:ffmpeg.AVFrame.format">
format of the frame, -1 if unknown or unset
Values correspond to enum AVPixelFormat for video frames,
enum AVSampleFormat for audio)

</member>
        <member name="F:ffmpeg.AVFrame.nb_samples">
number of audio samples (per channel) described by this frame

</member>
        <member name="F:ffmpeg.AVFrame.width">
width and height of the video frame

</member>
        <member name="F:ffmpeg.AVFrame.extended_data">
 pointers to the data planes/channels.

 For video, this should simply point to data[].

 For planar audio, each channel has a separate data pointer, and
 linesize[0] contains the size of each channel buffer.
 For packed audio, there is just one data pointer, and linesize[0]
 contains the total size of the buffer for all channels.

 Note: Both data and extended_data should always be set in a valid frame,
 but for planar audio with more channels that can fit in data,
 extended_data must be used in order to access all channels.

</member>
        <member name="F:ffmpeg.AVFrame.linesize">
 For video, size in bytes of each picture line.
 For audio, size in bytes of each plane.

 For audio, only linesize[0] may be set. For planar audio, each channel
 plane must be the same size.

 For video the linesizes should be multiples of the CPUs alignment
 preference, this is 16 or 32 for modern desktop CPUs.
 Some code requires such alignment other code can be slower without
 correct alignment, for yet other it makes no difference.

 @note The linesize may be larger than the size of usable data -- there
 may be extra padding present for performance reasons.

</member>
        <member name="F:ffmpeg.AVFrame.data">
 pointer to the picture/channel planes.
 This might be different from the first allocated byte

 Some decoders access areas outside 0,0 - width,height, please
 see avcodec_align_dimensions2(). Some filters and swscale can read
 up to 16 bytes beyond the planes, if these filters are to be used,
 then 16 extra bytes must be allocated.

</member>
        <member name="T:ffmpeg.AVFrame">
 This structure describes decoded (raw) audio or video data.

 AVFrame must be allocated using av_frame_alloc(). Note that this only
 allocates the AVFrame itself, the buffers for the data must be managed
 through other means (see below).
 AVFrame must be freed with av_frame_free().

 AVFrame is typically allocated once and then reused multiple times to hold
 different data (e.g. a single AVFrame to hold frames received from a
 decoder). In such a case, av_frame_unref() will free any references held by
 the frame and reset it to its original clean state before it
 is reused again.

 The data described by an AVFrame is usually reference counted through the
 AVBuffer API. The underlying buffer references are stored in AVFrame.buf /
 AVFrame.extended_buf. An AVFrame is considered to be reference counted if at
 least one reference is set, i.e. if AVFrame.buf[0] != NULL. In such a case,
 every single data plane must be contained in one of the buffers in
 AVFrame.buf or AVFrame.extended_buf.
 There may be a single buffer for all the data, or one separate buffer for
 each plane, or anything in between.

 sizeof(AVFrame) is not a part of the public ABI, so new fields may be added
 to the end with a minor bump.
 Similarly fields that are marked as to be only accessed by
 av_opt_ptr() can be reordered. This allows 2 forks to add fields
 without breaking compatibility with each other.

</member>
        <member name="T:ffmpeg.AVFrameSideData">
 Structure to hold side data for an AVFrame.

 sizeof(AVFrameSideData) is not a part of the public ABI, so new fields may be added
 to the end with a minor bump.

</member>
        <member name="T:ffmpeg.AVFrameSideDataType">
@}

@file
@ingroup lavu_frame
reference-counted frame API

 @defgroup lavu_frame AVFrame
 @ingroup lavu_data

 @{
 AVFrame is an abstraction for reference-counted raw multimedia data.

</member>
        <member name="F:AV_FRAME_DATA_GOP_TIMECODE">
The GOP timecode in 25 bit timecode format. Data format is 64-bit integer.
This is set on the first frame of a GOP that has a temporal reference of 0.

</member>
        <member name="F:AV_FRAME_DATA_MASTERING_DISPLAY_METADATA">
Mastering display metadata associated with a video frame. The payload is
an AVMasteringDisplayMetadata type and contains information about the
mastering display color volume.

</member>
        <member name="F:AV_FRAME_DATA_AUDIO_SERVICE_TYPE">
This side data must be associated with an audio frame and corresponds to
enum AVAudioServiceType defined in avcodec.h.

</member>
        <member name="F:AV_FRAME_DATA_SKIP_SAMPLES">
Recommmends skipping the specified number of samples. This is exported
only if the "skip_manual" AVOption is set in libavcodec.
This has the same format as AV_PKT_DATA_SKIP_SAMPLES.
@code
u32le number of samples to skip from start of this packet
u32le number of samples to skip from end of this packet
u8    reason for start skip
u8    reason for end   skip (0=padding silence, 1=convergence)
@endcode

</member>
        <member name="F:AV_FRAME_DATA_MOTION_VECTORS">
Motion vectors exported by some codecs (on demand through the export_mvs
flag set in the libavcodec AVCodecContext flags2 option).
The data is the AVMotionVector struct defined in
libavutil/motion_vector.h.

</member>
        <member name="F:AV_FRAME_DATA_AFD">
Active Format Description data consisting of a single byte as specified
in ETSI TS 101 154 using AVActiveFormatDescription enum.

</member>
        <member name="F:AV_FRAME_DATA_DISPLAYMATRIX">
 This side data contains a 3x3 transformation matrix describing an affine
 transformation that needs to be applied to the frame for correct
 presentation.

 See libavutil/display.h for a detailed description of the data.

</member>
        <member name="F:AV_FRAME_DATA_REPLAYGAIN">
ReplayGain information in the form of the AVReplayGain struct.

</member>
        <member name="F:AV_FRAME_DATA_DOWNMIX_INFO">
Metadata relevant to a downmix procedure.
The data is the AVDownmixInfo struct defined in libavutil/downmix_info.h.

</member>
        <member name="F:AV_FRAME_DATA_MATRIXENCODING">
The data is the AVMatrixEncoding enum defined in libavutil/channel_layout.h.

</member>
        <member name="F:AV_FRAME_DATA_STEREO3D">
Stereoscopic 3d metadata.
The data is the AVStereo3D struct defined in libavutil/stereo3d.h.

</member>
        <member name="F:AV_FRAME_DATA_A53_CC">
ATSC A53 Part 4 Closed Captions.
A53 CC bitstream is stored as uint8_t in AVFrameSideData.data.
The number of bytes of CC data is AVFrameSideData.size.

</member>
        <member name="F:AV_FRAME_DATA_PANSCAN">
The data is the AVPanScan struct defined in libavcodec.

</member>
        <member name="M:ffmpeg.av_dict_get_string(ffmpeg.AVDictionary!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst)">
 Get dictionary entries as a string.

 Create a string containing dictionary's entries.
 Such string may be passed back to av_dict_parse_string().
 @note String is escaped with backslashes ('\').

 @param[in]  m             dictionary
 @param[out] buffer        Pointer to buffer that will be allocated with string containg entries.
                           Buffer must be freed by the caller when is no longer needed.
 @param[in]  key_val_sep   character used to separate key from value
 @param[in]  pairs_sep     character used to separate two pairs from each other
 @return                   &gt;= 0 on success, negative on error
 @warning Separators cannot be neither '\\' nor '\0'. They also cannot be the same.

</member>
        <member name="M:ffmpeg.av_dict_free(ffmpeg.AVDictionary**)">
Free all the memory allocated for an AVDictionary struct
and all keys and values.

</member>
        <member name="M:ffmpeg.av_dict_copy(ffmpeg.AVDictionary**,ffmpeg.AVDictionary!System.Runtime.CompilerServices.IsConst*,System.Int32)">
Copy entries from one AVDictionary struct into another.
@param dst pointer to a pointer to a AVDictionary struct. If *dst is NULL,
           this function will allocate a struct for you and put it in *dst
@param src pointer to source AVDictionary struct
@param flags flags to use when setting entries in *dst
@note metadata is read using the AV_DICT_IGNORE_SUFFIX flag
@return 0 on success, negative AVERROR code on failure. If dst was allocated
          by this function, callers should free the associated memory.

</member>
        <member name="M:ffmpeg.av_dict_parse_string(ffmpeg.AVDictionary**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
 Parse the key/value pairs list and add the parsed entries to a dictionary.

 In case of failure, all the successfully set entries are stored in
 *pm. You may need to manually free the created dictionary.

 @param key_val_sep  a 0-terminated list of characters used to separate
                     key from value
 @param pairs_sep    a 0-terminated list of characters used to separate
                     two pairs from each other
 @param flags        flags to use when adding to dictionary.
                     AV_DICT_DONT_STRDUP_KEY and AV_DICT_DONT_STRDUP_VAL
                     are ignored since the key/value tokens will always
                     be duplicated.
 @return             0 on success, negative AVERROR code on failure

</member>
        <member name="M:ffmpeg.av_dict_set_int(ffmpeg.AVDictionary**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int64,System.Int32)">
 Convenience wrapper for av_dict_set that converts the value to a string
 and stores it.

 Note: If AV_DICT_DONT_STRDUP_KEY is set, key will be freed on error.

</member>
        <member name="M:ffmpeg.av_dict_count(ffmpeg.AVDictionary!System.Runtime.CompilerServices.IsConst*)">
 Get number of entries in dictionary.

 @param m dictionary
 @return  number of entries in dictionary

</member>
        <member name="M:ffmpeg.av_dict_get(ffmpeg.AVDictionary!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,ffmpeg.AVDictionaryEntry!System.Runtime.CompilerServices.IsConst*,System.Int32)">
 Get a dictionary entry with matching key.

 The returned entry key or value must not be changed, or it will
 cause undefined behavior.

 To iterate through all the dictionary entries, you can set the matching key
 to the null string "" and set the AV_DICT_IGNORE_SUFFIX flag.

 @param prev Set to the previous matching element to find the next.
             If set to NULL the first matching element is returned.
 @param key matching key
 @param flags a collection of AV_DICT_* flags controlling how the entry is retrieved
 @return found entry or NULL in case no matching entry was found in the dictionary

</member>
        <member name="M:ffmpeg.av_get_channel_description(System.UInt64)">
 Get the description of a given channel.

 @param channel  a channel layout with a single channel
 @return  channel description on success, NULL on error

</member>
        <member name="M:ffmpeg.av_get_channel_name(System.UInt64)">
 Get the name of a given channel.

 @return channel name on success, NULL on error.

</member>
        <member name="M:ffmpeg.av_channel_layout_extract_channel(System.UInt64,System.Int32)">
Get the channel with the given index in channel_layout.

</member>
        <member name="M:ffmpeg.av_get_channel_layout_channel_index(System.UInt64,System.UInt64)">
 Get the index of a channel in channel_layout.

 @param channel a channel layout describing exactly one channel which must be
                present in channel_layout.

 @return index of channel in channel_layout on success, a negative AVERROR
         on error.

</member>
        <member name="M:ffmpeg.av_get_default_channel_layout(System.Int32)">
Return default channel layout for a given number of channels.

</member>
        <member name="M:ffmpeg.av_get_channel_layout_nb_channels(System.UInt64)">
Return the number of channels in the channel layout.

</member>
        <member name="M:ffmpeg.av_bprint_channel_layout(ffmpeg.AVBPrint*,System.Int32,System.UInt64)">
Append a description of a channel layout to a bprint buffer.

</member>
        <member name="M:ffmpeg.av_get_channel_layout(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Return a channel layout id that matches name, or 0 if no match is found.

 name can be one or several of the following notations,
 separated by '+' or '|':
 - the name of an usual channel layout (mono, stereo, 4.0, quad, 5.0,
   5.0(side), 5.1, 5.1(side), 7.1, 7.1(wide), downmix);
 - the name of a single channel (FL, FR, FC, LFE, BL, BR, FLC, FRC, BC,
   SL, SR, TC, TFL, TFC, TFR, TBL, TBC, TBR, DL, DR);
 - a number of channels, in decimal, optionally followed by 'c', yielding
   the default channel layout for that number of channels (@see
   av_get_default_channel_layout);
 - a channel layout mask, in hexadecimal starting with "0x" (see the
   AV_CH_* macros).

 @warning Starting from the next major bump the trailing character
 'c' to specify a number of channels will be required, while a
 channel layout mask could also be specified as a decimal number
 (if and only if not followed by "c").

 Example: "stereo+FC" = "2c+FC" = "2c+1c" = "0x7"

</member>
        <member name="T:ffmpeg.AVMatrixEncoding">
@file
audio channel layout utility functions

@addtogroup lavu_audio
@{

 @defgroup channel_masks Audio channel masks

 A channel layout is a 64-bits integer with a bit set for every channel.
 The number of bits set must be equal to the number of channels.
 The value 0 means that the channel layout is not known.
 @note this data structure is not powerful enough to handle channels
 combinations that have the same channel multiple times, such as
 dual-mono.

 @{

Channel mask value used for AVCodecContext.request_channel_layout
    to indicate that the user requests the channel order of the decoder output
    to be the native codec channel order. 
@}
@defgroup channel_mask_c Audio channel layouts
@{

</member>
        <member name="M:ffmpeg.av_cpu_count">
@return the number of logical CPU cores present.

</member>
        <member name="M:ffmpeg.av_parse_cpu_caps(System.UInt32*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Parse CPU caps from a string and update the given AV_CPU_* flags based on that.

 @return negative on error.

</member>
        <member name="M:ffmpeg.av_parse_cpu_flags(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Parse CPU flags from a string.

 The returned flags contain the specified flags as well as related unspecified flags.

 This function exists only for compatibility with libav.
 Please use av_parse_cpu_caps() when possible.
 @return a combination of AV_CPU_* flags, negative on error.

</member>
        <member name="M:ffmpeg.av_set_cpu_flags_mask(System.Int32)">
 Set a mask on flags returned by av_get_cpu_flags().
 This function is mainly useful for testing.
 Please use av_force_cpu_flags() and av_get_cpu_flags() instead which are more flexible

 @warning this function is not thread safe.

</member>
        <member name="M:ffmpeg.av_force_cpu_flags(System.Int32)">
Disables cpu detection and forces the specified flags.
-1 is a special case that disables forcing of specific flags.

</member>
        <member name="M:ffmpeg.av_buffer_pool_get(ffmpeg.AVBufferPool*)">
 Allocate a new AVBuffer, reusing an old buffer from the pool when available.
 This function may be called simultaneously from multiple threads.

 @return a reference to the new buffer on success, NULL on error.

</member>
        <member name="M:ffmpeg.av_buffer_pool_uninit(ffmpeg.AVBufferPool**)">
 Mark the pool as being available for freeing. It will actually be freed only
 once all the allocated buffers associated with the pool are released. Thus it
 is safe to call this function while some of the allocated buffers are still
 in use.

 @param pool pointer to the pool to be freed. It will be set to NULL.
 @see av_buffer_pool_can_uninit()

</member>
        <member name="M:ffmpeg.av_buffer_pool_init2(System.Int32,System.Void*,=FUNC:ffmpeg.AVBufferRef*(System.Void*,System.Int32),=FUNC:System.Void(System.Void*))">
 Allocate and initialize a buffer pool with a more complex allocator.

 @param size size of each buffer in this pool
 @param opaque arbitrary user data used by the allocator
 @param alloc a function that will be used to allocate new buffers when the
              pool is empty.
 @param pool_free a function that will be called immediately before the pool
                  is freed. I.e. after av_buffer_pool_can_uninit() is called
                  by the pool and all the frames are returned to the pool and
                  freed. It is intended to uninitialize the user opaque data.
 @return newly created buffer pool on success, NULL on error.

</member>
        <member name="M:ffmpeg.av_buffer_pool_init(System.Int32,=FUNC:ffmpeg.AVBufferRef*(System.Int32))">
 Allocate and initialize a buffer pool.

 @param size size of each buffer in this pool
 @param alloc a function that will be used to allocate new buffers when the
 pool is empty. May be NULL, then the default allocator will be used
 (av_buffer_alloc()).
 @return newly created buffer pool on success, NULL on error.

</member>
        <member name="T:ffmpeg.AVBufferPool">
@}

 @defgroup lavu_bufferpool AVBufferPool
 @ingroup lavu_data

 @{
 AVBufferPool is an API for a lock-free thread-safe pool of AVBuffers.

 Frequently allocating and freeing large buffers may be slow. AVBufferPool is
 meant to solve this in cases when the caller needs a set of buffers of the
 same size (the most obvious use case being buffers for raw video or audio
 frames).

 At the beginning, the user must call av_buffer_pool_init() to create the
 buffer pool. Then whenever a buffer is needed, call av_buffer_pool_get() to
 get a reference to a new buffer, similar to av_buffer_alloc(). This new
 reference works in all aspects the same way as the one created by
 av_buffer_alloc(). However, when the last reference to this buffer is
 unreferenced, it is returned to the pool instead of being freed and will be
 reused for subsequent av_buffer_pool_get() calls.

 When the caller is done with the pool and no longer needs to allocate any new
 buffers, av_buffer_pool_uninit() must be called to mark the pool as freeable.
 Once all the buffers are released, it will automatically be freed.

 Allocating and releasing buffers with this API is thread-safe as long as
 either the default alloc callback is used, or the user-supplied one is
 thread-safe.

The buffer pool. This structure is opaque and not meant to be accessed
directly. It is allocated with av_buffer_pool_init() and freed with
av_buffer_pool_uninit().

</member>
        <member name="M:ffmpeg.av_buffer_realloc(ffmpeg.AVBufferRef**,System.Int32)">
 Reallocate a given buffer.

 @param buf  a buffer reference to reallocate. On success, buf will be
             unreferenced and a new reference with the required size will be
             written in its place. On failure buf will be left untouched. *buf
             may be NULL, then a new buffer is allocated.
 @param size required new buffer size.
 @return 0 on success, a negative AVERROR on failure.

 @note the buffer is actually reallocated with av_realloc() only if it was
 initially allocated through av_buffer_realloc(NULL) and there is only one
 reference to it (i.e. the one passed to this function). In all other cases
 a new buffer is allocated and the data is copied.

</member>
        <member name="M:ffmpeg.av_buffer_make_writable(ffmpeg.AVBufferRef**)">
 Create a writable reference from a given buffer reference, avoiding data copy
 if possible.

 @param buf buffer reference to make writable. On success, buf is either left
            untouched, or it is unreferenced and a new writable AVBufferRef is
            written in its place. On failure, buf is left untouched.
 @return 0 on success, a negative AVERROR on failure.

</member>
        <member name="M:ffmpeg.av_buffer_get_opaque(ffmpeg.AVBufferRef!System.Runtime.CompilerServices.IsConst*)">
@return the opaque parameter set by av_buffer_create.

</member>
        <member name="M:ffmpeg.av_buffer_is_writable(ffmpeg.AVBufferRef!System.Runtime.CompilerServices.IsConst*)">
@return 1 if the caller may write to the data referred to by buf (which is
true if and only if buf is the only reference to the underlying AVBuffer).
Return 0 otherwise.
A positive answer is valid until av_buffer_ref() is called on buf.

</member>
        <member name="M:ffmpeg.av_buffer_unref(ffmpeg.AVBufferRef**)">
 Free a given reference and automatically free the buffer if there are no more
 references to it.

 @param buf the reference to be freed. The pointer is set to NULL on return.

</member>
        <member name="M:ffmpeg.av_buffer_ref(ffmpeg.AVBufferRef*)">
 Create a new reference to an AVBuffer.

 @return a new AVBufferRef referring to the same AVBuffer as buf or NULL on
 failure.

</member>
        <member name="M:ffmpeg.av_buffer_default_free(System.Void*,System.Byte*)">
Default free callback, which calls av_free() on the buffer data.
This function is meant to be passed to av_buffer_create(), not called
directly.

</member>
        <member name="M:ffmpeg.av_buffer_create(System.Byte*,System.Int32,=FUNC:System.Void(System.Void*,System.Byte*),System.Void*,System.Int32)">
Always treat the buffer as read-only, even when it has only one
reference.

 Create an AVBuffer from an existing array.

 If this function is successful, data is owned by the AVBuffer. The caller may
 only access data through the returned AVBufferRef and references derived from
 it.
 If this function fails, data is left untouched.
 @param data   data array
 @param size   size of data in bytes
 @param free   a callback for freeing this buffer's data
 @param opaque parameter to be got for processing or passed to free
 @param flags  a combination of AV_BUFFER_FLAG_*

 @return an AVBufferRef referring to data on success, NULL on failure.

</member>
        <member name="M:ffmpeg.av_buffer_allocz(System.Int32)">
Same as av_buffer_alloc(), except the returned buffer will be initialized
to zero.

</member>
        <member name="M:ffmpeg.av_buffer_alloc(System.Int32)">
 Allocate an AVBuffer of the given size using av_malloc().

 @return an AVBufferRef of given size or NULL when out of memory

</member>
        <member name="F:ffmpeg.AVBufferRef.size">
Size of data in bytes.

</member>
        <member name="F:ffmpeg.AVBufferRef.data">
The data buffer. It is considered writable if and only if
this is the only reference to the buffer, in which case
av_buffer_is_writable() returns 1.

</member>
        <member name="T:ffmpeg.AVBufferRef">
 A reference to a data buffer.

 The size of this struct is not a part of the public ABI and it is not meant
 to be allocated directly.

</member>
        <member name="T:ffmpeg.AVBuffer">
@}
@}

@file
@ingroup lavu_buffer
refcounted data buffer API

 @defgroup lavu_buffer AVBuffer
 @ingroup lavu_data

 @{
 AVBuffer is an API for reference-counted data buffers.

 There are two core objects in this API -- AVBuffer and AVBufferRef. AVBuffer
 represents the data buffer itself; it is opaque and not meant to be accessed
 by the caller directly, but only through AVBufferRef. However, the caller may
 e.g. compare two AVBuffer pointers to check whether two different references
 are describing the same data buffer. AVBufferRef represents a single
 reference to an AVBuffer and it is the object that may be manipulated by the
 caller directly.

 There are two functions provided for creating a new AVBuffer with a single
 reference -- av_buffer_alloc() to just allocate a new buffer, and
 av_buffer_create() to wrap an existing array in an AVBuffer. From an existing
 reference, additional references may be created with av_buffer_ref().
 Use av_buffer_unref() to free a reference (this will automatically free the
 data once all the references are freed).

 The convention throughout this API and the rest of FFmpeg is such that the
 buffer is considered writable if there exists only one reference to it (and
 it has not been marked as read-only). The av_buffer_is_writable() function is
 provided to check whether this is true and av_buffer_make_writable() will
 automatically create a new writable buffer when necessary.
 Of course nothing prevents the calling code from violating this convention,
 however that is safe only when all the existing references are under its
 control.

 @note Referencing and unreferencing the buffers is thread-safe and thus
 may be done from multiple threads simultaneously without any need for
 additional locking.

 @note Two different references to the same buffer can point to different
 parts of the buffer (i.e. their AVBufferRef.data will not be equal).

A reference counted buffer type. It is opaque and is meant to be used through
references (AVBufferRef).

</member>
        <member name="M:ffmpeg.av_samples_set_silence(System.Byte**,System.Int32,System.Int32,System.Int32,ffmpeg.AVSampleFormat)">
 Fill an audio buffer with silence.

 @param audio_data  array of pointers to data planes
 @param offset      offset in samples at which to start filling
 @param nb_samples  number of samples to fill
 @param nb_channels number of audio channels
 @param sample_fmt  audio sample format

</member>
        <member name="M:ffmpeg.av_samples_copy(System.Byte**,System.Byte*!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32,System.Int32,System.Int32,ffmpeg.AVSampleFormat)">
 Copy samples from src to dst.

 @param dst destination array of pointers to data planes
 @param src source array of pointers to data planes
 @param dst_offset offset in samples at which the data will be written to dst
 @param src_offset offset in samples at which the data will be read from src
 @param nb_samples number of samples to be copied
 @param nb_channels number of audio channels
 @param sample_fmt audio sample format

</member>
        <member name="M:ffmpeg.av_samples_alloc_array_and_samples(System.Byte***,System.Int32*,System.Int32,System.Int32,ffmpeg.AVSampleFormat,System.Int32)">
 Allocate a data pointers array, samples buffer for nb_samples
 samples, and fill data pointers and linesize accordingly.

 This is the same as av_samples_alloc(), but also allocates the data
 pointers array.

 @see av_samples_alloc()

</member>
        <member name="M:ffmpeg.av_samples_fill_arrays(System.Byte**,System.Int32*,System.Byte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32,ffmpeg.AVSampleFormat,System.Int32)">
 @}

 @defgroup lavu_sampmanip Samples manipulation

 Functions that manipulate audio samples
 @{

 Fill plane data pointers and linesize for samples with sample
 format sample_fmt.

 The audio_data array is filled with the pointers to the samples data planes:
 for planar, set the start point of each channel's data within the buffer,
 for packed, set the start point of the entire buffer only.

 The value pointed to by linesize is set to the aligned size of each
 channel's data buffer for planar layout, or to the aligned size of the
 buffer for all channels for packed layout.

 The buffer in buf must be big enough to contain all the samples
 (use av_samples_get_buffer_size() to compute its minimum size),
 otherwise the audio_data pointers will point to invalid data.

 @see enum AVSampleFormat
 The documentation for AVSampleFormat describes the data layout.

 @param[out] audio_data  array to be filled with the pointer for each channel
 @param[out] linesize    calculated linesize, may be NULL
 @param buf              the pointer to a buffer containing the samples
 @param nb_channels      the number of channels
 @param nb_samples       the number of samples in a single channel
 @param sample_fmt       the sample format
 @param align            buffer size alignment (0 = default, 1 = no alignment)
 @return                 &gt;=0 on success or a negative error code on failure
 @todo return minimum size in bytes required for the buffer in case
 of success at the next bump

</member>
        <member name="M:ffmpeg.av_samples_get_buffer_size(System.Int32*,System.Int32,System.Int32,ffmpeg.AVSampleFormat,System.Int32)">
 Get the required buffer size for the given audio parameters.

 @param[out] linesize calculated linesize, may be NULL
 @param nb_channels   the number of channels
 @param nb_samples    the number of samples in a single channel
 @param sample_fmt    the sample format
 @param align         buffer size alignment (0 = default, 1 = no alignment)
 @return              required buffer size, or negative error code on failure

</member>
        <member name="M:ffmpeg.av_sample_fmt_is_planar(ffmpeg.AVSampleFormat)">
 Check if the sample format is planar.

 @param sample_fmt the sample format to inspect
 @return 1 if the sample format is planar, 0 if it is interleaved

</member>
        <member name="M:ffmpeg.av_get_bytes_per_sample(ffmpeg.AVSampleFormat)">
 Return number of bytes per sample.

 @param sample_fmt the sample format
 @return number of bytes per sample or zero if unknown for the given
 sample format

</member>
        <member name="M:ffmpeg.av_get_sample_fmt_string(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.Int32,ffmpeg.AVSampleFormat)">
 Generate a string corresponding to the sample format with
 sample_fmt, or a header if sample_fmt is negative.

 @param buf the buffer where to write the string
 @param buf_size the size of buf
 @param sample_fmt the number of the sample format to print the
 corresponding info string, or a negative value to print the
 corresponding header.
 @return the pointer to the filled buffer or NULL if sample_fmt is
 unknown or in case of other errors

</member>
        <member name="M:ffmpeg.av_get_sample_fmt_name(ffmpeg.AVSampleFormat)">
Return the name of sample_fmt, or NULL if sample_fmt is not
recognized.

</member>
        <member name="T:ffmpeg.AVSampleFormat">
@}
@}

 @addtogroup lavu_audio
 @{

 @defgroup lavu_sampfmts Audio sample formats

 Audio sample format enumeration and related convenience functions.
 @{


 Audio sample formats

 - The data described by the sample format is always in native-endian order.
   Sample values can be expressed by native C types, hence the lack of a signed
   24-bit sample format even though it is a common raw audio data format.

 - The floating-point formats are based on full volume being in the range
   [-1.0, 1.0]. Any values outside this range are beyond full volume level.

 - The data layout as used in av_samples_fill_arrays() and elsewhere in FFmpeg
   (such as AVFrame in libavcodec) is as follows:

 @par
 For planar sample formats, each audio channel is in a separate data plane,
 and linesize is the buffer size, in bytes, for a single plane. All data
 planes must be the same size. For packed sample formats, only the first data
 plane is used, and samples for each channel are interleaved. In this case,
 linesize is the buffer size, in bytes, for the 1 plane.



Return a sample format corresponding to name, or AV_SAMPLE_FMT_NONE
on error.


 * Get the packed alternative form of the given sample format.
 *
 * If the passed sample_fmt is already in packed format, the format returned is
 * the same as the input.
 *
 * @return  the packed alternative form of the given sample format or
            AV_SAMPLE_FMT_NONE on error.


 * Get the planar alternative form of the given sample format.
 *
 * If the passed sample_fmt is already in planar format, the format returned is
 * the same as the input.
 *
 * @return  the planar alternative form of the given sample format or
            AV_SAMPLE_FMT_NONE on error.


audio sample format
- encoding: Set by user.
- decoding: Set by libavcodec.


desired sample format
- encoding: Not used.
- decoding: Set by user.
Decoder will decode to this format if it can.

</member>
        <member name="M:ffmpeg.av_get_time_base_q">
Return the fractional representation of the internal time base.

</member>
        <member name="M:ffmpeg.av_fopen_utf8(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Compute the length of an integer list.

 @param term  list terminator (usually 0 or -1)
 @param list  pointer to the list
 @return  length of the list, in elements, not counting the terminator

Open a file using a UTF-8 filename.
The API of this function matches POSIX fopen(), errors are returned through
errno.

</member>
        <member name="M:ffmpeg.av_int_list_length_for_size(System.UInt32,System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt64)">
 Compute the length of an integer list.

 @param elsize  size in bytes of each list element (only 1, 2, 4 or 8)
 @param term    list terminator (usually 0 or -1)
 @param list    pointer to the list
 @return  length of the list, in elements, not counting the terminator

</member>
        <member name="M:ffmpeg.av_x_if_null(System.Void!System.Runtime.CompilerServices.IsConst*,System.Void!System.Runtime.CompilerServices.IsConst*)">
Return x default pointer in case p is NULL.

</member>
        <member name="T:ffmpeg.AVChromaLocation">
 Location of chroma samples.

 Illustration showing the location of the first (top left) chroma sample of the
 image, the left shows only luma, the right
 shows the location of the chroma sample, the 2 could be imagined to overlay
 each other but are drawn separately due to limitations of ASCII

                1st 2nd       1st 2nd horizontal luma sample positions
                 v   v         v   v
                 ______        ______
1st luma line &gt; |X   X ...    |3 4 X ...     X are luma samples,
                |             |1 2           1-6 are possible chroma positions
2nd luma line &gt; |X   X ...    |5 6 X ...     0 is undefined/unknown position


This defines the location of chroma samples.
- encoding: Set by user
- decoding: Set by libavcodec


 Converts swscale x/y chroma position to AVChromaLocation.

 The positions represent the chroma (0,0) position in a coordinates system
 with luma (0,0) representing the origin and luma(1,1) representing 256,256

 @param xpos  horizontal chroma sample position
 @param ypos  vertical   chroma sample position

</member>
        <member name="T:ffmpeg.AVColorRange">
MPEG vs JPEG YUV range.


MPEG vs JPEG YUV range.
It must be accessed using av_frame_get_color_range() and
av_frame_set_color_range().
- encoding: Set by user
- decoding: Set by libavcodec


MPEG vs JPEG YUV range.
- encoding: Set by user
- decoding: Set by libavcodec

</member>
        <member name="T:ffmpeg.AVColorSpace">
YUV colorspace type.


YUV colorspace type.
It must be accessed using av_frame_get_colorspace() and
av_frame_set_colorspace().
- encoding: Set by user
- decoding: Set by libavcodec


YUV colorspace type.
- encoding: Set by user
- decoding: Set by libavcodec

</member>
        <member name="T:ffmpeg.AVColorTransferCharacteristic">
Color Transfer Characteristic.


Color Transfer Characteristic.
- encoding: Set by user
- decoding: Set by libavcodec

</member>
        <member name="T:ffmpeg.AVColorPrimaries">
Chromaticity coordinates of the source primaries.


Chromaticity coordinates of the source primaries.
- encoding: Set by user
- decoding: Set by libavcodec

</member>
        <member name="F:AV_PIX_FMT_MMAL">
HW acceleration though MMAL, data[3] contains a pointer to the
MMAL_BUFFER_HEADER_T structure.

</member>
        <member name="F:AV_PIX_FMT_QSV">
HW acceleration through QSV, data[3] contains a pointer to the
mfxFrameSurface1 structure.

</member>
        <member name="F:AV_PIX_FMT_YUV420P9BE">
The following 12 formats have the disadvantage of needing 1 format for each bit depth.
Notice that each 9/10 bits sample is stored in 16 bits with extra padding.
If you want to support multiple bit depths, then using AV_PIX_FMT_YUV420P16* with the bpp stored separately is better.

</member>
        <member name="F:AV_PIX_FMT_VAAPI">
@}
</member>
        <member name="F:AV_PIX_FMT_VAAPI_MOCO">
@name Deprecated pixel formats 
@{
</member>
        <member name="M:ffmpeg.av_log_set_flags(System.Int32)">
av_dlog macros
@deprecated unused
Useful to print debug messages that shouldn't get compiled in normally.

Skip repeated messages, this requires the user app to use av_log() instead of
(f)printf as the 2 would otherwise interfere and lead to
"Last message repeated x times" messages below (f)printf messages with some
bad luck.
Also to receive the last, "last repeated" line if any, the user app must
call av_log(NULL, AV_LOG_QUIET, "%s", ""); at the end

 Include the log severity in messages originating from codecs.

 Results in messages such as:
 [rawvideo @ 0xDEADBEEF] [error] encode did not produce valid pts

</member>
        <member name="M:ffmpeg.av_log_format_line(System.Void*,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.Int32,System.Int32*)">
Format a line of log the same way as the default callback.
@param line          buffer to receive the formatted line
@param line_size     size of the buffer
@param print_prefix  used to store whether the prefix must be printed;
                     must point to a persistent integer initially set to 1

</member>
        <member name="M:ffmpeg.av_default_item_name(System.Void*)">
 Return the context name

 @param  ctx The AVClass context

 @return The AVClass class_name

</member>
        <member name="M:ffmpeg.av_log_default_callback(System.Void*,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
 Default logging callback

 It prints the message to stderr, optionally colorizing it.

 @param avcl A pointer to an arbitrary struct of which the first field is a
        pointer to an AVClass struct.
 @param level The importance level of the message expressed using a @ref
        lavu_log_constants "Logging Constant".
 @param fmt The format string (printf-compatible) that specifies how
        subsequent arguments are converted to output.
 @param vl The arguments referenced by the format string.

</member>
        <member name="M:ffmpeg.av_log_set_callback(=FUNC:System.Void(System.Void*,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*))">
 Set the logging callback

 @note The callback must be thread safe, even if the application does not use
       threads itself as some codecs are multithreaded.

 @see av_log_default_callback

 @param callback A logging function with a compatible signature.

</member>
        <member name="M:ffmpeg.av_log_set_level(System.Int32)">
 Set the log level

 @see lavu_log_constants

 @param level Logging level

</member>
        <member name="M:ffmpeg.av_log_get_level">
 Get the current log level

 @see lavu_log_constants

 @return Current log level

</member>
        <member name="M:ffmpeg.av_vlog(System.Void*,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
 Send the specified message to the log if the level is less than or equal
 to the current av_log_level. By default, all logging messages are sent to
 stderr. This behavior can be altered by setting a different logging callback
 function.
 @see av_log_set_callback

 @param avcl A pointer to an arbitrary struct of which the first field is a
        pointer to an AVClass struct.
 @param level The importance level of the message expressed using a @ref
        lavu_log_constants "Logging Constant".
 @param fmt The format string (printf-compatible) that specifies how
        subsequent arguments are converted to output.
 @param vl The arguments referenced by the format string.

</member>
        <member name="M:ffmpeg.av_log(System.Void*,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,BTEllipsis)">
 @addtogroup lavu_log

 @{

 @defgroup lavu_log_constants Logging Constants

 @{

Print no output.

Something went really wrong and we will crash now.

Something went wrong and recovery is not possible.
For example, no header was found for a format which depends
on headers or an illegal combination of parameters is used.

Something went wrong and cannot losslessly be recovered.
However, not all future data is affected.

Something somehow does not look correct. This may or may not
lead to problems. An example would be the use of '-vstrict -2'.

Standard information.

Detailed information.

Stuff which is only useful for libav* developers.

Extremely verbose debugging, useful for libav* development.

@}

 * Sets additional colors for extended debugging sessions.
 * @code
   av_log(ctx, AV_LOG_DEBUG|AV_LOG_C(134), "Message in purple\n");
   @endcode
 * Requires 256color terminal support. Uses outside debugging is not
 * recommended.

 Send the specified message to the log if the level is less than or equal
 to the current av_log_level. By default, all logging messages are sent to
 stderr. This behavior can be altered by setting a different logging callback
 function.
 @see av_log_set_callback

 @param avcl A pointer to an arbitrary struct of which the first field is a
        pointer to an AVClass struct or NULL if general log.
 @param level The importance level of the message expressed using a @ref
        lavu_log_constants "Logging Constant".
 @param fmt The format string (printf-compatible) that specifies how
        subsequent arguments are converted to output.

</member>
        <member name="F:ffmpeg.AVClass.query_ranges">
Callback to return the supported/allowed ranges.
available since version (52.12)

</member>
        <member name="F:ffmpeg.AVClass.child_next">
Return next AVOptions-enabled child or NULL

</member>
        <member name="F:ffmpeg.AVClass.parent_log_context_offset">
Offset in the structure where a pointer to the parent context for
logging is stored. For example a decoder could pass its AVCodecContext
to eval as such a parent context, which an av_log() implementation
could then leverage to display the parent context.
The offset can be NULL.

</member>
        <member name="F:ffmpeg.AVClass.log_level_offset_offset">
Offset in the structure where log_level_offset is stored.
0 means there is no such variable

</member>
        <member name="F:ffmpeg.AVClass.version">
LIBAVUTIL_VERSION with which this structure was created.
This is used to allow fields to be added without requiring major
version bumps everywhere.

</member>
        <member name="T:ffmpeg.AVOption">
 a pointer to the first option specified in the class if any or NULL

 @see av_set_default_options()

</member>
        <member name="F:ffmpeg.AVClass.item_name">
A pointer to a function which returns the name of a context
instance ctx associated with the class.

</member>
        <member name="F:ffmpeg.AVClass.class_name">
The name of the class; usually it is the same name as the
context structure type to which the AVClass is associated.

</member>
        <member name="T:ffmpeg.AVClass">
Describe the class of an AVClass context structure. That is an
arbitrary struct of which the first field is a pointer to an
AVClass struct (e.g. AVCodecContext, AVFormatContext etc.).


 Return an AVClass corresponding to the next potential
 AVOptions-enabled child.

 The difference between child_next and this is that
 child_next iterates over _already existing_ objects, while
 child_class_next iterates over _all possible_ children.

</member>
        <member name="M:ffmpeg.av_add_stable(ffmpeg.AVRational,System.Int64,ffmpeg.AVRational,System.Int64)">
 Add a value to a timestamp.

 This function guarantees that when the same value is repeatly added that
 no accumulation of rounding errors occurs.

 @param ts Input timestamp
 @param ts_tb Input timestamp timebase
 @param inc value to add to ts
 @param inc_tb inc timebase

</member>
        <member name="M:ffmpeg.av_rescale_delta(ffmpeg.AVRational,System.Int64,ffmpeg.AVRational,System.Int32,System.Int64*,ffmpeg.AVRational)">
 Rescale a timestamp while preserving known durations.

 @param in_ts Input timestamp
 @param in_tb Input timebase
 @param fs_tb Duration and *last timebase
 @param duration duration till the next call
 @param out_tb Output timebase

</member>
        <member name="M:ffmpeg.av_compare_mod(System.UInt64,System.UInt64,System.UInt64)">
 Compare 2 integers modulo mod.
 That is we compare integers a and b for which only the least
 significant log2(mod) bits are known.

 @param mod must be a power of 2
 @return a negative value if a is smaller than b
         a positive value if a is greater than b
         0                if a equals          b

</member>
        <member name="M:ffmpeg.av_compare_ts(System.Int64,ffmpeg.AVRational,System.Int64,ffmpeg.AVRational)">
Compare 2 timestamps each in its own timebases.
The result of the function is undefined if one of the timestamps
is outside the int64_t range when represented in the others timebase.
@return -1 if ts_a is before ts_b, 1 if ts_a is after ts_b or 0 if they represent the same position

</member>
        <member name="M:ffmpeg.av_rescale_q_rnd(System.Int64,ffmpeg.AVRational,ffmpeg.AVRational,ffmpeg.AVRounding)">
 Rescale a 64-bit integer by 2 rational numbers with specified rounding.

 @return rescaled value a, or if AV_ROUND_PASS_MINMAX is set and a is
         INT64_MIN or INT64_MAX then a is passed through unchanged.

</member>
        <member name="M:ffmpeg.av_rescale_q(System.Int64,ffmpeg.AVRational,ffmpeg.AVRational)">
Rescale a 64-bit integer by 2 rational numbers.

</member>
        <member name="M:ffmpeg.av_rescale_rnd(System.Int64,System.Int64,System.Int64,ffmpeg.AVRounding)">
 Rescale a 64-bit integer with specified rounding.
 A simple a*b/c isn't possible as it can overflow.

 @return rescaled value a, or if AV_ROUND_PASS_MINMAX is set and a is
         INT64_MIN or INT64_MAX then a is passed through unchanged.

</member>
        <member name="M:ffmpeg.av_rescale(System.Int64,System.Int64,System.Int64)">
Rescale a 64-bit integer with rounding to nearest.
A simple a*b/c isn't possible as it can overflow.

</member>
        <member name="M:ffmpeg.av_gcd(System.Int64,System.Int64)">
 Compute the greatest common divisor of a and b.

 @return gcd of a and b up to sign; if a &gt;= 0 and b &gt;= 0, return value is &gt;= 0;
 if a == 0 and b == 0, returns 0.

</member>
        <member name="T:ffmpeg.AVRounding">
@addtogroup lavu_math
@{

</member>
        <member name="M:ffmpeg.av_double2int(System.Double)">
Reinterpret a double as a 64-bit integer.

</member>
        <member name="M:ffmpeg.av_int2double(System.UInt64)">
Reinterpret a 64-bit integer as a double.

</member>
        <member name="M:ffmpeg.av_float2int(System.Single)">
Reinterpret a float as a 32-bit integer.

</member>
        <member name="M:ffmpeg.av_int2float(System.UInt32)">
Reinterpret a 32-bit integer as a float.

</member>
        <member name="T:ffmpeg.av_intfloat32">
@}

</member>
        <member name="M:ffmpeg.av_q2intfloat(ffmpeg.AVRational)">
 Converts a AVRational to a IEEE 32bit float.

 The float is returned in a uint32_t and its value is platform indepenant.

</member>
        <member name="M:ffmpeg.av_find_nearest_q_idx(ffmpeg.AVRational,ffmpeg.AVRational!System.Runtime.CompilerServices.IsConst*)">
Find the nearest value in q_list to q.
@param q_list an array of rationals terminated by {0, 0}
@return the index of the nearest value found in the array

</member>
        <member name="M:ffmpeg.av_nearer_q(ffmpeg.AVRational,ffmpeg.AVRational,ffmpeg.AVRational)">
@return 1 if q1 is nearer to q than q2, -1 if q2 is nearer
than q1, 0 if they have the same distance.

</member>
        <member name="M:ffmpeg.av_d2q(System.Double,System.Int32)">
 Convert a double precision floating point number to a rational.
 inf is expressed as {1,0} or {-1,0} depending on the sign.

 @param d double to convert
 @param max the maximum allowed numerator and denominator
 @return (AVRational) d

</member>
        <member name="M:ffmpeg.av_inv_q(ffmpeg.AVRational)">
Invert a rational.
@param q value
@return 1 / q

</member>
        <member name="M:ffmpeg.av_sub_q(ffmpeg.AVRational,ffmpeg.AVRational)">
Subtract one rational from another.
@param b first rational
@param c second rational
@return b-c

</member>
        <member name="M:ffmpeg.av_add_q(ffmpeg.AVRational,ffmpeg.AVRational)">
Add two rationals.
@param b first rational
@param c second rational
@return b+c

</member>
        <member name="M:ffmpeg.av_div_q(ffmpeg.AVRational,ffmpeg.AVRational)">
Divide one rational by another.
@param b first rational
@param c second rational
@return b/c

</member>
        <member name="M:ffmpeg.av_mul_q(ffmpeg.AVRational,ffmpeg.AVRational)">
Multiply two rationals.
@param b first rational
@param c second rational
@return b*c

</member>
        <member name="M:ffmpeg.av_q2d(ffmpeg.AVRational)">
Convert rational to double.
@param a rational to convert
@return (double) a

</member>
        <member name="M:ffmpeg.av_make_q(System.Int32,System.Int32)">
Create a rational.
Useful for compilers that do not support compound literals.
@note  The return value is not reduced.

</member>
        <member name="M:ffmpeg.av_fast_mallocz(System.Void*,System.UInt32*,System.UInt32)">
 Allocate a buffer, reusing the given one if large enough.

 All newly allocated space is initially cleared
 Contrary to av_fast_realloc the current buffer contents might not be
 preserved and on error the old buffer is freed, thus no special
 handling to avoid memleaks is necessary.

 @param ptr pointer to pointer to already allocated buffer, overwritten with pointer to new buffer
 @param size size of the buffer *ptr points to
 @param min_size minimum size of *ptr buffer after returning, *ptr will be NULL and
                 *size 0 if an error occurred.

</member>
        <member name="M:ffmpeg.av_fast_malloc(System.Void*,System.UInt32*,System.UInt32)">
 Allocate a buffer, reusing the given one if large enough.

 Contrary to av_fast_realloc the current buffer contents might not be
 preserved and on error the old buffer is freed, thus no special
 handling to avoid memleaks is necessary.

 @param ptr pointer to pointer to already allocated buffer, overwritten with pointer to new buffer
 @param size size of the buffer *ptr points to
 @param min_size minimum size of *ptr buffer after returning, *ptr will be NULL and
                 *size 0 if an error occurred.

</member>
        <member name="M:ffmpeg.av_fast_realloc(System.Void*,System.UInt32*,System.UInt32)">
 Reallocate the given block if it is not large enough, otherwise do nothing.

 @see av_realloc

</member>
        <member name="M:ffmpeg.av_memcpy_backptr(System.Byte*,System.Int32,System.Int32)">
 deliberately overlapping memcpy implementation
 @param dst destination buffer
 @param back how many bytes back we start (the initial size of the overlapping window), must be &gt; 0
 @param cnt number of bytes to copy, must be &gt;= 0

 cnt &gt; back is valid, this will copy the bytes we just copied,
 thus creating a repeating pattern with a period length of back.

</member>
        <member name="M:ffmpeg.av_max_alloc(System.UInt32)">
Set the maximum size that may me allocated in one block.

</member>
        <member name="M:ffmpeg.av_size_mult(System.UInt32,System.UInt32,System.UInt32*)">
Multiply two size_t values checking for overflow.
@return  0 if success, AVERROR(EINVAL) if overflow.

</member>
        <member name="M:ffmpeg.av_dynarray2_add(System.Void**,System.Int32*,System.UInt32,System.Byte!System.Runtime.CompilerServices.IsConst*)">
 Add an element of size elem_size to a dynamic array.

 The array is reallocated when its number of elements reaches powers of 2.
 Therefore, the amortized cost of adding an element is constant.

 In case of success, the pointer to the array is updated in order to
 point to the new grown array, and the number pointed to by nb_ptr
 is incremented.
 In case of failure, the array is freed, *tab_ptr is set to NULL and
 *nb_ptr is set to 0.

 @param tab_ptr   pointer to the array to grow
 @param nb_ptr    pointer to the number of elements in the array
 @param elem_size size in bytes of the elements in the array
 @param elem_data pointer to the data of the element to add. If NULL, the space of
                  the new added element is not filled.
 @return          pointer to the data of the element to copy in the new allocated space.
                  If NULL, the new allocated space is left uninitialized."
 @see av_dynarray_add(), av_dynarray_add_nofree()

</member>
        <member name="M:ffmpeg.av_dynarray_add_nofree(System.Void*,System.Int32*,System.Void*)">
 Add an element to a dynamic array.

 Function has the same functionality as av_dynarray_add(),
 but it doesn't free memory on fails. It returns error code
 instead and leave current buffer untouched.

 @param tab_ptr pointer to the array to grow
 @param nb_ptr  pointer to the number of elements in the array
 @param elem    element to add
 @return &gt;=0 on success, negative otherwise.
 @see av_dynarray_add(), av_dynarray2_add()

</member>
        <member name="M:ffmpeg.av_dynarray_add(System.Void*,System.Int32*,System.Void*)">
 Add an element to a dynamic array.

 The array to grow is supposed to be an array of pointers to
 structures, and the element to add must be a pointer to an already
 allocated structure.

 The array is reallocated when its size reaches powers of 2.
 Therefore, the amortized cost of adding an element is constant.

 In case of success, the pointer to the array is updated in order to
 point to the new grown array, and the number pointed to by nb_ptr
 is incremented.
 In case of failure, the array is freed, *tab_ptr is set to NULL and
 *nb_ptr is set to 0.

 @param tab_ptr pointer to the array to grow
 @param nb_ptr  pointer to the number of elements in the array
 @param elem    element to add
 @see av_dynarray_add_nofree(), av_dynarray2_add()

</member>
        <member name="M:ffmpeg.av_freep(System.Void*)">
Free a memory block which has been allocated with av_malloc(z)() or
av_realloc() and set the pointer pointing to it to NULL.
@param ptr Pointer to the pointer to the memory block which should
be freed.
@note passing a pointer to a NULL pointer is safe and leads to no action.
@see av_free()

</member>
        <member name="M:ffmpeg.av_memdup(System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt32)">
Duplicate the buffer p.
@param p buffer to be duplicated
@return Pointer to a newly allocated buffer containing a
copy of p or NULL if the buffer cannot be allocated.

</member>
        <member name="M:ffmpeg.av_strndup(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32)">
Duplicate a substring of the string s.
@param s string to be duplicated
@param len the maximum length of the resulting string (not counting the
           terminating byte).
@return Pointer to a newly-allocated string containing a
copy of s or NULL if the string cannot be allocated.

</member>
        <member name="M:ffmpeg.av_strdup(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Duplicate the string s.
@param s string to be duplicated
@return Pointer to a newly-allocated string containing a
copy of s or NULL if the string cannot be allocated.

</member>
        <member name="M:ffmpeg.av_mallocz_array(System.UInt32,System.UInt32)">
Allocate a block of size * nmemb bytes with av_mallocz().
@param nmemb Number of elements
@param size Size of the single element
@return Pointer to the allocated block, NULL if the block cannot
be allocated.
@see av_mallocz()
@see av_malloc_array()

</member>
        <member name="M:ffmpeg.av_calloc(System.UInt32,System.UInt32)">
Allocate a block of nmemb * size bytes with alignment suitable for all
memory accesses (including vectors if available on the CPU) and
zero all the bytes of the block.
The allocation will fail if nmemb * size is greater than or equal
to INT_MAX.
@param nmemb
@param size
@return Pointer to the allocated block, NULL if it cannot be allocated.

</member>
        <member name="M:ffmpeg.av_mallocz(System.UInt32)">
Allocate a block of size bytes with alignment suitable for all
memory accesses (including vectors if available on the CPU) and
zero all the bytes of the block.
@param size Size in bytes for the memory block to be allocated.
@return Pointer to the allocated block, NULL if it cannot be allocated.
@see av_malloc()

</member>
        <member name="M:ffmpeg.av_free(System.Void*)">
Free a memory block which has been allocated with av_malloc(z)() or
av_realloc().
@param ptr Pointer to the memory block which should be freed.
@note ptr = NULL is explicitly allowed.
@note It is recommended that you use av_freep() instead.
@see av_freep()

</member>
        <member name="M:ffmpeg.av_reallocp_array(System.Void*,System.UInt32,System.UInt32)">
Allocate or reallocate an array through a pointer to a pointer.
If *ptr is NULL and nmemb &gt; 0, allocate a new block. If
nmemb is zero, free the memory block pointed to by ptr.
@param ptr Pointer to a pointer to a memory block already allocated
with av_realloc(), or pointer to a pointer to NULL.
The pointer is updated on success, or freed on failure.
@param nmemb Number of elements
@param size Size of the single element
@return Zero on success, an AVERROR error code on failure.
@warning Pointers originating from the av_malloc() family of functions must
         not be passed to av_realloc(). The former can be implemented using
         memalign() (or other functions), and there is no guarantee that
         pointers from such functions can be passed to realloc() at all.
         The situation is undefined according to POSIX and may crash with
         some libc implementations.

</member>
        <member name="M:ffmpeg.av_realloc_array(System.Void*,System.UInt32,System.UInt32)">
Allocate or reallocate an array.
If ptr is NULL and nmemb &gt; 0, allocate a new block. If
nmemb is zero, free the memory block pointed to by ptr.
@param ptr Pointer to a memory block already allocated with
av_realloc() or NULL.
@param nmemb Number of elements
@param size Size of the single element
@return Pointer to a newly-reallocated block or NULL if the block
cannot be reallocated or the function is used to free the memory block.
@warning Pointers originating from the av_malloc() family of functions must
         not be passed to av_realloc(). The former can be implemented using
         memalign() (or other functions), and there is no guarantee that
         pointers from such functions can be passed to realloc() at all.
         The situation is undefined according to POSIX and may crash with
         some libc implementations.

</member>
        <member name="M:ffmpeg.av_reallocp(System.Void*,System.UInt32)">
Allocate or reallocate a block of memory.
If *ptr is NULL and size &gt; 0, allocate a new block. If
size is zero, free the memory block pointed to by ptr.
@param   ptr Pointer to a pointer to a memory block already allocated
         with av_realloc(), or pointer to a pointer to NULL.
         The pointer is updated on success, or freed on failure.
@param   size Size in bytes for the memory block to be allocated or
         reallocated
@return  Zero on success, an AVERROR error code on failure.
@warning Pointers originating from the av_malloc() family of functions must
         not be passed to av_reallocp(). The former can be implemented using
         memalign() (or other functions), and there is no guarantee that
         pointers from such functions can be passed to realloc() at all.
         The situation is undefined according to POSIX and may crash with
         some libc implementations.

</member>
        <member name="M:ffmpeg.av_realloc_f(System.Void*,System.UInt32,System.UInt32)">
Allocate or reallocate a block of memory.
This function does the same thing as av_realloc, except:
- It takes two arguments and checks the result of the multiplication for
  integer overflow.
- It frees the input block in case of failure, thus avoiding the memory
  leak with the classic "buf = realloc(buf); if (!buf) return -1;".

</member>
        <member name="M:ffmpeg.av_realloc(System.Void*,System.UInt32)">
Allocate or reallocate a block of memory.
If ptr is NULL and size &gt; 0, allocate a new block. If
size is zero, free the memory block pointed to by ptr.
@param ptr Pointer to a memory block already allocated with
av_realloc() or NULL.
@param size Size in bytes of the memory block to be allocated or
reallocated.
@return Pointer to a newly-reallocated block or NULL if the block
cannot be reallocated or the function is used to free the memory block.
@warning Pointers originating from the av_malloc() family of functions must
         not be passed to av_realloc(). The former can be implemented using
         memalign() (or other functions), and there is no guarantee that
         pointers from such functions can be passed to realloc() at all.
         The situation is undefined according to POSIX and may crash with
         some libc implementations.
@see av_fast_realloc()

</member>
        <member name="M:ffmpeg.av_malloc_array(System.UInt32,System.UInt32)">
Allocate a block of size * nmemb bytes with av_malloc().
@param nmemb Number of elements
@param size Size of the single element
@return Pointer to the allocated block, NULL if the block cannot
be allocated.
@see av_malloc()

</member>
        <member name="M:ffmpeg.av_malloc(System.UInt32)">
Convenience macro, the return value should be used only directly in
function arguments but never stand-alone.

@}

@addtogroup lavu_mem
@{

Allocate a block of size bytes with alignment suitable for all
memory accesses (including vectors if available on the CPU).
@param size Size in bytes for the memory block to be allocated.
@return Pointer to the allocated block, NULL if the block cannot
be allocated.
@see av_mallocz()

</member>
        <member name="M:ffmpeg.av_make_error_string(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.UInt32,System.Int32)">
 Fill the provided buffer with a string containing an error string
 corresponding to the AVERROR code errnum.

 @param errbuf         a buffer
 @param errbuf_size    size in bytes of errbuf
 @param errnum         error code to describe
 @return the buffer in input, filled with the error description
 @see av_strerror()

</member>
        <member name="M:ffmpeg.av_strerror(System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.UInt32)">
 Convert a UTF-8 character (up to 4 bytes) to its 32-bit UCS-4 encoded form.

 @param val      Output value, must be an lvalue of type uint32_t.
 @param GET_BYTE Expression reading one byte from the input.
                 Evaluated up to 7 times (4 for the currently
                 assigned Unicode range).  With a memory buffer
                 input, this could be *ptr++.
 @param ERROR    Expression to be evaluated on invalid input,
                 typically a goto statement.

 @warning ERROR should not contain a loop control statement which
 could interact with the internal while loop, and should force an
 exit from the macro code (e.g. through a goto or a return) in order
 to prevent undefined results.

 Convert a UTF-16 character (2 or 4 bytes) to its 32-bit UCS-4 encoded form.

 @param val       Output value, must be an lvalue of type uint32_t.
 @param GET_16BIT Expression returning two bytes of UTF-16 data converted
                  to native byte order.  Evaluated one or two times.
 @param ERROR     Expression to be evaluated on invalid input,
                  typically a goto statement.

@def PUT_UTF8(val, tmp, PUT_BYTE)
Convert a 32-bit Unicode character to its UTF-8 encoded form (up to 4 bytes long).
@param val is an input-only argument and should be of type uint32_t. It holds
a UCS-4 encoded Unicode character that is to be converted to UTF-8. If
val is given as a function it is executed only once.
@param tmp is a temporary variable and should be of type uint8_t. It
represents an intermediate value during conversion that is to be
output by PUT_BYTE.
@param PUT_BYTE writes the converted UTF-8 bytes to any proper destination.
It could be a function or a statement, and uses tmp as the input byte.
For example, PUT_BYTE could be "*output++ = tmp;" PUT_BYTE will be
executed up to 4 times for values in the valid UTF-8 range and up to
7 times in the general case, depending on the length of the converted
Unicode character.

@def PUT_UTF16(val, tmp, PUT_16BIT)
Convert a 32-bit Unicode character to its UTF-16 encoded form (2 or 4 bytes).
@param val is an input-only argument and should be of type uint32_t. It holds
a UCS-4 encoded Unicode character that is to be converted to UTF-16. If
val is given as a function it is executed only once.
@param tmp is a temporary variable and should be of type uint16_t. It
represents an intermediate value during conversion that is to be
output by PUT_16BIT.
@param PUT_16BIT writes the converted UTF-16 data to any proper destination
in desired endianness. It could be a function or a statement, and uses tmp
as the input byte.  For example, PUT_BYTE could be "*output++ = tmp;"
PUT_BYTE will be executed 1 or 2 times depending on input character.

@file
memory handling functions

@file
error code definitions

 @addtogroup lavu_error

 @{

This is semantically identical to AVERROR_BUG
it has been introduced in Libav after our AVERROR_BUG and with a modified value.

 Put a description of the AVERROR code errnum in errbuf.
 In case of failure the global variable errno is set to indicate the
 error. Even in case of failure av_strerror() will print a generic
 error message indicating the errnum provided to errbuf.

 @param errnum      error code to describe
 @param errbuf      buffer to which description is written
 @param errbuf_size the size in bytes of errbuf
 @return 0 on success, a negative value if a description for errnum
 cannot be found

</member>
        <member name="M:ffmpeg.av_popcount64_c(System.UInt64)">
Count number of bits set to one in x
@param x value to count bits of
@return the number of bits set to one in x

</member>
        <member name="M:ffmpeg.av_popcount_c(System.UInt32)">
Count number of bits set to one in x
@param x value to count bits of
@return the number of bits set to one in x

</member>
        <member name="M:ffmpeg.av_ceil_log2_c(System.Int32)">
Compute ceil(log2(x)).
 * @param x value used to compute ceil(log2(x))
 * @return computed ceiling of log2(x)

</member>
        <member name="M:ffmpeg.av_clipd_c(System.Double,System.Double,System.Double)">
Clip a double value into the amin-amax range.
@param a value to clip
@param amin minimum value of the clip range
@param amax maximum value of the clip range
@return clipped value

</member>
        <member name="M:ffmpeg.av_clipf_c(System.Single,System.Single,System.Single)">
Clip a float value into the amin-amax range.
@param a value to clip
@param amin minimum value of the clip range
@param amax maximum value of the clip range
@return clipped value

</member>
        <member name="M:ffmpeg.av_sat_dadd32_c(System.Int32,System.Int32)">
 Add a doubled value to another value with saturation at both stages.

 @param  a first value
 @param  b value doubled and added to a
 @return sum with signed saturation

</member>
        <member name="M:ffmpeg.av_sat_add32_c(System.Int32,System.Int32)">
 Add two signed 32-bit values with saturation.

 @param  a one value
 @param  b another value
 @return sum with signed saturation

</member>
        <member name="M:ffmpeg.av_mod_uintp2_c(System.UInt32,System.UInt32)">
Clear high bits from an unsigned integer starting with specific bit position
@param  a value to clip
@param  p bit position to clip at
@return clipped value

</member>
        <member name="M:ffmpeg.av_clip_uintp2_c(System.Int32,System.Int32)">
Clip a signed integer to an unsigned power of two range.
@param  a value to clip
@param  p bit position to clip at
@return clipped value

</member>
        <member name="M:ffmpeg.av_clip_intp2_c(System.Int32,System.Int32)">
Clip a signed integer into the -(2^p),(2^p-1) range.
@param  a value to clip
@param  p bit position to clip at
@return clipped value

</member>
        <member name="M:ffmpeg.av_clipl_int32_c(System.Int64)">
Clip a signed 64-bit integer value into the -2147483648,2147483647 range.
@param a value to clip
@return clipped value

</member>
        <member name="M:ffmpeg.av_clip_int16_c(System.Int32)">
Clip a signed integer value into the -32768,32767 range.
@param a value to clip
@return clipped value

</member>
        <member name="M:ffmpeg.av_clip_uint16_c(System.Int32)">
Clip a signed integer value into the 0-65535 range.
@param a value to clip
@return clipped value

</member>
        <member name="M:ffmpeg.av_clip_int8_c(System.Int32)">
Clip a signed integer value into the -128,127 range.
@param a value to clip
@return clipped value

</member>
        <member name="M:ffmpeg.av_clip_uint8_c(System.Int32)">
Clip a signed integer value into the 0-255 range.
@param a value to clip
@return clipped value

</member>
        <member name="M:ffmpeg.av_clip64_c(System.Int64,System.Int64,System.Int64)">
Clip a signed 64bit integer value into the amin-amax range.
@param a value to clip
@param amin minimum value of the clip range
@param amax maximum value of the clip range
@return clipped value

</member>
        <member name="M:ffmpeg.av_clip_c(System.Int32,System.Int32,System.Int32)">
Clip a signed integer value into the amin-amax range.
@param a value to clip
@param amin minimum value of the clip range
@param amax maximum value of the clip range
@return clipped value

</member>
        <member name="M:ffmpeg.av_get_picture_type_char(ffmpeg.AVPictureType)">
 Return a single letter to describe the given picture type
 pict_type.

 @param[in] pict_type the picture type @return a single character
 representing the picture type, '?' if pict_type is unknown

</member>
        <member name="T:ffmpeg.AVPictureType">
 @defgroup lavu_const Constants
 @{

 @defgroup lavu_enc Encoding specific

 @note those definition should move to avcodec
 @{

 @}
 @defgroup lavu_time Timestamp specific

 FFmpeg internal timebase and timestamp definitions

 @{

 @brief Undefined timestamp value

 Usually reported by demuxer that work on containers that do not provide
 either pts or dts.

Internal time base represented as integer

Internal time base represented as fractional value

 @}
 @}
 @defgroup lavu_picture Image related

 AVPicture types, pixel formats and basic image planes manipulation.

 @{


Picture type of the frame.

</member>
        <member name="M:ffmpeg.av_get_media_type_string(ffmpeg.AVMediaType)">
Return a string describing the media_type enum, NULL if media_type
is unknown.

</member>
        <member name="T:ffmpeg.AVMediaType">
@}

@addtogroup lavu_media Media Type
@brief Media Type


 Type of codec implemented by the hardware accelerator.

 See AVMEDIA_TYPE_xxx


Get the type of the given codec.

</member>
        <member name="M:ffmpeg.avutil_license">
Return the libavutil license.

</member>
        <member name="M:ffmpeg.avutil_configuration">
Return the libavutil build-time configuration.

</member>
        <member name="M:ffmpeg.av_version_info">
Return an informative version string. This usually is the actual release
version number or a git commit description. This string has no fixed format
and can change any time. It should never be parsed by code.

</member>
        <member name="M:ffmpeg.avutil_version">
@file
@ingroup libavc
Libavcodec external API header

@file
external API header

 @mainpage

 @section ffmpeg_intro Introduction

 This document describes the usage of the different libraries
 provided by FFmpeg.

 @li @ref libavc "libavcodec" encoding/decoding library
 @li @ref lavfi "libavfilter" graph-based frame editing library
 @li @ref libavf "libavformat" I/O and muxing/demuxing library
 @li @ref lavd "libavdevice" special devices muxing/demuxing library
 @li @ref lavu "libavutil" common utility library
 @li @ref lswr "libswresample" audio resampling, format conversion and mixing
 @li @ref lpp  "libpostproc" post processing library
 @li @ref libsws "libswscale" color conversion and scaling library

 @section ffmpeg_versioning Versioning and compatibility

 Each of the FFmpeg libraries contains a version.h header, which defines a
 major, minor and micro version number with the
 <em>LIBRARYNAME_VERSION_{MAJOR,MINOR,MICRO}</em> macros. The major version
 number is incremented with backward incompatible changes - e.g. removing
 parts of the public API, reordering public struct members, etc. The minor
 version number is incremented for backward compatible API changes or major
 new features - e.g. adding a new public function or a new decoder. The micro
 version number is incremented for smaller changes that a calling program
 might still want to check for - e.g. changing behavior in a previously
 unspecified situation.

 FFmpeg guarantees backward API and ABI compatibility for each library as long
 as its major version number is unchanged. This means that no public symbols
 will be removed or renamed. Types and names of the public struct members and
 values of public macros and enums will remain the same (unless they were
 explicitly declared as not part of the public API). Documented behavior will
 not change.

 In other words, any correct program that works with a given FFmpeg snapshot
 should work just as well without any changes with any later snapshot with the
 same major versions. This applies to both rebuilding the program against new
 FFmpeg versions or to replacing the dynamic FFmpeg libraries that a program
 links against.

 However, new public symbols may be added and new members may be appended to
 public structs whose size is not part of public ABI (most public structs in
 FFmpeg). New macros and enum values may be added. Behavior in undocumented
 situations may change slightly (and be documented). All those are accompanied
 by an entry in doc/APIchanges and incrementing either the minor or micro
 version number.

 @defgroup lavu Common utility functions

 @brief
 libavutil contains the code shared across all the other FFmpeg
 libraries

 @note In order to use the functions provided by avutil you must include
 the specific header.

 @{

 @defgroup lavu_crypto Crypto and Hashing

 @{
 @}

 @defgroup lavu_math Maths
 @{

 @}

 @defgroup lavu_string String Manipulation

 @{

 @}

 @defgroup lavu_mem Memory Management

 @{

 @}

 @defgroup lavu_data Data Structures
 @{

 @}

 @defgroup lavu_audio Audio related

 @{

 @}

 @defgroup lavu_error Error Codes

 @{

 @}

 @defgroup lavu_log Logging Facility

 @{

 @}

 @defgroup lavu_misc Other

 @{

 @defgroup preproc_misc Preprocessor String Macros

 @{

 @}

 @defgroup version_utils Library Version Macros

 @{

 @}

@addtogroup lavu_ver
@{

Return the LIBAVUTIL_VERSION_INT constant.

</member>
        <member name="T:Mallenom.FFmpeg.OutputFormatsEnumerator">
            <summary>Перечислитель форматов записываемых потоков.</summary>
        </member>
        <member name="T:Mallenom.FFmpeg.StreamReaderThread">
            <summary>
Поток чтения и демультиплексирования
мультимедийного потока данных.
</summary>
        </member>
        <member name="T:Mallenom.FFmpeg.CodecsEnumerator">
            <summary>Перечислитель кодеков.</summary>
        </member>
        <member name="T:Mallenom.FFmpeg.HardwareAccelerationsEnumerator">
            <summary>Перечислитель модулей аппаратного ускорения.</summary>
        </member>
        <member name="T:Mallenom.FFmpeg.InputFormatsEnumerator">
            <summary>Перечислитель форматов читаемых потоков.</summary>
        </member>
        <member name="T:Mallenom.FFmpeg.VideoPacketHandler">
            <summary>Обрабатывает пакеты видеопотока.</summary>
        </member>
        <member name="T:Mallenom.FFmpeg.VideoDecoderThread">
            <summary>Поток декодирования видео.</summary>
        </member>
        <member name="M:Mallenom.FFmpeg.PacketQueues.Deactivate">
            <summary>Выключает все очереди пакетов.</summary>
            <remarks>Очереди перестают принимать и выдавать пакеты.</remarks>
        </member>
        <member name="M:Mallenom.FFmpeg.PacketQueues.TryEnqueue(ffmpeg.AVPacket*)">
            <summary>Добавляет пакет в подходящую очередь.</summary>
            <param name="packet">Добавляемый пакет.</param>
            <remarks>Права владения пакетом передаются очереди.</remarks>
        </member>
        <member name="M:Mallenom.FFmpeg.PacketQueues.GetQueue(System.Int32)">
            <summary>Возвращает очередь пакетов для потока с указанным индексом.</summary>
            <param name="streamIndex">Индекс потока.</param>
            <returns>
Очередь пакетов для потока с указанным индексом или <c>null</c>,
если очередь для потока не была создана.
</returns>
        </member>
        <member name="T:Mallenom.FFmpeg.PacketQueues">
            <summary>Очереди пакетов.</summary>
        </member>
        <member name="T:Mallenom.FFmpeg.PacketQueue">
            <summary>Очередь пакетов.</summary>
        </member>
        <member name="M:Mallenom.FFmpeg.VideoRenderer.RenderFrame(ffmpeg.AVFrame*)">
            <summary>Рендерит указанный кадр видеопотока.</summary>
            <param name="frame">Кадр для рендера.</param>
            <returns>
                <c>true</c>, если кадр был отрендерен, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.FFmpeg.VideoRenderer.#ctor(Mallenom.FFmpeg.IUnmanagedImageReceiver)">
            <summary>Создание <see cref="T:Mallenom.FFmpeg.VideoRenderer" />.</summary>
            <param name="imageReceiver">Пользовательский получатель изображений кадров.</param>
        </member>
        <member name="T:Mallenom.FFmpeg.VideoRenderer">
            <summary>Видеорендерер.</summary>
        </member>
        <member name="M:Mallenom.FFmpeg.IUnmanagedImageReceiver.Cancel">
            <summary>Сообщает об отмене записи изображения кадра.</summary>
        </member>
        <member name="M:Mallenom.FFmpeg.IUnmanagedImageReceiver.Commit">
            <summary>Сообщает об успешной записи изображения кадра.</summary>
        </member>
        <member name="M:Mallenom.FFmpeg.IUnmanagedImageReceiver.Prepare(Mallenom.FFmpeg.PixelFormat,System.Int32,System.Int32)">
            <summary>Запрашивает описание буфера для записи изображения кадра.</summary>
            <param name="pixelFormat">Формат пикселя кадра.</param>
            <param name="frameWidth">Ширина кадра.</param>
            <param name="frameHeight">Высота кадра.</param>
            <returns>Описание буфера для записи изображения или <c>null</c>, если запись невозможна.</returns>
            <remarks>
                <p>
Формат пикселя, ширина и высота кадра не обязаны совпадать с параметрами предоставленного буфера.
В случае необходимости изображение будет сконвертировано и/или отмасштабировано.
</p>
                <p>
Если метод возвращает не <c>null</c>, то после записи изображения будет
вызван метод <see cref="M:Mallenom.FFmpeg.IUnmanagedImageReceiver.Commit" /> или (в случае проблем с конвертацией) <see cref="M:Mallenom.FFmpeg.IUnmanagedImageReceiver.Cancel" />.
</p>
                <p>
Если метод возвращает <c>null</c>, то методы <see cref="M:Mallenom.FFmpeg.IUnmanagedImageReceiver.Commit" /> и <see cref="M:Mallenom.FFmpeg.IUnmanagedImageReceiver.Cancel" />
вызваны не будут.
</p>
            </remarks>
        </member>
        <member name="T:Mallenom.FFmpeg.IUnmanagedImageReceiver">
            <summary>Получатель unmanaged-изображения.</summary>
        </member>
        <member name="P:Mallenom.FFmpeg.UnmanagedImageBuffer.ScaleFlags">
            <summary>Возвращает флаги масштабирования изображения.</summary>
            <value>Флаги масштабирования изображения.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.UnmanagedImageBuffer.Height">
            <summary>Возвращает высоту изображения.</summary>
            <value>Высота изображения.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.UnmanagedImageBuffer.Width">
            <summary>Возвращает ширину изображения.</summary>
            <value>Ширина изображения.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.UnmanagedImageBuffer.PixelFormat">
            <summary>Возвращает формат пикселя изображения.</summary>
            <value>Формат пикселя изображения.</value>
        </member>
        <member name="T:Mallenom.FFmpeg.UnmanagedImageBuffer">
            <summary>Буфер для записи изображения кадра.</summary>
        </member>
        <member name="M:Mallenom.FFmpeg.Library.GetImageBufferSize(Mallenom.FFmpeg.PixelFormat,System.Int32,System.Int32,System.Int32)">
            <summary>Возвращает размер буфера для изображения.</summary>
            <param name="pixelFormat">Формат пикселя.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
            <param name="align">Выравнивание.</param>
        </member>
        <member name="M:Mallenom.FFmpeg.Library.GetErrorMessage(System.Int32)">
            <summary>Возвращает сообщение об ошибке.</summary>
            <param name="error">Код ошибки.</param>
            <returns>Сообщение об ошибке.</returns>
        </member>
        <member name="P:Mallenom.FFmpeg.Library.HardwareAccelerations">
            <summary>Возвращает репозиторий модулей аппаратного ускорения.</summary>
            <value>Репозиторий модулей аппаратного ускорения.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.Library.PixelFormatDescriptors">
            <summary>Возвращает репозиторий дескрипторов форматов пикселей.</summary>
            <value>Репозиторий дескрипторов форматов пикселей.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.Library.OutputFormats">
            <summary>Возвращает репозиторий форматов записываемых потоков.</summary>
            <value>Репозиторий форматов записываемых потоков.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.Library.InputFormats">
            <summary>Возвращает репозиторий форматов декодируемых потоков.</summary>
            <value>Репозиторий форматов декодируемых потоков.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.Library.Codecs">
            <summary>Возвращает репозиторий кодеков.</summary>
            <value>Репозиторий кодеков.</value>
        </member>
        <member name="M:Mallenom.FFmpeg.Library.#cctor">
            <summary>Инициализирует тип <see cref="T:Mallenom.FFmpeg.Library" />.</summary>
        </member>
        <member name="T:Mallenom.FFmpeg.Library">
            <summary>Предоставляет доступ к статическим частям библиотеки.</summary>
        </member>
        <member name="T:Mallenom.FFmpeg.HardwareAccelerationsRepository">
            <summary>Репозиторий модулей аппаратного ускорения.</summary>
        </member>
        <member name="M:Mallenom.FFmpeg.HardwareAcclerationInfo.ToString">
            <summary>Возвращает строковое представление данного экземпляра <see cref="T:Mallenom.FFmpeg.HardwareAcclerationInfo" />.</summary>
            <value>Строковое представление данного экземпляра <see cref="T:Mallenom.FFmpeg.HardwareAcclerationInfo" />.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.HardwareAcclerationInfo.PixelFormat">
            <summary>Возвращает формат пикселя, с которым работает модуль.</summary>
            <value>Формат пикселя, с которыми работает модуль.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.HardwareAcclerationInfo.CodecID">
            <summary>Возвращает идентификатор кодека, с которым работает модуль.</summary>
            <value>Идентификатор кодека, с которыми работает модуль.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.HardwareAcclerationInfo.MediaType">
            <summary>Возвращает тип данных, с которыми работает модуль.</summary>
            <value>Тип данных, с которыми работает модуль.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.HardwareAcclerationInfo.Name">
            <summary>Возвращает имя модуля аппаратного ускорения.</summary>
            <value>Имя модуля аппаратного ускорения.</value>
        </member>
        <member name="T:Mallenom.FFmpeg.HardwareAcclerationInfo">
            <summary>Сведения об аппаратном ускорении.</summary>
        </member>
        <member name="M:Mallenom.FFmpeg.PixelFormatDescriptorsRepository.GetDescriptor(Mallenom.FFmpeg.PixelFormat)">
            <summary>Возвращает дескриптор указанного формата пикселя.</summary>
            <param name="pixelFormat">Формат пикселя.</param>
            <returns>Дескриптор указанного формата пикселя.</returns>
        </member>
        <member name="T:Mallenom.FFmpeg.PixelFormatDescriptorsRepository">
            <summary>Репозитоий дескрипторов форматов пикселя.</summary>
        </member>
        <member name="M:Mallenom.FFmpeg.PixelFormatDescriptor.ToString">
            <summary>Возвращает строковое представление данного экземпляра <see cref="T:Mallenom.FFmpeg.PixelFormatDescriptor" />.</summary>
            <value>Строковое представление данного экземпляра <see cref="T:Mallenom.FFmpeg.PixelFormatDescriptor" />.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.PixelFormatDescriptor.Flags">
            <summary>Возвращает флаги формата.</summary>
            <value>Флаги формата.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.PixelFormatDescriptor.BitsPerPexel">
            <summary>Возвращает количество бит на пиксель.</summary>
            <value>Бит на пиксель.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.PixelFormatDescriptor.Components">
            <summary>Возвращает список дескрипторов комппонентов.</summary>
            <value>Список дескрипторов компонентов.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.PixelFormatDescriptor.Id">
            <summary>Возвращает идентификатор формата пикселя.</summary>
            <value>Идентфикатор формата пикселя.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.PixelFormatDescriptor.Aliases">
            <summary>Возвращает список имен-синонимов данного формата.</summary>
            <value>Список имен-синонимов данного формата.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.PixelFormatDescriptor.Name">
            <summary>Возвращает имя формата.</summary>
            <value>Имя формата.</value>
        </member>
        <member name="T:Mallenom.FFmpeg.PixelFormatDescriptor">
            <summary>Дескриптор формата пикселя.</summary>
        </member>
        <member name="P:Mallenom.FFmpeg.ComponentDescriptor.Depth">
            <summary>Number of bits in the component.</summary>
        </member>
        <member name="P:Mallenom.FFmpeg.ComponentDescriptor.Shift">
            <summary>
Number of least significant bits that must be shifted away
to get the value.
</summary>
        </member>
        <member name="P:Mallenom.FFmpeg.ComponentDescriptor.Offset">
            <summary>
Number of elements before the component of the first pixel.
Elements are bits for bitstream formats, bytes otherwise.
</summary>
        </member>
        <member name="P:Mallenom.FFmpeg.ComponentDescriptor.Step">
            <summary>
Number of elements between 2 horizontally consecutive pixels.
Elements are bits for bitstream formats, bytes otherwise.
</summary>
        </member>
        <member name="P:Mallenom.FFmpeg.ComponentDescriptor.Plane">
            <summary>Which of the 4 planes contains the component.</summary>
        </member>
        <member name="T:Mallenom.FFmpeg.ComponentDescriptor">
            <summary>Дескриптор компонента пикселя.</summary>
        </member>
        <member name="T:Mallenom.FFmpeg.PixelFormatFlags">
            <summary>Флаги формата пикселя.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.PixelFormatFlags.HasAlphaChhannel">
            <summary>The pixel format has an alpha channel.</summary>
            <remarks>
This is set on all formats that
support alpha in some way. The exception is AV_PIX_FMT_PAL8, which can
carry alpha as part of the palette. Details are explained in the
AVPixelFormat enum, and are also encoded in the corresponding
AVPixFmtDescriptor.
The alpha is always straight, never pre-multiplied.
If a codec or a filter does not support alpha, it should set all alpha to
opaque, or use the equivalent pixel formats without alpha component, e.g.
AV_PIX_FMT_RGB0 (or AV_PIX_FMT_RGB24 etc.) instead of AV_PIX_FMT_RGBA.
</remarks>
        </member>
        <member name="F:Mallenom.FFmpeg.PixelFormatFlags.HasPseudoPalette">
            <summary>
The pixel format is "pseudo-paletted". This means that it contains a
fixed palette in the 2nd plane but the palette is fixed/constant for each
PIX_FMT. This allows interpreting the data as if it was PAL8, which can
in some cases be simpler. Or the data can be interpreted purely based on
the pixel format without using the palette.
An example of a pseudo-paletted format is AV_PIX_FMT_GRAY8.
</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.PixelFormatFlags.RGB">
            <summary>The pixel format contains RGB-like data (as opposed to YUV/grayscale).</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.PixelFormatFlags.Planar">
            <summary>At least one pixel component is not in the first data plane.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.PixelFormatFlags.HardwareAccelerated">
            <summary>Pixel format is an HW accelerated format.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.PixelFormatFlags.BitStream">
            <summary>All values of a component are bit-wise packed end to end.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.PixelFormatFlags.HasPallette">
            <summary>Pixel format has a palette in data[1], values are indexes in this palette.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.PixelFormatFlags.BigEndian">
            <summary>Pixel format is big-endian.</summary>
        </member>
        <member name="T:Mallenom.FFmpeg.OutputFormatsRepository">
            <summary>Репозиторий форматов записываемых потоков.</summary>
        </member>
        <member name="M:Mallenom.FFmpeg.OutputFormatInfo.ToString">
            <summary>Возвращает строковое представление данного экземпляра <see cref="T:Mallenom.FFmpeg.OutputFormatInfo" />.</summary>
            <value>Строковое представление данного экземпляра <see cref="T:Mallenom.FFmpeg.OutputFormatInfo" />.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.OutputFormatInfo.DefaultSubtitleCodecId">
            <summary>Возвращает идентификатор кодека субтитров по умолчанию для данного формата.</summary>
            <value>Идентификатор кодека субтитров по умолчанию для данного формата.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.OutputFormatInfo.DefaultVideoCodecId">
            <summary>Возвращает идентификатор видеокодека по умолчанию для данного формата.</summary>
            <value>Идентификатор видеокодека по умолчанию для данного формата.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.OutputFormatInfo.DefaultAudioCodecId">
            <summary>Возвращает идентификатор аудиокодека по умолчанию для данного формата.</summary>
            <value>Идентификатор аудиокодека по умолчанию для данного формата.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.OutputFormatInfo.MimeType">
            <summary>Возвращает mime-тип, ассоциированный с данным форматом.</summary>
            <value>Mime-тип, ассоциированный с данным форматом.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.OutputFormatInfo.FileExtensions">
            <summary>Возвращает типичные расширения файлов, использующих данный формат.</summary>
            <value>Список типичных расширений файлов, использующих данный формат.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.OutputFormatInfo.Flags">
            <summary>Возвращает флаги формата.</summary>
            <value>Флаги формата.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.OutputFormatInfo.DisplayName">
            <summary>Возвращает отображаемое имя формата.</summary>
            <value>Отображаемое имя формата.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.OutputFormatInfo.Name">
            <summary>Возвращает короткое имя формата.</summary>
            <value>Короткое имя формата.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.OutputFormatInfo.Raw">
            <summary>Возвращает указатель на unmanaged-описание формата.</summary>
            <value>Указатель на unmanaged-описание формата.</value>
        </member>
        <member name="M:Mallenom.FFmpeg.OutputFormatInfo.#ctor(ffmpeg.AVOutputFormat*)">
            <summary>Создание <see cref="T:Mallenom.FFmpeg.OutputFormatInfo" />.</summary>
            <param name="format">Указатель на unmanaged-описание формата.</param>
        </member>
        <member name="T:Mallenom.FFmpeg.OutputFormatInfo">
            <summary>Информация о формате записываемого потока.</summary>
        </member>
        <member name="M:Mallenom.FFmpeg.InputFormatsRepository.TryFindFormat(System.String)">
            <summary>Ищет формат по короткому имени.</summary>
            <param name="name">Имя формата.</param>
            <returns>Формат с указанным именем или <c>null</c>, если формат не найден.</returns>
        </member>
        <member name="T:Mallenom.FFmpeg.InputFormatsRepository">
            <summary>Репозиторий форматов декодируемых потоков.</summary>
        </member>
        <member name="M:Mallenom.FFmpeg.CodecsRepository.GetEnumerator">
            <summary>Возвращает перечислитель кодеков.</summary>
            <returns>Перечислитель кодеков.</returns>
        </member>
        <member name="M:Mallenom.FFmpeg.CodecsRepository.TryFindEncoder(System.String)">
            <summary>Ищет энкодер по короткому имени.</summary>
            <param name="name">Имя кодека.</param>
            <returns>
Информация о кодеке c указанным именем или <c>null</c>,
если не удалось подобрать декодер.
</returns>
        </member>
        <member name="M:Mallenom.FFmpeg.CodecsRepository.TryFindEncoder(Mallenom.FFmpeg.CodecID)">
            <summary>Ищет подходящий энкодер для указанного идетификатора кодека.</summary>
            <param name="codecId">Идентификатор кодека.</param>
            <returns>
Информация о подходящем для кодирования кодеке или <c>null</c>,
если не удалось подобрать энкодер.
</returns>
        </member>
        <member name="M:Mallenom.FFmpeg.CodecsRepository.TryFindDecoder(System.String)">
            <summary>Ищет декодер по короткому имени.</summary>
            <param name="name">Имя кодека.</param>
            <returns>
Информация о кодеке c указанным именем или <c>null</c>,
если не удалось подобрать декодер.
</returns>
        </member>
        <member name="M:Mallenom.FFmpeg.CodecsRepository.TryFindDecoder(Mallenom.FFmpeg.CodecID)">
            <summary>Ищет подходящий декодер для указанного идетификатора кодека.</summary>
            <param name="codecId">Идентификатор кодека.</param>
            <returns>
Информация о подходящем для декодирования кодеке или <c>null</c>,
если не удалось подобрать декодер.
</returns>
        </member>
        <member name="M:Mallenom.FFmpeg.CodecsRepository.TryFindEncoder(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary>Ищет энкодер по короткому имени.</summary>
            <param name="name">Имя кодека.</param>
            <returns>
Информация о кодеке c указанным именем или <c>null</c>,
если не удалось подобрать декодер.
</returns>
        </member>
        <member name="M:Mallenom.FFmpeg.CodecsRepository.TryFindEncoder(ffmpeg.AVCodecID)">
            <summary>Ищет подходящий энкодер для указанного идетификатора кодека.</summary>
            <param name="codecId">Идентификатор кодека.</param>
            <returns>
Информация о подходящем для кодирования кодеке или <c>null</c>,
если не удалось подобрать энкодер.
</returns>
        </member>
        <member name="M:Mallenom.FFmpeg.CodecsRepository.TryFindDecoder(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary>Ищет декодер по короткому имени.</summary>
            <param name="name">Имя кодека.</param>
            <returns>
Информация о кодеке c указанным именем или <c>null</c>,
если не удалось подобрать декодер.
</returns>
        </member>
        <member name="M:Mallenom.FFmpeg.CodecsRepository.TryFindDecoder(ffmpeg.AVCodecID)">
            <summary>Ищет подходящий декодер для указанного идетификатора кодека.</summary>
            <param name="codecId">Идентификатор кодека.</param>
            <returns>
Информация о подходящем для декодирования кодеке или <c>null</c>,
если не удалось подобрать декодер.
</returns>
        </member>
        <member name="M:Mallenom.FFmpeg.CodecsRepository.GetCodecInfo(ffmpeg.AVCodec*)">
            <summary>Возвращает managed-обертку для указанного кодека.</summary>
            <param name="codec">Кодек.</param>
            <returns>Managed-представление кодека.</returns>
        </member>
        <member name="M:Mallenom.FFmpeg.CodecsRepository.#ctor">
            <summary>Создание <see cref="T:Mallenom.FFmpeg.CodecsRepository" />.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.CodecsRepository._lookup">
            <summary>Кэш managed-представлений кодеков.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.CodecsRepository._createCodecInfo">
            <summary>Делегат создания managed-представления кодека.</summary>
        </member>
        <member name="M:Mallenom.FFmpeg.CodecsRepository.CreateCodecInfo(System.IntPtr)">
            <summary>Создает managed-обертку для указанного кодека.</summary>
            <param name="raw">Указатель на кодек.</param>
            <returns>Созданное managed-представление кодека.</returns>
        </member>
        <member name="T:Mallenom.FFmpeg.CodecsRepository">
            <summary>Репозиторий кодеков.</summary>
        </member>
        <member name="M:Mallenom.FFmpeg.InputContextReader.ProcessNextPacket">
            <summary>Читает и обрабатывает следующий пакет.</summary>
            <returns>Результат обработки.</returns>
        </member>
        <member name="M:Mallenom.FFmpeg.InputContextReader.SeekZeroPosition">
            <summary>Выполняет переход в начало потока.</summary>
            <returns>Результат обработки.</returns>
            <summary>Выполняет переход в начало потока.</summary>
            <returns>Результат обработки.</returns>
        </member>
        <member name="P:Mallenom.FFmpeg.InputContextReader.Context">
            <summary>Возвращает контекст демультиплексирования потока.</summary>
            <value>Контекст демультиплексирования потока.</value>
        </member>
        <member name="T:Mallenom.FFmpeg.InputContextReader">
            <summary>Объект для управления чтением и обработкой пакетов из потока.</summary>
        </member>
        <member name="M:Mallenom.FFmpeg.InputContext.Open">
            <summary>Открывает поток для чтения.</summary>
            <returns>Объект для управления считыванием данных.</returns>
        </member>
        <member name="M:Mallenom.FFmpeg.InputContext.TryFindStream(Mallenom.FFmpeg.MediaType)">
            <summary>Ищет наиболее подходящий поток указанного типа.</summary>
            <param name="mediaType">Тип данных потока.</param>
            <returns>Найденный поток или <c>null</c>, если найти не удалось.</returns>
        </member>
        <member name="P:Mallenom.FFmpeg.InputContext.IsRealtime">
            <summary>Возвращает флаг потока реального времени.</summary>
            <value>
                <c>true</c>, если поток идет в еальном времени, иначе - <c>false</c>.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.InputContext.Streams">
            <summary>Возвращает коллекцию демультиплексированных потоков.</summary>
            <value>Коллекция демультиплексированных потоков.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.InputContext.InputFormat">
            <summary>Возвращает информацию о формате читаемого потока.</summary>
            <value>Информация о формате читаемого видеопотока.</value>
        </member>
        <member name="M:Mallenom.FFmpeg.InputContext.#ctor(System.String,Mallenom.FFmpeg.InputContextOptions)">
            <summary>Создание <see cref="T:Mallenom.FFmpeg.InputContext" />.</summary>
            <param name="streamUrl">URL потока данных.</param>
            <param name="options">Необязательные параметры работы с потоком данных.</param>
        </member>
        <member name="F:Mallenom.FFmpeg.InputContext._defaultOptions">
            <summary>Параметры работы по умолчанию.</summary>
        </member>
        <member name="T:Mallenom.FFmpeg.InputContext">
            <summary>Контекст чтения и демультиплексирования потока данных.</summary>
        </member>
        <member name="M:Mallenom.FFmpeg.IInputContextReader.ProcessNextPacket">
            <summary>Читает и обрабатывает следующий пакет.</summary>
            <returns>Результат обработки.</returns>
        </member>
        <member name="M:Mallenom.FFmpeg.IInputContextReader.SeekZeroPosition">
            <summary>Выполняет переход в начало потока.</summary>
            <returns>Результат обработки.</returns>
        </member>
        <member name="P:Mallenom.FFmpeg.IInputContextReader.Context">
            <summary>Возвращает контекст демультиплексирования потока.</summary>
            <value>Контекст демультиплексирования потока.</value>
        </member>
        <member name="T:Mallenom.FFmpeg.IInputContextReader">
            <summary>Читатель мультимедийного потока.</summary>
        </member>
        <member name="T:Mallenom.FFmpeg.ProcessPacketResult">
            <summary>Результаты обработки пакета.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.ProcessPacketResult.Aborted">
            <summary>Обработка прервана по запросу.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.ProcessPacketResult.EndOfStreamReached">
            <summary>Достигнут конец потока.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.ProcessPacketResult.Discarded">
            <summary>Пакет отброшен.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.ProcessPacketResult.ProcessedNoResult">
            <summary>Пакет обработан, но результата нет.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.ProcessPacketResult.Processed">
            <summary>Пакет обработан.</summary>
        </member>
        <member name="T:Mallenom.FFmpeg.InputStreamsCollection">
            <summary>Коллекция потоков демультиплекора.</summary>
        </member>
        <member name="M:Mallenom.FFmpeg.InputMediaStream.Open(Mallenom.FFmpeg.PacketHandler,Mallenom.FFmpeg.InputMediaStreamOpenOptions)">
            <summary>Подготавливает поток для декодирования.</summary>
            <param name="handler">Обработчик пакетов.</param>
            <param name="options">Параметры открытия потока.</param>
        </member>
        <member name="M:Mallenom.FFmpeg.InputMediaStream.Open(Mallenom.FFmpeg.PacketHandler)">
            <summary>Подготавливает поток для декодирования.</summary>
            <param name="handler">Обработчик пакетов.</param>
        </member>
        <member name="M:Mallenom.FFmpeg.InputMediaStream.ToString">
            <summary>Возвращает строковое представление данного экземпляра <see cref="T:Mallenom.FFmpeg.InputMediaStream" />.</summary>
            <value>Строковое представление данного экземпляра <see cref="T:Mallenom.FFmpeg.InputMediaStream" />.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.InputMediaStream.Metadata">
            <summary>Возвращает метаданные потока.</summary>
            <value>Метаданные потока.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.InputMediaStream.Codec">
            <summary>Возвращает информацию об используемом кодеке.</summary>
            <value>Информация об используемом кодеке или <c>null</c>, если поток не открыт для декодирования.</value>
        </member>
        <member name="T:Mallenom.FFmpeg.InputMediaStream">
            <summary>Поток.</summary>
        </member>
        <member name="P:Mallenom.FFmpeg.InputMediaStreamOpenOptions.Discard">
            <summary>Возвращает и устанавливает отбрасываемые кадры.</summary>
            <value>Отбрасываемые кадры.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.InputMediaStreamOpenOptions.Codec">
            <summary>Возвращает и устанавливает кодек для декодирования потока.</summary>
            <value>Кодек для декодирования потока или <c>null</c> для автоопределения.</value>
        </member>
        <member name="M:Mallenom.FFmpeg.InputMediaStreamOpenOptions.#ctor">
            <summary>Создание <see cref="T:Mallenom.FFmpeg.InputMediaStreamOpenOptions" />.</summary>
        </member>
        <member name="T:Mallenom.FFmpeg.InputMediaStreamOpenOptions">
            <summary>Опции открытия потока для чтения.</summary>
        </member>
        <member name="M:Mallenom.FFmpeg.PacketHandler.Attach(Mallenom.FFmpeg.InputMediaStream)">
            <summary>Связывает обработчик с потоком, данные которого будут обрабатываться.</summary>
            <param name="stream">Поток, с которым будет связан обработчик.</param>
        </member>
        <member name="M:Mallenom.FFmpeg.PacketHandler.CanAttach(Mallenom.FFmpeg.InputMediaStream)">
            <summary>Проверяет, может ли обработчик быть подключен к указанному потоку.</summary>
            <param name="stream">Поток, к которому подключается обработчик.</param>
            <returns>
                <c>trueM</c>, если обработчик может быть подключен к указанному потоку, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.FFmpeg.PacketHandler.Handle(ffmpeg.AVPacket*)">
            <summary>Обрабатываает пакет.</summary>
            <param name="packet">Пакет для обработки.</param>
        </member>
        <member name="M:Mallenom.FFmpeg.PacketHandler.HandleCore(ffmpeg.AVPacket*)">
            <summary>Обрабатываает пакет.</summary>
            <param name="packet">Пакет для обработки.</param>
        </member>
        <member name="P:Mallenom.FFmpeg.PacketHandler.Stream">
            <summary>Возвращает поток, к которому подключен данный обработчик.</summary>
            <value>Поток, к которому подключен данный обработчик.</value>
        </member>
        <member name="M:Mallenom.FFmpeg.PacketHandler.#ctor">
            <summary>Создание <see cref="T:Mallenom.FFmpeg.PacketHandler" />.</summary>
        </member>
        <member name="T:Mallenom.FFmpeg.PacketHandler">
            <summary>Обработчик пакетов.</summary>
        </member>
        <member name="T:Mallenom.FFmpeg.NativeReadOnlyDictionary">
            <summary>Предоставляет доступ к данным в словаре AVDictionary.</summary>
        </member>
        <member name="M:Mallenom.FFmpeg.CodecInfo.ToString">
            <summary>Возвращает строковое представление данного экземпляра <see cref="T:Mallenom.FFmpeg.CodecInfo" />.</summary>
            <value>Строковое представление данного экземпляра <see cref="T:Mallenom.FFmpeg.CodecInfo" />.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.CodecInfo.SupportedSampleRates">
            <summary>Возвращает список поддерживаемых частот сэмплов.</summary>
            <value>Список поддерживаемых частот сэмплов.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.CodecInfo.SupportedFrameRates">
            <summary>Возвращает список поддерживаемых частот кадров.</summary>
            <value>Список поддерживаемых частот кадров.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.CodecInfo.SampleFormats">
            <summary>Возвращает список поддерживаемых форматов звуковых сэмплов.</summary>
            <value>Список поддерживаемых форматов звуковых сэмплов.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.CodecInfo.PixelFormats">
            <summary>Возвращает список поддерживаемых форматов пикселя.</summary>
            <value>Список поддерживаемых форматов пикселя.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.CodecInfo.Profiles">
            <summary>Возвращает список профилей кодека.</summary>
            <value>Список профилей кодека.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.CodecInfo.Capabilities">
            <summary>Возвращаеть флаги возможностей кодека.</summary>
            <value>Флаги возможностей кодека.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.CodecInfo.MediaType">
            <summary>Возвращает тип данных, с которыми работает кодек.</summary>
            <value>Тип данных, с которыми работает кодек.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.CodecInfo.ID">
            <summary>Возвращает идентификатор кодека.</summary>
            <value>Идентификатор кодека.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.CodecInfo.IsEncoder">
            <summary>Возвращает флаг, указаывающий на наличие энкодера в кодеке.</summary>
            <value>
                <c>true</c>, если кодек является энкодером, иначе - <c>false</c>.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.CodecInfo.IsDecoder">
            <summary>Возвращает флаг, указаывающий на наличие декодера в кодеке.</summary>
            <value>
                <c>true</c>, если кодек является декодером, иначе - <c>false</c>.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.CodecInfo.DisplayName">
            <summary>Возвращает отображаемое имя кодека.</summary>
            <value>Отображаемое имя кодека.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.CodecInfo.Name">
            <summary>Возвращает короткое имя кодека.</summary>
            <value>Короткое имя кодека.</value>
        </member>
        <member name="T:Mallenom.FFmpeg.CodecInfo">
            <summary>Информация о кодеке.</summary>
        </member>
        <member name="T:Mallenom.FFmpeg.CodecCapabilities">
            <summary>Возможности кодека.</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Losless">
            <summary>Codec is lossless.</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.IntraOnly">
            <summary>Codec is intra only.</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.VariableFrameSize">
            <summary>Audio encoder supports receiving a different number of samples in each call.</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.AutoThreads">
            <summary>Codec supports avctx-&gt;thread_count == 0 (auto).</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.ParametersChange">
            <summary>Codec supports changed parameters at any point.</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.SliceThreads">
            <summary>Codec supports slice-based (or partition-based) multithreading.</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.FrameThreads">
            <summary>Codec supports frame-level multithreading.</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.ChannelConfiguration">
            <summary>Codec should fill in channel configuration and samplerate instead of container.</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Experimental">
            <summary>Codec is experimental and is thus avoided in favor of non experimental encoders.</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Subframes">
Codec can output multiple frames per AVPacket
Normally demuxers return one frame at a time, demuxers which do not do
are connected to a parser to split what they return into proper frames.
This flag is reserved to the very rare category of codecs which have a
bitstream that cannot be split into frames without timeconsuming
operations like full decoding. Demuxers carring such bitstreams thus
may return multiple frames in a packet. This has many disadvantages like
prohibiting stream copy in many cases thus it should only be considered
as a last resort.

</member>
        <member name="F:&lt;unknown type&gt;.HardwareAccelerationVDPAU">
            <summary>Codec can export data for HW decoding (VDPAU).</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.SmallLastFrame">
Codec can be fed a final frame with a smaller size.
This can be used to prevent truncation of the last audio samples.

</member>
        <member name="F:&lt;unknown type&gt;.Delay">
 Encoder or decoder requires flushing with NULL input at the end in order to
 give the complete and correct output.

 NOTE: If this flag is not set, the codec is guaranteed to never be fed with
       with NULL data. The user can still send NULL data to the public encode
       or decode function, but libavcodec will not pass it along to the codec
       unless this flag is set.

 Decoders:
 The decoder has a non-zero delay and needs to be fed with avpkt-&gt;data=NULL,
 avpkt-&gt;size=0 at the end to get the delayed data until the decoder no longer
 returns frames.

 Encoders:
 The encoder needs to be fed with NULL data at the end of encoding until the
 encoder no longer returns data.

 NOTE: For encoders implementing the AVCodec.encode2() function, setting this
       flag also means that the encoder must set the pts and duration for
       each output packet. If this flag is not set, the pts and duration will
       be determined by libavcodec from the input frame.

</member>
        <member name="F:&lt;unknown type&gt;.DR1">
Codec uses get_buffer() for allocating buffers and supports custom allocators.
If not set, it might not use get_buffer() at all or use operations that
assume the buffer was allocated by avcodec_default_get_buffer.

</member>
        <member name="F:&lt;unknown type&gt;.DrawHorizontalBand">
            <summary>Decoder can use draw_horiz_band callback.</summary>
        </member>
        <member name="T:Mallenom.FFmpeg.SampleFormat">
            <summary>Формат звукового сэмпла.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.SampleFormat.DBLP">
            <summary>Double, planar.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.SampleFormat.FLTP">
            <summary>Float, planar.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.SampleFormat.S32P">
            <summary>Signed 32 bits, planar.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.SampleFormat.S16P">
            <summary>Signed 16 bits, planar.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.SampleFormat.U8P">
            <summary>Unsigned 8 bits, planar.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.SampleFormat.DBL">
            <summary>Double.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.SampleFormat.FLT">
            <summary>Float.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.SampleFormat.S32">
            <summary>Signed 32 bits.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.SampleFormat.S16">
            <summary>Signed 16 bits.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.SampleFormat.U8">
            <summary>Unsigned 8 bits.</summary>
        </member>
        <member name="T:Mallenom.FFmpeg.PixelFormat">
            <summary>Форматы пикселя.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.PixelFormat.YUVJ444P">
            <summary>Planar YUV 4:4:4, 24bpp, full scale (JPEG), deprecated in favor of YUV444P and setting color_range.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.PixelFormat.YUVJ422P">
            <summary>Planar YUV 4:2:2, 16bpp, full scale (JPEG), deprecated in favor of YUV422P and setting color_range.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.PixelFormat.YUVJ420P">
            <summary>Planar YUV 4:2:0, 12bpp, full scale (JPEG), deprecated in favor of YUV420P and setting color_range.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.PixelFormat.PAL8">
            <summary>8 bit with RGB32 palette.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.PixelFormat.MONOBLACK">
            <summary>Y, 1bpp, 0 is black, 1 is white, in each byte pixels are ordered from the msb to the lsb.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.PixelFormat.MONOWHITE">
            <summary>Y, 1bpp, 0 is white, 1 is black, in each byte pixels are ordered from the msb to the lsb.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.PixelFormat.GRAY8">
            <summary>Y, 8bpp.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.PixelFormat.YUV411P">
            <summary>Planar YUV 4:1:1, 12bpp, (1 Cr &amp; Cb sample per 4x1 Y samples).</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.PixelFormat.YUV410P">
            <summary>Planar YUV 4:1:0,  9bpp, (1 Cr &amp; Cb sample per 4x4 Y samples).</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.PixelFormat.YUV444P">
            <summary>Planar YUV 4:4:4, 24bpp, (1 Cr &amp; Cb sample per 1x1 Y samples).</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.PixelFormat.YUV422P">
            <summary>Planar YUV 4:2:2, 16bpp, (1 Cr &amp; Cb sample per 2x1 Y samples).</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.PixelFormat.BGR24">
            <summary>Packed RGB 8:8:8, 24bpp, BGRBGR...</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.PixelFormat.RGB24">
            <summary>Packed RGB 8:8:8, 24bpp, RGBRGB...</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.PixelFormat.YUYV422">
            <summary>Packed YUV 4:2:2, 16bpp, Y0 Cb Y1 Cr</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.PixelFormat.YUV420P">
            <summary>Planar YUV 4:2:0, 12bpp, (1 Cr &amp; Cb sample per 2x2 Y samples).</summary>
        </member>
        <member name="M:Mallenom.FFmpeg.CodecProfileInfo.ToString">
            <summary>Возвращает строковое представление данного экземпляра <see cref="T:Mallenom.FFmpeg.CodecProfileInfo" />.</summary>
            <value>Строковое представление данного экземпляра <see cref="T:Mallenom.FFmpeg.CodecProfileInfo" />.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.CodecProfileInfo.Name">
            <summary>Возвращает имя профиля.</summary>
            <value>Имя профиля.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.CodecProfileInfo.Id">
            <summary>Возвращает идентификатор профиля.</summary>
            <value>Идентификатор профиля.</value>
        </member>
        <member name="T:Mallenom.FFmpeg.CodecProfileInfo">
            <summary>Информация о профиле кодека.</summary>
        </member>
        <member name="P:Mallenom.FFmpeg.MediaStream.FrameRate">
            <summary>Возвращает FPS потока.</summary>
            <value>FPS потока или 0/1, если FPS неизвестен.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.MediaStream.Discard">
            <summary>Возвращает и устанавливает тип отбрасываемых кадров.</summary>
            <value>Тип отбрасываемых кадров.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.MediaStream.FramesCount">
            <summary>Возвращает количество кадров в потоке.</summary>
            <value>Количество кадров в потоке или <c>0</c>, если оно неизвестно.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.MediaStream.CodecContext">
            <summary>Возвращает контекст кодека.</summary>
            <value>Контекст кодека.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.MediaStream.Index">
            <summary>Возвращает индекс потока.</summary>
            <value>Индекс потока.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.MediaStream.Id">
            <summary>Возвращает идентификатор потока.</summary>
            <value>Идентификатор потока.</value>
            <remarks>Зависит от формата потока данных.</remarks>
        </member>
        <member name="T:Mallenom.FFmpeg.MediaStream">
            <value>Поток.</value>
        </member>
        <member name="T:Mallenom.FFmpeg.Discard">
            <summary>Отбрасываемые кадры.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.Discard.All">
            <summary>Discard all.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.Discard.NonKey">
            <summary>Вiscard all frames except keyframes.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.Discard.NonIntra">
            <summary>Discard all non intra frames.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.Discard.Bidirectional">
            <summary>Discard all bidirectional frames.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.Discard.NonRef">
            <summary>Discard all non reference.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.Discard.Default">
            <summary>Discard useless packets like 0 size packets in avi.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.Discard.None">
            <summary>Discard nothing.</summary>
        </member>
        <member name="P:Mallenom.FFmpeg.CodecContext.Flags2">
            <summary>Возвращает и устанавливает флаги кодека.</summary>
            <value>Флаги кодека.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.CodecContext.Flags">
            <summary>Возвращает и устанавливает флаги кодека.</summary>
            <value>Флаги кодека.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.CodecContext.IsOpen">
            <summary>Возвращает флаг открытого контекста.</summary>
            <value>
                <c>true</c>, если контекст открыт, иначе - <c>false</c>.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.CodecContext.CodecID">
            <summary>Возвращает идентификатор совместимого кодека.</summary>
            <value>Идентификатор совместимого кодека.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.CodecContext.MediaType">
            <summary>Возвращает тип данных потока.</summary>
            <value>Тип данных потока.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.CodecContext.Raw">
            <summary>Возвращает указатель на unmanaged контекст кодека.</summary>
            <value>Указатель на контекст кодека.</value>
        </member>
        <member name="T:Mallenom.FFmpeg.CodecContext">
            <summary>Контекст кодека демультиплексированного потока.</summary>
        </member>
        <member name="T:Mallenom.FFmpeg.CodecFlags2">
            <summary>Флаги кодека.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.CodecFlags2.SkipManual">
            <summary>Do not skip samples and export skip information as frame side data.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.CodecFlags2.ExportMVS">
            <summary>Export motion vectors through frame side data.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.CodecFlags2.ShowAll">
            <summary>Show all frames before the first keyframe.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.CodecFlags2.IgnoreCrop">
            <summary>Discard cropping information from SPS.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.CodecFlags2.Chunks">
            <summary>
Input bitstream might be truncated at a packet boundaries
instead of only at frame boundaries.
</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.CodecFlags2.DropFrameTimecode">
            <summary>timecode is in drop frame format. DEPRECATED!!!!</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.CodecFlags2.LocalHeader">
            <summary>Place global headers at every keyframe instead of in extradata.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.CodecFlags2.NoOutput">
            <summary>Skip bitstream encoding.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.CodecFlags2.Fast">
            <summary>Allow non spec compliant speedup tricks.</summary>
        </member>
        <member name="T:Mallenom.FFmpeg.CodecFlags">
            <summary>Флаги кодека.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.CodecFlags.InterlacedME">
            <summary>Interlaced motion estimation.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.CodecFlags.ACPrediction">
            <summary>H.263 advanced intra coding / MPEG-4 AC prediction.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.CodecFlags.BitExact">
            <summary>Use only bitexact stuff (except (I)DCT).</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.CodecFlags.GlobalHeader">
            <summary>Place global headers in extradata instead of every keyframe.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.CodecFlags.LowDelay">
            <summary>Force low delay.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.CodecFlags.InterlacedDCT">
            <summary>Use interlaced DCT.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.CodecFlags.Truncated">
            <summary>
Input bitstream might be truncated at a random location
instead of only at frame boundaries.
</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.CodecFlags.PSNR">
            <summary>error[?] variables will be set during encoding.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.CodecFlags.Gray">
            <summary>Only decode/encode grayscale.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.CodecFlags.LoopFilter">
            <summary>loop filter.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.CodecFlags.Pass2">
            <summary>Use internal 2pass ratecontrol in second pass mode.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.CodecFlags.Pass1">
            <summary>Use internal 2pass ratecontrol in first pass mode.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.CodecFlags.QPEL">
            <summary>Use qpel MC.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.CodecFlags.OutputCorruptedFrames">
            <summary>Output even those frames that might be corrupted.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.CodecFlags._4MV">
            <summary>4 MV per MB allowed / advanced prediction for H.263.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.CodecFlags.QScale">
            <summary>Use fixed qscale.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.CodecFlags.Unaligned">
            <summary>
Allow decoders to produce frames with data planes that are not aligned
to CPU requirements (e.g. due to cropping).
</summary>
        </member>
        <member name="M:Mallenom.FFmpeg.Rational.ToString">
            <summary>Возвращает строковое представление данного значения <see cref="T:Mallenom.FFmpeg.Rational" />.</summary>
            <value>Строковое представление данного значения <see cref="T:Mallenom.FFmpeg.Rational" />.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.Rational.Denominator">
            <summary>Возвращает знаменатель.</summary>
            <value>Знаменатель.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.Rational.Numerator">
            <summary>Возвращает числитель.</summary>
            <value>Числитель.</value>
        </member>
        <member name="F:Mallenom.FFmpeg.Rational._denominator">
            <summary>Знаменатель.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.Rational._numerator">
            <summary>Числитель.</summary>
        </member>
        <member name="M:Mallenom.FFmpeg.Rational.AreEquivalent(Mallenom.FFmpeg.Rational,Mallenom.FFmpeg.Rational)">
            <summary>Проверяет два дробных числа на равнозначность.</summary>
            <param name="left">Первое число.</param>
            <param name="right">Второе число.</param>
            <returns>
                <c>true</c>, если числа равнозначны, иначе - <c>false</c>.</returns>
        </member>
        <member name="P:Mallenom.FFmpeg.Rational.Infinity">
            <summary>Возвращает бесконечность.</summary>
            <value>Бесконечность.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.Rational.NaN">
            <summary>Возвращает неопределенное число.</summary>
            <value>Неопределенное число.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.Rational.Zero">
            <summary>Возвращает ноль.</summary>
            <value>Ноль.</value>
        </member>
        <member name="T:Mallenom.FFmpeg.Rational">
            <summary>Дробное число.</summary>
        </member>
        <member name="T:Mallenom.FFmpeg.Workarounds">
            <summary>Механизмы компенсации ошибок.</summary>
        </member>
        <member name="T:Mallenom.FFmpeg.CodecID">
            <summary>Идентификаторы кодеков.</summary>
        </member>
        <member name="T:Mallenom.FFmpeg.MediaType">
            <summary>Тип данных.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.MediaType.Attachment">
            <summary>Данные.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.MediaType.Subtitle">
            <summary>Субтитры.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.MediaType.Data">
            <summary>Данные.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.MediaType.Audio">
            <summary>Аудио.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.MediaType.Video">
            <summary>Видео.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.MediaType.Unknown">
            <summary>Тип данных неизвестен.</summary>
        </member>
        <member name="M:Mallenom.FFmpeg.InputContextOptions.GetOptions">
            <summary>Возвращает unmanaged-словарь параметров.</summary>
            <returns>Unmanaged-словарь параметров.</returns>
        </member>
        <member name="M:Mallenom.FFmpeg.InputContextOptions.GetParameterValue(System.String)">
            <summary>Возвращает значение параметра.</summary>
            <param name="key">Ключ параметра.</param>
            <returns>Значение параметра.</returns>
        </member>
        <member name="M:Mallenom.FFmpeg.InputContextOptions.SetParameterValue(System.String,System.String)">
            <summary>Устанавливает значение параметра.</summary>
            <param name="key">Ключ параметра.</param>
            <param name="value">Значение параметра.</param>
        </member>
        <member name="P:Mallenom.FFmpeg.InputContextOptions.Flags">
            <summary>Возвращает и устанавливает флаги потока данных.</summary>
            <value>Флаги потока данных.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.InputContextOptions.InputFormat">
            <summary>Возвращает и устанавливает формат потока данных.</summary>
            <value>Формат потока данных. Если <c>null</c>, то происходит автоопределение.</value>
        </member>
        <member name="M:Mallenom.FFmpeg.InputContextOptions.#ctor">
            <summary>Создание <see cref="T:Mallenom.FFmpeg.InputContextOptions" />.</summary>
        </member>
        <member name="T:Mallenom.FFmpeg.InputContextOptions">
            <summary>Параметры создания контекста чтения потока данных.</summary>
        </member>
        <member name="T:Mallenom.FFmpeg.FormatContextFlags">
            <summary>Флаги контекста работы с потоком.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.FormatContextFlags.FastSeek">
            <summary>Enable fast, but inaccurate seeks for some formats.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.FormatContextFlags.KeepSideData">
            <summary>Don't merge side data but keep it separate.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.FormatContextFlags.PrivateOptions">
            <summary>Enable use of private options by delaying codec open (this could be made default once all code is converted).</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.FormatContextFlags.SortDTS">
            <summary>try to interleave outputted packets by dts (using this flag can slow demuxing down).</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.FormatContextFlags.MP4A_LATM">
            <summary>Enable RTP MP4A-LATM payload</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.FormatContextFlags.BitExact">
            <summary>When muxing, try to avoid writing any random/volatile data to the output.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.FormatContextFlags.FlushPackets">
            <summary>Flush the AVIOContext every packet.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.FormatContextFlags.DiscardCorrupted">
            <summary>Discard frames marked corrupted.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.FormatContextFlags.CustomIO">
            <summary>The caller has supplied a custom AVIOContext, don't avio_close() it.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.FormatContextFlags.NoBuffer">
            <summary>Do not buffer frames when possible.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.FormatContextFlags.NoParse">
            <summary>Do not use AVParsers, you also must set AVFMT_FLAG_NOFILLIN as the fillin code works on frames and no parsing -&gt; no frames. Also seeking to frames can not work if parsing to find frame boundaries has been disabled</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.FormatContextFlags.NoFilling">
            <summary>Do not infer any values from other values, just return what is stored in the container.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.FormatContextFlags.IgnoreDTS">
            <summary>Ignore DTS on frames that contain both DTS &amp; PTS.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.FormatContextFlags.NonBlocking">
            <summary>Do not block when reading packets from input.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.FormatContextFlags.IgnoreIndex">
            <summary>Ignore index.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.FormatContextFlags.GenerateMissingPTS">
            <summary>Generate missing pts even if it requires parsing future frames.</summary>
        </member>
        <member name="M:Mallenom.FFmpeg.InputFormatInfo.ToString">
            <summary>Возвращает строковое представление данного экземпляра <see cref="T:Mallenom.FFmpeg.InputFormatInfo" />.</summary>
            <value>Строковое представление данного экземпляра <see cref="T:Mallenom.FFmpeg.InputFormatInfo" />.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.InputFormatInfo.MimeTypes">
            <summary>Возвращает mime-типы, ассоциированные с данным форматом.</summary>
            <value>Список mime-типов, ассоциированных с данным форматом.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.InputFormatInfo.FileExtensions">
            <summary>Возвращает типичные расширения файлов, использующих данный формат.</summary>
            <value>Список типичных расширений файлов, использующих данный формат.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.InputFormatInfo.Flags">
            <summary>Возвращает флаги формата.</summary>
            <value>Флаги формата.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.InputFormatInfo.DisplayName">
            <summary>Возвращает отображаемое имя формата.</summary>
            <value>Отображаемое имя формата.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.InputFormatInfo.Name">
            <summary>Возвращает короткое имя формата.</summary>
            <value>Короткое имя формата.</value>
        </member>
        <member name="P:Mallenom.FFmpeg.InputFormatInfo.Raw">
            <summary>Возвращает указатель на unmanaged-описание формата.</summary>
            <value>Указатель на unmanaged-описание формата.</value>
        </member>
        <member name="M:Mallenom.FFmpeg.InputFormatInfo.#ctor(ffmpeg.AVInputFormat*)">
            <summary>Создание <see cref="T:Mallenom.FFmpeg.InputFormatInfo" />.</summary>
            <param name="format">Указатель на unmanaged-описание формата.</param>
        </member>
        <member name="T:Mallenom.FFmpeg.InputFormatInfo">
            <summary>Информация о формате читаемого потока.</summary>
        </member>
        <member name="T:Mallenom.FFmpeg.FormatFlags">
            <summary>Флаги формата потока данных.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.FormatFlags.SeekToPTS">
            <summary>Seeking is based on PTS.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.FormatFlags.AllowNegativeTimestamps">
            <summary>Format allows muxing negative timestamps.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.FormatFlags.AllowNonstrictTimestamps">
            <summary>Format does not require strictly increasing timestamps, but they must still be monotonic.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.FormatFlags.AllowFlush">
            <summary>Format allows flushing. If not set, the muxer will not receive a NULL packet in the write_packet function.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.FormatFlags.NoByteSeek">
            <summary>Format does not allow seeking by bytes.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.FormatFlags.NoGenericSearch">
            <summary>Format does not allow to fall back on generic search.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.FormatFlags.NoBinarySearch">
            <summary>Format does not allow to fall back on binary search via read_timestamp.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.FormatFlags.NoStreams">
            <summary>Format does not require any streams.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.FormatFlags.NoDimensions">
            <summary>Format does not need width/height.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.FormatFlags.VariableFps">
            <summary>Format allows variable fps.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.FormatFlags.TimestampDiscontinuities">
            <summary>Format allows timestamp discontinuities.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.FormatFlags.GenericIndex">
            <summary>Use generic index building code.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.FormatFlags.NoTimestamps">
            <summary>Format does not need / have any timestamps.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.FormatFlags.GlobalHeader">
            <summary>Format wants global header.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.FormatFlags.ShowIds">
            <summary>Show format stream IDs numbers.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.FormatFlags.NeedNumber">
            <summary>Needs '%d' in filename.</summary>
        </member>
        <member name="T:Mallenom.FFmpeg.FormatContext">
            <summary>Контекст потока данных заданного формата.</summary>
        </member>
        <member name="T:Mallenom.FFmpeg.FormatContextMode">
            <summary>Режим контекста поотка данных.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.FormatContextMode.Output">
            <summary>Запись данных.</summary>
        </member>
        <member name="F:Mallenom.FFmpeg.FormatContextMode.Input">
            <summary>Чтение данных.</summary>
        </member>
        <member name="T:Mallenom.FFmpeg.NativeDictionaryKeysEnumerator">
            <summary>Перечислитель ключей unmanaged-словаря.</summary>
        </member>
        <!-- Discarding badly formed XML document comment for member 'M:ffmpeg.av_log2(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:ffmpeg.AVRational'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ffmpeg.av_cmp_q(ffmpeg.AVRational,ffmpeg.AVRational)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ffmpeg.av_reduce(System.Int32*,System.Int32*,System.Int64,System.Int64,System.Int64)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:ffmpeg.AVClass.category'. -->
        <!-- Discarding badly formed XML document comment for member 'F:ffmpeg.AVClass.get_category'. -->
        <!-- Discarding badly formed XML document comment for member 'T:ffmpeg.AVPixelFormat'. -->
        <!-- Discarding badly formed XML document comment for member 'T:ffmpeg.AVSampleFormat'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ffmpeg.av_samples_alloc(System.Byte**,System.Int32*,System.Int32,System.Int32,ffmpeg.AVSampleFormat,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ffmpeg.av_get_cpu_flags'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ffmpeg.av_get_channel_layout_string(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.Int32,System.Int32,System.UInt64)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ffmpeg.av_get_standard_channel_layout(System.UInt32,System.UInt64*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:ffmpeg.AVDictionaryEntry'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ffmpeg.av_dict_set(ffmpeg.AVDictionary**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:ffmpeg.AVFrame.buf'. -->
        <!-- Discarding badly formed XML document comment for member 'T:ffmpeg.Motion_Est_ID'. -->
        <!-- Discarding badly formed XML document comment for member 'F:AV_PKT_DATA_PARAM_CHANGE'. -->
        <!-- Discarding badly formed XML document comment for member 'F:ffmpeg.AVCodecContext.codec_tag'. -->
        <!-- Discarding badly formed XML document comment for member 'F:ffmpeg.AVCodecContext.b_quant_factor'. -->
        <!-- Discarding badly formed XML document comment for member 'F:ffmpeg.AVCodecContext.i_quant_factor'. -->
        <!-- Discarding badly formed XML document comment for member 'F:ffmpeg.AVCodecContext.dia_size'. -->
        <!-- Discarding badly formed XML document comment for member 'F:ffmpeg.AVCodecContext.pre_dia_size'. -->
        <!-- Discarding badly formed XML document comment for member 'F:ffmpeg.AVCodecContext.rc_max_available_vbv_use'. -->
        <!-- Discarding badly formed XML document comment for member 'F:ffmpeg.AVCodecContext.rc_min_vbv_overflow_use'. -->
        <!-- Discarding badly formed XML document comment for member 'F:ffmpeg.AVCodecContext.error'. -->
        <!-- Discarding badly formed XML document comment for member 'F:ffmpeg.AVCodecContext.execute2'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ffmpeg.avcodec_open2(ffmpeg.AVCodecContext*,ffmpeg.AVCodec!System.Runtime.CompilerServices.IsConst*,ffmpeg.AVDictionary**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ffmpeg.av_packet_shrink_side_data(ffmpeg.AVPacket*,ffmpeg.AVPacketSideDataType,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ffmpeg.av_packet_unpack_dictionary(System.Byte!System.Runtime.CompilerServices.IsConst*,System.Int32,ffmpeg.AVDictionary**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ffmpeg.avcodec_decode_video2(ffmpeg.AVCodecContext*,ffmpeg.AVFrame*,System.Int32*,ffmpeg.AVPacket!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:ffmpeg.AVCodecParserContext.dts_sync_point'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ffmpeg.av_parser_parse2(ffmpeg.AVCodecParserContext*,ffmpeg.AVCodecContext*,System.Byte**,System.Int32*,System.Byte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int64,System.Int64,System.Int64)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ffmpeg.avio_seek(ffmpeg.AVIOContext*,System.Int64,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ffmpeg.avio_get_str(ffmpeg.AVIOContext*,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ffmpeg.avio_get_str16le(ffmpeg.AVIOContext*,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ffmpeg.avio_close(ffmpeg.AVIOContext*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ffmpeg.avio_closep(ffmpeg.AVIOContext**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ffmpeg.avio_handshake(ffmpeg.AVIOContext*)'. -->
    </members>
</doc>