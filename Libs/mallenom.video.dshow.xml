<?xml version="1.0"?>
<doc>
    <assembly>
        <name>mallenom.video.dshow</name>
    </assembly>
    <members>
        <member name="T:Mallenom.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage
            </summary>
            <example><code>
            [CanBeNull] public object Test() { return null; }
            public void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:Mallenom.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>
            </summary>
            <example><code>
            [NotNull] public object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:Mallenom.ItemNotNullAttribute">
            <summary>
            Indicates that collection or enumerable value does not contain null elements
            </summary>
        </member>
        <member name="T:Mallenom.ItemCanBeNullAttribute">
            <summary>
            Indicates that collection or enumerable value can contain null elements
            </summary>
        </member>
        <member name="T:Mallenom.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            public void ShowError(string message, params object[] args) { /* do something */ }
            public void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:Mallenom.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:Mallenom.ValueProviderAttribute">
            <summary>
            For a parameter that is expected to be one of the limited set of values.
            Specify fields of which type should be used as values for this parameter.
            </summary>
        </member>
        <member name="T:Mallenom.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>
            </summary>
            <example><code>
            public void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:Mallenom.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <c>System.ComponentModel.INotifyPropertyChanged</c> interface and this method
             is used to notify that some property value changed
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               private string _name;
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:Mallenom.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
            for method output means that the methos doesn't return normally.<br/>
            <c>canbenull</c> annotation is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
            or use single attribute with rows separated by semicolon.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null,
            // and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:Mallenom.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            public class Foo {
              private string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:Mallenom.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            class UsesNoEquality {
              public void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:Mallenom.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute { }
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="T:Mallenom.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly
            (e.g. via reflection, in external library), so this symbol
            will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="T:Mallenom.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper
            to not mark symbols marked with such attributes as unused
            (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:Mallenom.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used</summary>
        </member>
        <member name="F:Mallenom.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member</summary>
        </member>
        <member name="F:Mallenom.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:Mallenom.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type</summary>
        </member>
        <member name="T:Mallenom.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked
            with <see cref="T:Mallenom.MeansImplicitUseAttribute"/> or <see cref="T:Mallenom.UsedImplicitlyAttribute"/>
            </summary>
        </member>
        <member name="F:Mallenom.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used</summary>
        </member>
        <member name="F:Mallenom.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used</summary>
        </member>
        <member name="T:Mallenom.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used
            </summary>
        </member>
        <member name="T:Mallenom.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled
            when the invoked method is on stack. If the parameter is a delegate,
            indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated
            while the method is executed
            </summary>
        </member>
        <member name="T:Mallenom.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>
            </summary>
            <example><code>
            [Pure] private int Multiply(int x, int y) { return x * y; }
            public void Foo() {
              const int a = 2, b = 2;
              Multiply(a, b); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:Mallenom.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder within a web project.
            Path can be relative or absolute, starting from web root (~)
            </summary>
        </member>
        <member name="T:Mallenom.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Mallenom.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Mallenom.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is
            an MVC controller. If applied to a method, the MVC controller name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>
            </summary>
        </member>
        <member name="T:Mallenom.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, String)</c>
            </summary>
        </member>
        <member name="T:Mallenom.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, Object)</c>
            </summary>
        </member>
        <member name="T:Mallenom.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC
            partial view. If applied to a method, the MVC partial view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Mallenom.AspMvcSupressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling inspections for MVC views within a class or a method
            </summary>
        </member>
        <member name="T:Mallenom.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Mallenom.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Mallenom.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>
            </summary>
        </member>
        <member name="T:Mallenom.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>
            </summary>
        </member>
        <member name="T:Mallenom.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name
            </summary>
            <example><code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
        </member>
        <member name="T:Mallenom.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>
            </summary>
        </member>
        <member name="T:Mallenom.CollectionAccessAttribute">
            <summary>
            Indicates how method invocation affects content of the collection
            </summary>
        </member>
        <member name="F:Mallenom.CollectionAccessType.None">
            <summary>Method does not use or modify content of the collection</summary>
        </member>
        <member name="F:Mallenom.CollectionAccessType.Read">
            <summary>Method only reads content of the collection but does not modify it</summary>
        </member>
        <member name="F:Mallenom.CollectionAccessType.ModifyExistingContent">
            <summary>Method can change content of the collection but does not add new elements</summary>
        </member>
        <member name="F:Mallenom.CollectionAccessType.UpdatedContent">
            <summary>Method can add new elements to the collection</summary>
        </member>
        <member name="T:Mallenom.AssertionMethodAttribute">
            <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if
            one of the conditions is satisfied. To set the condition, mark one of the parameters with 
            <see cref="T:Mallenom.AssertionConditionAttribute"/> attribute
            </summary>
        </member>
        <member name="T:Mallenom.AssertionConditionAttribute">
            <summary>
            Indicates the condition parameter of the assertion method. The method itself should be
            marked by <see cref="T:Mallenom.AssertionMethodAttribute"/> attribute. The mandatory argument of
            the attribute is the assertion type.
            </summary>
        </member>
        <member name="T:Mallenom.AssertionConditionType">
            <summary>
            Specifies assertion type. If the assertion method argument satisfies the condition,
            then the execution continues. Otherwise, execution is assumed to be halted
            </summary>
        </member>
        <member name="F:Mallenom.AssertionConditionType.IS_TRUE">
            <summary>Marked parameter should be evaluated to true</summary>
        </member>
        <member name="F:Mallenom.AssertionConditionType.IS_FALSE">
            <summary>Marked parameter should be evaluated to false</summary>
        </member>
        <member name="F:Mallenom.AssertionConditionType.IS_NULL">
            <summary>Marked parameter should be evaluated to null value</summary>
        </member>
        <member name="F:Mallenom.AssertionConditionType.IS_NOT_NULL">
            <summary>Marked parameter should be evaluated to not null value</summary>
        </member>
        <member name="T:Mallenom.TerminatesProgramAttribute">
            <summary>
            Indicates that the marked method unconditionally terminates control flow execution.
            For example, it could unconditionally throw exception
            </summary>
        </member>
        <member name="T:Mallenom.LinqTunnelAttribute">
            <summary>
            Indicates that method is pure LINQ method, with postponed enumeration (like Enumerable.Select,
            .Where). This annotation allows inference of [InstantHandle] annotation for parameters
            of delegate type by analyzing LINQ method chains.
            </summary>
        </member>
        <member name="T:Mallenom.NoEnumerationAttribute">
            <summary>
            Indicates that IEnumerable, passed as parameter, is not enumerated.
            </summary>
        </member>
        <member name="T:Mallenom.RegexPatternAttribute">
            <summary>
            Indicates that parameter is regular expression pattern.
            </summary>
        </member>
        <member name="T:Mallenom.XamlItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the type that has <c>ItemsSource</c> property and should be
            treated as <c>ItemsControl</c>-derived type, to enable inner  items <c>DataContext</c>
            type resolve.
            </summary>
        </member>
        <member name="T:Mallenom.XamlItemBindingOfItemsControlAttribute">
            <summary>
            XAML attibute. Indicates the property of some <c>BindingBase</c>-derived type, that
            is used to bind some item of <c>ItemsControl</c>-derived type. This annotation will
            enable the <c>DataContext</c> type resolve for XAML bindings for such properties.
            </summary>
            <remarks>
            Property should have the tree ancestor of the <c>ItemsControl</c> type or
            marked with the <see cref="T:Mallenom.XamlItemsControlAttribute"/> attribute.
            </remarks>
        </member>
        <member name="T:Mallenom.NoReorder">
            <summary>
            Prevents the Member Reordering feature from tossing members of the marked class.
            </summary>
            <remarks>
            The attribute must be mentioned in your member reordering patterns.
            </remarks>
        </member>
        <member name="T:Mallenom.Assert">
            <summary>A static class for verifying assumptions.</summary>
        </member>
        <member name="T:Mallenom.Assert.EvaluateFunction">
            <summary>A function signature for Assert.Evaluate.</summary>
        </member>
        <member name="T:Mallenom.Assert.ImplicationFunction">
            <summary>A function signature for Assert.Implies.</summary>
            <returns>Returns the truth of a predicate.</returns>
        </member>
        <member name="M:Mallenom.Assert.Evaluate(Mallenom.Assert.EvaluateFunction)">
            <summary>
            Executes the specified argument.
            </summary>
            <param name="argument">The function to execute.</param>
        </member>
        <member name="M:Mallenom.Assert.AreEqual``1(``0,``0)">
            <summary>
            Verifies that two generic type data are equal.  The assertion fails if they are not.
            </summary>
            <typeparam name="T">The generic type to compare for equality.</typeparam>
            <param name="expected">The first generic type data to compare.  This is is the expected value.</param>
            <param name="actual">The second generic type data to compare.  This is the actual value.</param>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="M:Mallenom.Assert.AreNotEqual``1(``0,``0)">
            <summary>
            Verifies that two generic type data are not equal.  The assertion fails if they are.
            </summary>
            <typeparam name="T">The generic type to compare for inequality.</typeparam>
            <param name="notExpected">The first generic type data to compare.  This is is the value that's not expected.</param>
            <param name="actual">The second generic type data to compare.  This is the actual value.</param>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="M:Mallenom.Assert.Implies(System.Boolean,System.Boolean)">
            <summary>
            Verifies that if the specified condition is true, then so is the result.
            The assertion fails if the condition is true but the result is false.
            </summary>
            <param name="condition">if set to <c>true</c> [condition].</param>
            <param name="result">
            A second Boolean statement.  If the first was true then so must this be.
            If the first statement was false then the value of this is ignored.
            </param>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="M:Mallenom.Assert.Implies(System.Boolean,Mallenom.Assert.ImplicationFunction)">
            <summary>
            Lazy evaluation overload.  Verifies that if a condition is true, then so is a secondary value.
            </summary>
            <param name="condition">The conditional value.</param>
            <param name="result">A function to be evaluated for truth if the condition argument is true.</param>
            <remarks>
            This overload only evaluates the result if the first condition is true.
            </remarks>
        </member>
        <member name="M:Mallenom.Assert.IsNeitherNullNorEmpty(System.String)">
            <summary>
            Verifies that a string has content.  I.e. it is not null and it is not empty.
            </summary>
            <param name="value">The string to verify.</param>
        </member>
        <member name="M:Mallenom.Assert.IsNeitherNullNorWhitespace(System.String)">
            <summary>
            Verifies that a string has content.  I.e. it is not null and it is not purely whitespace.
            </summary>
            <param name="value">The string to verify.</param>
        </member>
        <member name="M:Mallenom.Assert.IsNotNull``1(``0)">
            <summary>
            Verifies the specified value is not null.  The assertion fails if it is.
            </summary>
            <typeparam name="T">The generic reference type.</typeparam>
            <param name="value">The value to check for nullness.</param>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="M:Mallenom.Assert.IsFalse(System.Boolean)">
            <summary>
            Verifies that the specified condition is false.  The assertion fails if it is true.
            </summary>
            <param name="condition">The expression that should be <c>false</c>.</param>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="M:Mallenom.Assert.IsFalse(System.Boolean,System.String)">
            <summary>
            Verifies that the specified condition is false.  The assertion fails if it is true.
            </summary>
            <param name="condition">The expression that should be <c>false</c>.</param>
            <param name="message">The message to display if the condition is <c>true</c>.</param>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="M:Mallenom.Assert.IsTrue(System.Boolean)">
            <summary>
            Verifies that the specified condition is true.  The assertion fails if it is not.
            </summary>
            <param name="condition">A condition that is expected to be <c>true</c>.</param>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="M:Mallenom.Assert.IsTrue(System.Boolean,System.String)">
            <summary>
            Verifies that the specified condition is true.  The assertion fails if it is not.
            </summary>
            <param name="condition">A condition that is expected to be <c>true</c>.</param>
            <param name="message">The message to write in case the condition is <c>false</c>.</param>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="M:Mallenom.Assert.Fail">
            <summary>
            This line should never be executed.  The assertion always fails.
            </summary>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="M:Mallenom.Assert.Fail(System.String)">
            <summary>
            This line should never be executed.  The assertion always fails.
            </summary>
            <param name="message">The message to display if this function is executed.</param>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="M:Mallenom.Assert.IsNull``1(``0)">
            <summary>
            Verifies that the specified object is null.  The assertion fails if it is not.
            </summary>
            <param name="item">The item to verify is null.</param>
        </member>
        <member name="M:Mallenom.Assert.BoundedDoubleInc(System.Double,System.Double,System.Double)">
            <summary>
            Verifies that the specified value is within the expected range.  The assertion fails if it isn't.
            </summary>
            <param name="lowerBoundInclusive">The lower bound inclusive value.</param>
            <param name="value">The value to verify.</param>
            <param name="upperBoundInclusive">The upper bound inclusive value.</param>
        </member>
        <member name="M:Mallenom.Assert.BoundedInteger(System.Int32,System.Int32,System.Int32)">
            <summary>
            Verifies that the specified value is within the expected range.  The assertion fails if it isn't.
            </summary>
            <param name="lowerBoundInclusive">The lower bound inclusive value.</param>
            <param name="value">The value to verify.</param>
            <param name="upperBoundExclusive">The upper bound exclusive value.</param>
        </member>
        <member name="M:Mallenom.Assert.IsApartmentState(System.Threading.ApartmentState)">
            <summary>
            Verify the current thread's apartment state is what's expected.  The assertion fails if it isn't
            </summary>
            <param name="expectedState">
            The expected apartment state for the current thread.
            </param>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="T:Mallenom.Verify">
            <summary>
            A static class for retail validated assertions.
            Instead of breaking into the debugger an exception is thrown.
            </summary>
        </member>
        <member name="T:Mallenom.Verify.Argument">
            <summary>Argument verification methods.</summary>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNeitherNullNorEmpty(System.String,System.String)">
            <summary>Ensure that a string argument is neither <c>null</c> nor empty.</summary>
            <param name="value">The string to validate.</param>
            <param name="parameterName">The name of the parameter that will be presented if an exception is thrown.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> == <c>null</c>.
            </exception>
            <example><code>
            void Method(string argument)
            {
            	Verify.Argument.IsNeitherNullNorEmpty(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNeitherNullNorWhitespace(System.String,System.String)">
            <summary>Ensure that a string argument is neither <c>null</c> nor does it consist only of whitespace.</summary>
            <param name="value">The string to validate.</param>
            <param name="parameterName">The name of the parameter that will be presented if an exception is thrown.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is empty or consists of whitespace only.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> == <c>null</c>.
            </exception>
            <example><code>
            void Method(string argument)
            {
            	Verify.Argument.IsNeitherNullNorWhitespace(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNotDefault``1(``0,System.String)">
            <summary>Verifies that an argument is not default value.</summary>
            <typeparam name="T">Type of the object to validate. Must be a value-type.</typeparam>
            <param name="value">Value to validate.</param>
            <param name="parameterName">The name of the parameter that will be presented if an exception is thrown.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> equals <c>default(T)</c>.
            </exception>
            <example><code>
            void Method(int argument)
            {
            	Verify.Argument.IsNotDefault(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNotNull``1(``0,System.String)">
            <summary>Verifies that an argument is not <c>null</c>.</summary>
            <typeparam name="T">Type of the object to validate. Must be a reference-type.</typeparam>
            <param name="value">The object to validate.</param>
            <param name="parameterName">The name of the parameter that will be presented if an exception is thrown.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> == <c>null</c>.
            </exception>
            <example><code>
            void Method(object argument)
            {
            	Verify.Argument.IsNotNull(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNull``1(``0,System.String)">
            <summary>Verifies that an argument is <c>null</c>.</summary>
            <typeparam name="T">Type of the object to validate. Must be a reference-type.</typeparam>
            <param name="value">The object to validate.</param>
            <param name="parameterName">The name of the parameter that will be presented if an exception is thrown.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> != <c>null</c>.
            </exception>
            <example><code>
            void Method(object argument)
            {
            	Verify.Argument.IsNull(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNotNegative(System.SByte,System.String)">
            <summary>
            Verifies that argument is not a negative number. Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; 0.
            </exception>
            <example><code>
            void Method(sbyte argument)
            {
            	Verify.Argument.IsNotNegative(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNotNegative(System.Int16,System.String)">
            <summary>
            Verifies that argument is not a negative number. Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; 0.
            </exception>
            <example><code>
            void Method(short argument)
            {
            	Verify.Argument.IsNotNegative(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNotNegative(System.Int32,System.String)">
            <summary>
            Verifies that argument is not a negative number. Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; 0.
            </exception>
            <example><code>
            void Method(int argument)
            {
            	Verify.Argument.IsNotNegative(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNotNegative(System.Int64,System.String)">
            <summary>
            Verifies that argument is not a negative number. Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; 0.
            </exception>
            <example><code>
            void Method(long argument)
            {
            	Verify.Argument.IsNotNegative(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNotNegative(System.Single,System.String)">
            <summary>
            Verifies that argument is not a negative number. Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; 0.
            </exception>
            <example><code>
            void Method(float argument)
            {
            	Verify.Argument.IsNotNegative(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNotNegative(System.Double,System.String)">
            <summary>
            Verifies that argument is not a negative number. Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; 0.
            </exception>
            <example><code>
            void Method(double argument)
            {
            	Verify.Argument.IsNotNegative(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNotNegative(System.Decimal,System.String)">
            <summary>
            Verifies that argument is not a negative number. Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; 0.
            </exception>
            <example><code>
            void Method(decimal argument)
            {
            	Verify.Argument.IsNotNegative(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNegative(System.SByte,System.String)">
            <summary>
            Verifies that argument is a negative number. Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &gt;= 0.
            </exception>
            <example><code>
            void Method(sbyte argument)
            {
            	Verify.Argument.IsNegative(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNegative(System.Int16,System.String)">
            <summary>
            Verifies that argument is a negative number. Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &gt;= 0.
            </exception>
            <example><code>
            void Method(short argument)
            {
            	Verify.Argument.IsNegative(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNegative(System.Int32,System.String)">
            <summary>
            Verifies that argument is a negative number. Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &gt;= 0.
            </exception>
            <example><code>
            void Method(int argument)
            {
            	Verify.Argument.IsNegative(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNegative(System.Int64,System.String)">
            <summary>
            Verifies that argument is a negative number. Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &gt;= 0.
            </exception>
            <example><code>
            void Method(long argument)
            {
            	Verify.Argument.IsNegative(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNegative(System.Single,System.String)">
            <summary>
            Verifies that argument is a negative number. Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &gt;= 0.
            </exception>
            <example><code>
            void Method(float argument)
            {
            	Verify.Argument.IsNegative(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNegative(System.Double,System.String)">
            <summary>
            Verifies that argument is a negative number. Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &gt;= 0.
            </exception>
            <example><code>
            void Method(double argument)
            {
            	Verify.Argument.IsNegative(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNegative(System.Decimal,System.String)">
            <summary>
            Verifies that argument is a negative number. Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &gt;= 0.
            </exception>
            <example><code>
            void Method(decimal argument)
            {
            	Verify.Argument.IsNegative(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsPositive(System.SByte,System.String)">
            <summary>
            Verifies that argument is a positive number (&gt; 0). Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt;= 0.
            </exception>
            <example><code>
            void Method(sbyte argument)
            {
            	Verify.Argument.IsPositive(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsPositive(System.Byte,System.String)">
            <summary>
            Verifies that argument is a positive number (&gt; 0). Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt;= 0.
            </exception>
            <example><code>
            void Method(byte argument)
            {
            	Verify.Argument.IsPositive(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsPositive(System.Int16,System.String)">
            <summary>
            Verifies that argument is a positive number (&gt; 0). Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt;= 0.
            </exception>
            <example><code>
            void Method(short argument)
            {
            	Verify.Argument.IsPositive(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsPositive(System.Int32,System.String)">
            <summary>
            Verifies that argument is a positive number (&gt; 0). Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt;= 0.
            </exception>
            <example><code>
            void Method(int argument)
            {
            	Verify.Argument.IsPositive(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsPositive(System.Int64,System.String)">
            <summary>
            Verifies that argument is a positive number (&gt; 0). Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt;= 0.
            </exception>
            <example><code>
            void Method(long argument)
            {
            	Verify.Argument.IsPositive(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsPositive(System.Single,System.String)">
            <summary>
            Verifies that argument is a positive number (&gt; 0). Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt;= 0.
            </exception>
            <example><code>
            void Method(float argument)
            {
            	Verify.Argument.IsPositive(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsPositive(System.Double,System.String)">
            <summary>
            Verifies that argument is a positive number (&gt; 0). Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt;= 0.
            </exception>
            <example><code>
            void Method(double argument)
            {
            	Verify.Argument.IsPositive(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsPositive(System.Decimal,System.String)">
            <summary>
            Verifies that argument is a positive number (&gt; 0). Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="value">Parameter value to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt;= 0.
            </exception>
            <example><code>
            void Method(decimal argument)
            {
            	Verify.Argument.IsPositive(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsInRange(System.Boolean,System.String)">
            <summary>
            Verifies the specified statement is <c>true</c>. Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="statement">The statement to be verified as <c>true</c>.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="statement"/> == <c>false</c>.
            </exception>
            <example><code>
            void Method(int argument)
            {
            	Verify.Argument.IsInRange(argument &gt; 4, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsInRange(System.Boolean,System.String,System.String)">
            <summary>
            Verifies the specified statement is <c>true</c>. Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it's not.
            </summary>
            <param name="statement">The statement to be verified as <c>true</c>.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentException"/>.</param>
            <param name="message">The message to include in the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="statement"/> == <c>false</c>.
            </exception>
            <example><code>
            void Method(int argument)
            {
            	Verify.Argument.IsInRange(argument &gt; 4, "argument", "Must be greater than 4.");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsInRange(System.SByte,System.SByte,System.SByte,System.String)">
            <summary>
            Verifies that the specified value is within the expected range. 
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it isn't.
            </summary>
            <param name="lowerBoundInclusive">The lower bound inclusive value.</param>
            <param name="value">The value to verify.</param>
            <param name="upperBoundInclusive">The upper bound inclusive value.</param>
            <param name="parameterName">Parameter name to include in <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; <paramref name="lowerBoundInclusive"/> or
            <paramref name="value"/> &gt; <paramref name="upperBoundInclusive"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsInRange(System.Byte,System.Byte,System.Byte,System.String)">
            <summary>
            Verifies that the specified value is within the expected range. 
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it isn't.
            </summary>
            <param name="lowerBoundInclusive">The lower bound inclusive value.</param>
            <param name="value">The value to verify.</param>
            <param name="upperBoundInclusive">The upper bound inclusive value.</param>
            <param name="parameterName">Parameter name to include in <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; <paramref name="lowerBoundInclusive"/> or
            <paramref name="value"/> &gt; <paramref name="upperBoundInclusive"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsInRange(System.Char,System.Char,System.Char,System.String)">
            <summary>
            Verifies that the specified value is within the expected range. 
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it isn't.
            </summary>
            <param name="lowerBoundInclusive">The lower bound inclusive value.</param>
            <param name="value">The value to verify.</param>
            <param name="upperBoundInclusive">The upper bound inclusive value.</param>
            <param name="parameterName">Parameter name to include in <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; <paramref name="lowerBoundInclusive"/> or
            <paramref name="value"/> &gt; <paramref name="upperBoundInclusive"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsInRange(System.Int16,System.Int16,System.Int16,System.String)">
            <summary>
            Verifies that the specified value is within the expected range. 
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it isn't.
            </summary>
            <param name="lowerBoundInclusive">The lower bound inclusive value.</param>
            <param name="value">The value to verify.</param>
            <param name="upperBoundInclusive">The upper bound inclusive value.</param>
            <param name="parameterName">Parameter name to include in <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; <paramref name="lowerBoundInclusive"/> or
            <paramref name="value"/> &gt; <paramref name="upperBoundInclusive"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsInRange(System.UInt16,System.UInt16,System.UInt16,System.String)">
            <summary>
            Verifies that the specified value is within the expected range. 
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it isn't.
            </summary>
            <param name="lowerBoundInclusive">The lower bound inclusive value.</param>
            <param name="value">The value to verify.</param>
            <param name="upperBoundInclusive">The upper bound inclusive value.</param>
            <param name="parameterName">Parameter name to include in <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; <paramref name="lowerBoundInclusive"/> or
            <paramref name="value"/> &gt; <paramref name="upperBoundInclusive"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsInRange(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Verifies that the specified value is within the expected range. 
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it isn't.
            </summary>
            <param name="lowerBoundInclusive">The lower bound inclusive value.</param>
            <param name="value">The value to verify.</param>
            <param name="upperBoundInclusive">The upper bound inclusive value.</param>
            <param name="parameterName">Parameter name to include in <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; <paramref name="lowerBoundInclusive"/> or
            <paramref name="value"/> &gt; <paramref name="upperBoundInclusive"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsInRange(System.UInt32,System.UInt32,System.UInt32,System.String)">
            <summary>
            Verifies that the specified value is within the expected range. 
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it isn't.
            </summary>
            <param name="lowerBoundInclusive">The lower bound inclusive value.</param>
            <param name="value">The value to verify.</param>
            <param name="upperBoundInclusive">The upper bound inclusive value.</param>
            <param name="parameterName">Parameter name to include in <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; <paramref name="lowerBoundInclusive"/> or
            <paramref name="value"/> &gt; <paramref name="upperBoundInclusive"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsInRange(System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            Verifies that the specified value is within the expected range. 
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it isn't.
            </summary>
            <param name="lowerBoundInclusive">The lower bound inclusive value.</param>
            <param name="value">The value to verify.</param>
            <param name="upperBoundInclusive">The upper bound inclusive value.</param>
            <param name="parameterName">Parameter name to include in <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; <paramref name="lowerBoundInclusive"/> or
            <paramref name="value"/> &gt; <paramref name="upperBoundInclusive"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsInRange(System.UInt64,System.UInt64,System.UInt64,System.String)">
            <summary>
            Verifies that the specified value is within the expected range. 
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it isn't.
            </summary>
            <param name="lowerBoundInclusive">The lower bound inclusive value.</param>
            <param name="value">The value to verify.</param>
            <param name="upperBoundInclusive">The upper bound inclusive value.</param>
            <param name="parameterName">Parameter name to include in <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; <paramref name="lowerBoundInclusive"/> or
            <paramref name="value"/> &gt; <paramref name="upperBoundInclusive"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsInRange(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Verifies that the specified value is within the expected range. 
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it isn't.
            </summary>
            <param name="lowerBoundInclusive">The lower bound inclusive value.</param>
            <param name="value">The value to verify.</param>
            <param name="upperBoundInclusive">The upper bound inclusive value.</param>
            <param name="parameterName">Parameter name to include in <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; <paramref name="lowerBoundInclusive"/> or
            <paramref name="value"/> &gt; <paramref name="upperBoundInclusive"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsInRange(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Verifies that the specified value is within the expected range. 
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it isn't.
            </summary>
            <param name="lowerBoundInclusive">The lower bound inclusive value.</param>
            <param name="value">The value to verify.</param>
            <param name="upperBoundInclusive">The upper bound inclusive value.</param>
            <param name="parameterName">Parameter name to include in <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; <paramref name="lowerBoundInclusive"/> or
            <paramref name="value"/> &gt; <paramref name="upperBoundInclusive"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsInRange(System.Decimal,System.Decimal,System.Decimal,System.String)">
            <summary>
            Verifies that the specified value is within the expected range. 
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it isn't.
            </summary>
            <param name="lowerBoundInclusive">The lower bound inclusive value.</param>
            <param name="value">The value to verify.</param>
            <param name="upperBoundInclusive">The upper bound inclusive value.</param>
            <param name="parameterName">Parameter name to include in <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> &lt; <paramref name="lowerBoundInclusive"/> or
            <paramref name="value"/> &gt; <paramref name="upperBoundInclusive"/>.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsValidIndex(System.Int16,System.Int16,System.String)">
            <summary>Verifies that the specified value is a valid index for a collection.</summary>
            <param name="itemsCount">Collection items count.</param>
            <param name="value">Index value.</param>
            <param name="parameterName">Parameter name to include in <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is not a valid index.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsValidIndex(System.Int32,System.Int32,System.String)">
            <summary>Verifies that the specified value is a valid index for a collection.</summary>
            <param name="itemsCount">Collection items count.</param>
            <param name="value">Index value.</param>
            <param name="parameterName">Parameter name to include in <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is not a valid index.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsValidIndex(System.Int64,System.Int64,System.String)">
            <summary>Verifies that the specified value is a valid index for a collection.</summary>
            <param name="itemsCount">Collection items count.</param>
            <param name="value">Index value.</param>
            <param name="parameterName">Parameter name to include in <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value"/> is not a valid index.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsEqualTo``1(``0,``0,System.String)">
            <summary>
            Verifies that argument equals expected value. Throws an <see cref="T:System.ArgumentException"/> if it's not.
            </summary>
            <param name="expected">Expected value.</param>
            <param name="actual">Actual value.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="actual"/> != <paramref name="expected"/>.
            </exception>
            <example><code>
            void Method(int argument)
            {
            	Verify.Argument.IsEqualTo(10, argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsEqualTo``1(``0,``0,System.String,System.String)">
            <summary>
            Verifies that argument equals expected value. Throws an <see cref="T:System.ArgumentException"/> if it's not.
            </summary>
            <param name="expected">Expected value.</param>
            <param name="actual">Actual value.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentException"/>.</param>
            <param name="message">The message to include in the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="actual"/> != <paramref name="expected"/>.
            </exception>
            <example><code>
            void Method(int argument)
            {
            	Verify.Argument.IsEqualTo(10, argument, "argument", "Must be 10.");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNotEqualTo``1(``0,``0,System.String)">
            <summary>
            Verifies that argument is not of unexpected value. Throws an <see cref="T:System.ArgumentException"/> if it is.
            </summary>
            <param name="notExpected">Invalid value.</param>
            <param name="actual">Actual value.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="actual"/> == <paramref name="notExpected"/>.
            </exception>
            <example><code>
            void Method(int argument)
            {
            	Verify.Argument.IsNotEqualTo(10, argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsNotEqualTo``1(``0,``0,System.String,System.String)">
            <summary>
            Verifies that argument is not of unexpected value. Throws an <see cref="T:System.ArgumentException"/> if it is.
            </summary>
            <param name="notExpected">Invalid value.</param>
            <param name="actual">Actual value.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentException"/>.</param>
            <param name="message">The message to include in the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="actual"/> == <paramref name="notExpected"/>.
            </exception>
            <example><code>
            void Method(int argument)
            {
            	Verify.Argument.IsNotEqualTo(10, argument, "argument", "Must not be 10.");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsTrue(System.Boolean,System.String)">
            <summary>
            Verifies the specified statement is <c>true</c>. Throws an <see cref="T:System.ArgumentException"/> if it's not.
            </summary>
            <param name="statement">The statement to be verified as <c>true</c>.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="statement"/> == <c>false</c>.
            </exception>
            <example><code>
            void Method(string argument)
            {
            	Verify.Argument.IsTrue(argument.Length == 10, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsTrue(System.Boolean,System.String,System.String)">
            <summary>
            Verifies the specified statement is <c>true</c>. Throws an <see cref="T:System.ArgumentException"/> if it's not.
            </summary>
            <param name="statement">The statement to be verified as <c>true</c>.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentException"/>.</param>
            <param name="message">The message to include in the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="statement"/> == <c>false</c>.
            </exception>
            <example><code>
            void Method(string argument)
            {
            	Verify.Argument.IsTrue(argument.Length == 10, "argument", "String length must be 10.");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsFalse(System.Boolean,System.String)">
            <summary>
            Verifies the specified statement is <c>false</c>. Throws an <see cref="T:System.ArgumentException"/> if it's not.
            </summary>
            <param name="statement">The statement to be verified as <c>false</c>.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="statement"/> == <c>false</c>.
            </exception>
            <example><code>
            void Method(int argument)
            {
            	Verify.Argument.IsFalse(argument == 10, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsFalse(System.Boolean,System.String,System.String)">
            <summary>
            Verifies the specified statement is <c>false</c>. Throws an <see cref="T:System.ArgumentException"/> if it's not.
            </summary>
            <param name="statement">The statement to be verified as <c>false</c>.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentException"/>.</param>
            <param name="message">The message to include in the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="statement"/> == <c>false</c>.
            </exception>
            <example><code>
            void Method(int argument)
            {
            	Verify.Argument.IsFalse(argument == 10, "argument", "Value must not be 10.");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.HasNoNullItems``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Verifies that sequence contains no <c>null</c> items.
            Throws an <see cref="T:System.ArgumentException"/> if contains.
            </summary>
            <param name="sequence">Sequence to validate.</param>
            <param name="parameterName">The name of the parameter that will be presented if an exception is thrown.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sequence"/> == <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="sequence"/> contains <c>null</c> items.
            </exception>
            <example><code>
            void Method(object[] values)
            {
            	Verify.Argument.HasNoNullItems(values, "values");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.FileExists(System.String,System.String)">
            <summary>Verifies that argument is an existing file.</summary>
            <param name="filePath">File path.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="filePath"/> == <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            File does not exist or <paramref name="filePath"/> is not a valid path.
            </exception>
            <example><code>
            void Method(string argument)
            {
            	Verify.Argument.FileExists(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.DirectoryExists(System.String,System.String)">
            <summary>Verifies that argument is an existing directory.</summary>
            <param name="directoryPath">Directory path.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="directoryPath"/> == <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Directory does not exist or <paramref name="directoryPath"/> is not a valid path.
            </exception>
            <example><code>
            void Method(string argument)
            {
            	Verify.Argument.DirectoryExists(argument, "argument");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsAbsoluteUri(System.Uri,System.String)">
            <summary>
            Verifies that the specified URI is absolute.
            </summary>
            <param name="uri">URI to verify.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uri"/> == <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="uri"/> is relative.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.ImplementsInterface(System.Object,System.Type,System.String)">
            <summary>Verifies that parameter implements specified interface.</summary>
            <param name="parameter">Object to validate.</param>
            <param name="interfaceType">Interface type.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="parameter"/> == <c>null</c>
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="parameter"/> does not implement specified interface.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsOfExactType(System.Object,System.Type,System.String)">
            <summary>Verifies that parameter is of specified type.</summary>
            <param name="parameter">Object to validate.</param>
            <param name="requiredType">Expected type.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="parameter"/> == <c>null</c>
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="parameter"/> is not of specified type.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsOfExactType``1(System.Object,System.String)">
            <summary>Verifies that parameter is of specified type.</summary>
            <typeparam name="T">Expected type.</typeparam>
            <param name="parameter">Object to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="parameter"/> == <c>null</c>
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="parameter"/> is not of specified type.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsOfType(System.Object,System.Type,System.String)">
            <summary>Verifies that parameter is of specified type or type which is based on specified type.</summary>
            <param name="parameter">Object to validate.</param>
            <param name="requiredType">Expected type.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="parameter"/> == <c>null</c>
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="parameter"/> is not of specified type.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.Argument.IsOfType``1(System.Object,System.String)">
            <summary>Verifies that parameter is of specified type or type which is based on specified type.</summary>
            <typeparam name="T">Expected type.</typeparam>
            <param name="parameter">Object to validate.</param>
            <param name="parameterName">Name of the parameter to include in the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="parameter"/> == <c>null</c>
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="parameter"/> is not of specified type.
            </exception>
        </member>
        <member name="T:Mallenom.Verify.State">
            <summary>Program, thread and object state verification methods.</summary>
        </member>
        <member name="M:Mallenom.Verify.State.IsApartmentState(System.Threading.ApartmentState,System.String)">
            <summary>Ensure that the current thread's apartment state is what's expected.</summary>
            <param name="requiredState">The required apartment state for the current thread.</param>
            <param name="message">The message string for the exception to be thrown if the state is invalid.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the calling thread's apartment state is not the same as the <paramref name="requiredState"/>.
            </exception>
            <example><code>
            void Method()
            {
            	Verify.State.IsApartmentState(ApartmentState.STA, "Must run on STA thread.");
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.State.IsApartmentState(System.Threading.ApartmentState)">
            <summary>Ensure that the current thread's apartment state is what's expected.</summary>
            <param name="requiredState">The required apartment state for the current thread.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the calling thread's apartment state is not the same as the <paramref name="requiredState"/>.
            </exception>
            <example><code>
            void Method()
            {
            	Verify.State.IsApartmentState(ApartmentState.STA);
            }
            </code></example>
        </member>
        <member name="M:Mallenom.Verify.State.IsTrue(System.Boolean)">
            <summary>
            Verifies the specified statement is <c>true</c>true. Throws an <see cref="T:System.InvalidOperationException"/> if it's not.
            </summary>
            <param name="statement">The statement to be verified as <c>true</c>.</param>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="statement"/> == <c>false</c>.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.State.IsTrue(System.Boolean,System.String)">
            <summary>
            Verifies the specified statement is <c>true</c>. Throws an <see cref="T:System.InvalidOperationException"/> if it's not.
            </summary>
            <param name="statement">The statement to be verified as <c>true</c>.</param>
            <param name="message">The message to include in the <see cref="T:System.InvalidOperationException"/>.</param>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="statement"/> == <c>false</c>.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.State.IsFalse(System.Boolean)">
            <summary>
            Verifies the specified statement is <c>false</c>. Throws an <see cref="T:System.InvalidOperationException"/> if it's not.
            </summary>
            <param name="statement">The statement to be verified as <c>false</c>.</param>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="statement"/> == <c>true</c>.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.State.IsFalse(System.Boolean,System.String)">
            <summary>
            Verifies the specified statement is <c>false</c>. Throws an <see cref="T:System.InvalidOperationException"/> if it's not.
            </summary>
            <param name="statement">The statement to be verified as <c>false</c>.</param>
            <param name="message">The message to include in the <see cref="T:System.InvalidOperationException"/>.</param>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="statement"/> == <c>true</c>.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.State.IsNotDisposed(System.Object,System.Boolean)">
            <summary>
            Verifies the specified instance is not disposed. Throws an <see cref="T:System.ObjectDisposedException"/> if it is.
            </summary>
            <param name="instance">Object instance.</param>
            <param name="isDisposed">Instance disposed status.</param>
            <exception cref="T:System.ObjectDisposedException">
            <paramref name="isDisposed"/> == <c>true</c>.
            </exception>
        </member>
        <member name="M:Mallenom.Verify.State.IsNotDisposed(System.Object,System.Boolean,System.String)">
            <summary>
            Verifies the specified instance is not disposed. Throws an <see cref="T:System.ObjectDisposedException"/> if it is.
            </summary>
            <param name="instance">Object instance.</param>
            <param name="isDisposed">Instance disposed status.</param>
            <param name="message">The message to include in the <see cref="T:System.ObjectDisposedException"/>.</param>
            <exception cref="T:System.ObjectDisposedException">
            <paramref name="isDisposed"/> == <c>true</c>.
            </exception>
        </member>
        <member name="T:Mallenom.DShow.MultimediaStreaming.AMMStream">
            <summary>
            From unnamed enum
            </summary>
        </member>
        <member name="T:Mallenom.DShow.MultimediaStreaming.AMMMultiStream">
            <summary>
            From unnamed enum
            </summary>
        </member>
        <member name="T:Mallenom.DShow.MultimediaStreaming.AMOpenModes">
            <summary>
            From unnamed enum
            </summary>
        </member>
        <member name="M:Mallenom.DShow.MultimediaStreaming.MsError.ThrowExceptionForHR(System.Int32)">
            <summary>
            If hr has a "failed" status code (E_*), throw an exception.  Note that status
            messages (S_*) are not considered failure codes.  If DES or DShow error text
            is available, it is used to build the exception, otherwise a generic com error
            is thrown.
            </summary>
            <param name="hr">The HRESULT to check</param>
        </member>
        <member name="T:Mallenom.DShow.MultimediaStreaming.AMMultiMediaStream">
            <summary>
            From CLSID_AMMultiMediaStream
            </summary>
        </member>
        <member name="T:Mallenom.DShow.MultimediaStreaming.AMMediaTypeStream">
            <summary>
            From CLSID_AMMediaTypeStream
            </summary>
        </member>
        <member name="T:Mallenom.DShow.MultimediaStreaming.AMDirectDrawStream">
            <summary>
            From CLSID_AMDirectDrawStream
            </summary>
        </member>
        <member name="T:Mallenom.DShow.MultimediaStreaming.AMAudioStream">
            <summary>
            From CLSID_AMAudioStream
            </summary>
        </member>
        <member name="T:Mallenom.DShow.MultimediaStreaming.AMAudioData">
            <summary>
            From CLSID_AMAudioData
            </summary>
        </member>
        <member name="T:Mallenom.DShow.MultimediaStreaming.CompletionStatusFlags">
            <summary>
            From COMPLETION_STATUS_FLAGS
            </summary>
        </member>
        <member name="T:Mallenom.DShow.MultimediaStreaming.SSUpdate">
            <summary>
            From unnamed enum
            </summary>
        </member>
        <member name="T:Mallenom.DShow.MultimediaStreaming.StreamState">
            <summary>
            From STREAM_STATE
            </summary>
        </member>
        <member name="T:Mallenom.DShow.MultimediaStreaming.StreamType">
            <summary>
            From STREAM_TYPE
            </summary>
        </member>
        <member name="T:Mallenom.DShow.MultimediaStreaming.MMSSF">
            <summary>
            From unnamed enum
            </summary>
        </member>
        <member name="F:Mallenom.DShow.MultimediaStreaming.MSPID.PrimaryVideo">
            <summary> MSPID_PrimaryVideo </summary>
        </member>
        <member name="F:Mallenom.DShow.MultimediaStreaming.MSPID.PrimaryAudio">
            <summary> MSPID_PrimaryAudio </summary>
        </member>
        <member name="T:Mallenom.DShow.BDA.BDAChangeState">
            <summary>
            From BDA_CHANGE_STATE
            </summary>
        </member>
        <member name="T:Mallenom.DShow.BDA.MulticastMode">
            <summary>
            From BDA_MULTICAST_MODE
            </summary>
        </member>
        <member name="T:Mallenom.DShow.BDA.MediaSampleContent">
            <summary>
            From MEDIA_SAMPLE_CONTENT
            </summary>
        </member>
        <member name="T:Mallenom.DShow.BDA.BDANodeDescriptor">
            <summary>
            From BDANODE_DESCRIPTOR
            </summary>
        </member>
        <member name="T:Mallenom.DShow.BDA.CCSubstreamService">
            <summary>
            From KS_CC_SUBSTREAM_SERVICE_* defines
            </summary>
        </member>
        <member name="T:Mallenom.DShow.BDA.TIFLoad">
            <summary>
            From CLSID_TIFLoad
            </summary>
        </member>
        <member name="T:Mallenom.DShow.BDA.FECMethod">
            <summary>
            From FECMethod
            </summary>
        </member>
        <member name="T:Mallenom.DShow.BDA.BinaryConvolutionCodeRate">
            <summary>
            From BinaryConvolutionCodeRate
            </summary>
        </member>
        <member name="T:Mallenom.DShow.BDA.Polarisation">
            <summary>
            From Polarisation
            </summary>
        </member>
        <member name="T:Mallenom.DShow.BDA.SpectralInversion">
            <summary>
            From SpectralInversion
            </summary>
        </member>
        <member name="T:Mallenom.DShow.BDA.ModulationType">
            <summary>
            From ModulationType
            </summary>
        </member>
        <member name="T:Mallenom.DShow.BDA.DVBSystemType">
            <summary>
            From DVBSystemType
            </summary>
        </member>
        <member name="T:Mallenom.DShow.BDA.HierarchyAlpha">
            <summary>
            From HierarchyAlpha
            </summary>
        </member>
        <member name="T:Mallenom.DShow.BDA.GuardInterval">
            <summary>
            From GuardInterval
            </summary>
        </member>
        <member name="T:Mallenom.DShow.BDA.TransmissionMode">
            <summary>
            From TransmissionMode
            </summary>
        </member>
        <member name="T:Mallenom.DShow.BDA.ComponentStatus">
            <summary>
            From ComponentStatus
            </summary>
        </member>
        <member name="T:Mallenom.DShow.BDA.ComponentCategory">
            <summary>
            From ComponentCategory
            </summary>
        </member>
        <member name="T:Mallenom.DShow.BDA.MPEG2StreamType">
            <summary>
            From MPEG2StreamType
            </summary>
        </member>
        <member name="T:Mallenom.DShow.BDA.ATSCComponentTypeFlags">
            <summary>
            From ATSCComponentTypeFlags
            </summary>
        </member>
        <member name="T:Mallenom.DShow.BDA.BDATemplateConnection">
            <summary>
            From BDA_TEMPLATE_CONNECTION
            </summary>
        </member>
        <member name="T:Mallenom.DShow.BDA.BDACompFlags">
            <summary>
            From BDA_Comp_Flags
            </summary>
        </member>
        <member name="T:Mallenom.DShow.BDA.RunningStatus">
            <summary>
            Define possible values for a running_status field according to ETSI EN 300 468
            This enum doesn't exist in the c++ headers
            </summary>
        </member>
        <member name="T:Mallenom.DShow.BDA.ProtType">
            <summary>
            From ProtType
            </summary>
        </member>
        <member name="T:Mallenom.DShow.BDA.PidBits">
            <summary>
            From PID_BITS &amp; PID_BITS_MIDL
            </summary>
        </member>
        <member name="T:Mallenom.DShow.BDA.MpegHeaderBits">
            <summary>
            From MPEG_HEADER_BITS &amp; MPEG_HEADER_BITS_MIDL
            </summary>
        </member>
        <member name="T:Mallenom.DShow.BDA.MpegHeaderVersionBits">
            <summary>
            From MPEG_HEADER_VERSION_BITS &amp; MPEG_HEADER_VERSION_BITS_MIDL
            </summary>
        </member>
        <member name="T:Mallenom.DShow.BDA.MpegDuration">
            <summary>
            From MPEG_DURATION &amp; MPEG_TIME
            </summary>
        </member>
        <member name="T:Mallenom.DShow.BDA.MpegDateAndTime">
            <summary>
            From MPEG_DATE_AND_TIME
            </summary>
        </member>
        <member name="T:Mallenom.DShow.BDA.DsmccElement">
            <summary>
            From DSMCC_ELEMENT
            </summary>
        </member>
        <member name="T:Mallenom.DShow.BDA.MpeElement">
            <summary>
            From MPE_ELEMENT
            </summary>
        </member>
        <member name="T:Mallenom.DShow.BDA.EnTvRat_System">
            <summary>
            From EnTvRat_System
            </summary>
        </member>
        <member name="T:Mallenom.DShow.BDA.EnTvRat_GenericLevel">
            <summary>
            From EnTvRat_GenericLevel
            </summary>
        </member>
        <member name="T:Mallenom.DShow.BDA.BfEnTvRat_GenericAttributes">
            <summary>
            From BfEnTvRat_GenericAttributes
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AMGBF">
            <summary>
            From AM_GBF_* defines
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AMVideoFlag">
            <summary>
            From AM_VIDEO_FLAG_* defines
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AMSamplePropertyFlags">
            <summary>
            From AM_SAMPLE_PROPERTY_FLAGS
            </summary>
        </member>
        <member name="T:Mallenom.DShow.PinInfo">
            <summary>
            From PIN_INFO
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AMMediaType">
            <summary>
            From AM_MEDIA_TYPE - When you are done with an instance of this class,
            it should be released with FreeAMMediaType() to avoid leaking
            </summary>
        </member>
        <member name="T:Mallenom.DShow.PinDirection">
            <summary>
            From PIN_DIRECTION
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AMSeekingSeekingCapabilities">
            <summary>
            From AM_SEEKING_SeekingCapabilities
            </summary>
        </member>
        <member name="T:Mallenom.DShow.FilterState">
            <summary>
            From FILTER_STATE
            </summary>
        </member>
        <member name="T:Mallenom.DShow.FilterInfo">
            <summary>
            From FILTER_INFO
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AMSeekingSeekingFlags">
            <summary>
            From AM_SEEKING_SeekingFlags
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AllocatorProperties">
            <summary>
            From ALLOCATOR_PROPERTIES
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AMSample2Properties">
            <summary>
            From AM_SAMPLE2_PROPERTIES
            </summary>
        </member>
        <member name="M:Mallenom.DShow.IPin.ConnectionMediaType(Mallenom.DShow.AMMediaType)">
            <summary>
            Release returned parameter with DsUtils.FreeAMMediaType
            </summary>
        </member>
        <member name="M:Mallenom.DShow.IPin.QueryPinInfo(Mallenom.DShow.PinInfo@)">
            <summary>
            Release returned parameter with DsUtils.FreePinInfo
            </summary>
        </member>
        <member name="M:Mallenom.DShow.IMediaSample.GetMediaType(Mallenom.DShow.AMMediaType@)">
            <summary>
            Returned object must be released with DsUtils.FreeAMMediaType()
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AMFilterMiscFlags">
            <summary>
            From _AM_FILTER_MISC_FLAGS
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AMStreamInfoFlags">
            <summary>
            From AM_STREAM_INFO_FLAGS
            </summary>
        </member>
        <member name="T:Mallenom.DShow.MPEG2Program">
            <summary>
            From MPEG2_PROGRAM_* defines
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AMAudioRendererStatParam">
            <summary>
            From _AM_AUDIO_RENDERER_STAT_PARAM
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AMStreamInfo">
            <summary>
            From AM_STREAM_INFO
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DVDecoderResolution">
            <summary>
            From _DVDECODERRESOLUTION
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AMIntfSearchFlags">
            <summary>
            From _AM_INTF_SEARCH_FLAGS
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AMQueryDecoder">
            <summary>
            From AM_QUERY_DECODER_* defines
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DecoderCap">
            <summary>
            From DECODER_CAP_* defines
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DecimationUsage">
            <summary>
            From DECIMATION_USAGE
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AMOverlayFX">
            <summary>
            From AMOVERLAYFX
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AMResCtlReserveFlags">
            <summary>
            From _AMRESCTL_RESERVEFLAGS
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AMStreamSelectInfoFlags">
            <summary>
            From _AMSTREAMSELECTINFOFLAGS
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AMStreamSelectEnableFlags">
            <summary>
            From _AMSTREAMSELECTENABLEFLAGS
            </summary>
        </member>
        <member name="T:Mallenom.DShow.Merit">
            <summary>
            unnamed enum
            </summary>
        </member>
        <member name="T:Mallenom.DShow.ColorKey">
            <summary>
            From COLORKEY
            </summary>
        </member>
        <member name="T:Mallenom.DShow.RegPinMedium">
            <summary>
            From REGPINMEDIUM
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DVInfo">
            <summary>
            From DVINFO
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DVEncoderResolution">
            <summary>
            From _DVENCODERRESOLUTION
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DVEncoderFormat">
            <summary>
            From _DVENCODERFORMAT
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DVEncoderVideoFormat">
            <summary>
            From _DVENCODERVIDEOFORMAT
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AMRenderExFlags">
            <summary>
            From _AM_RENSDEREXFLAGS
            </summary>
        </member>
        <member name="T:Mallenom.DShow.InterleavingMode">
            <summary>
            From InterleavingMode
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AMFileSinkFlags">
            <summary>
            From AM_FILESINK_FLAGS
            </summary>
        </member>
        <member name="T:Mallenom.DShow.KSPropertySupport">
            <summary>
            From KSPROPERTY_SUPPORT_* defines
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AMPropertyPin">
            <summary>
            From AMPROPERTY_PIN
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AMTunerSubChannel">
            <summary>
            From AMTunerSubChannel
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AMTunerSignalStrength">
            <summary>
            From AMTunerSignalStrength
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AMTunerModeType">
            <summary>
            From AMTunerModeType
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AMTunerEventType">
            <summary>
            From AMTunerEventType
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AnalogVideoStandard">
            <summary>
            From AnalogVideoStandard
            </summary>
        </member>
        <member name="T:Mallenom.DShow.TunerInputType">
            <summary>
            From TunerInputType
            </summary>
        </member>
        <member name="T:Mallenom.DShow.VideoControlFlags">
            <summary>
            From VideoControlFlags
            </summary>
        </member>
        <member name="T:Mallenom.DShow.TVAudioMode">
            <summary>
            From TVAudioMode
            </summary>
        </member>
        <member name="T:Mallenom.DShow.VideoProcAmpProperty">
            <summary>
            From VideoProcAmpProperty
            </summary>
        </member>
        <member name="T:Mallenom.DShow.VideoProcAmpFlags">
            <summary>
            From VideoProcAmpFlags
            </summary>
        </member>
        <member name="T:Mallenom.DShow.PhysicalConnectorType">
            <summary>
            From PhysicalConnectorType
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AMTVAudioEventType">
            <summary>
            From AMTVAudioEventType
            </summary>
        </member>
        <member name="T:Mallenom.DShow.CompressionCaps">
            <summary>
            From CompressionCaps
            </summary>
        </member>
        <member name="T:Mallenom.DShow.VfwCompressDialogs">
            <summary>
            From VfwCompressDialogs
            </summary>
        </member>
        <member name="T:Mallenom.DShow.VfwCaptureDialogs">
            <summary>
            From VfwCaptureDialogs
            </summary>
        </member>
        <member name="T:Mallenom.DShow.ExtDevicePort">
            <summary>
            From DEV_PORT_*
            </summary>
        </member>
        <member name="T:Mallenom.DShow.ExtDeviceCaps">
            <summary>
            From ED_DEVCAP*, ED_DEVTYPE* etc.
            </summary>
        </member>
        <member name="T:Mallenom.DShow.ExtTransportCaps">
            <summary>
            From ED_TRANSCAP*
            </summary>
        </member>
        <member name="T:Mallenom.DShow.ExtTransportMediaStates">
            <summary>
            From ED_MEDIA*
            </summary>
        </member>
        <member name="T:Mallenom.DShow.ExtTransportModes">
            <summary>
            From ED_MODE*
            </summary>
        </member>
        <member name="T:Mallenom.DShow.ExtTransportStatus">
            <summary>
            From ED_MEDIA* etc.
            </summary>
        </member>
        <member name="T:Mallenom.DShow.ExtTransportParameters">
            <summary>
            From ED_TRANSBASIC* etc.
            </summary>
        </member>
        <member name="T:Mallenom.DShow.ExtTransportAudio">
            <summary>
            From ED_AUDIO*
            </summary>
        </member>
        <member name="T:Mallenom.DShow.ExtTransportEdit">
            <summary>
            From ED_EDIT*
            </summary>
        </member>
        <member name="T:Mallenom.DShow.VideoStreamConfigCaps">
            <summary>
            From VIDEO_STREAM_CONFIG_CAPS
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AudioStreamConfigCaps">
            <summary>
            From AUDIO_STREAM_CONFIG_CAPS
            </summary>
        </member>
        <member name="T:Mallenom.DShow.Quality">
            <summary>
            From Quality
            </summary>
        </member>
        <member name="T:Mallenom.DShow.QualityMessageType">
            <summary>
            From QualityMessageType
            </summary>
        </member>
        <member name="T:Mallenom.DShow.CameraControlProperty">
            <summary>
            From CameraControlProperty
            </summary>
        </member>
        <member name="T:Mallenom.DShow.CameraControlFlags">
            <summary>
            From CameraControlFlags
            </summary>
        </member>
        <member name="T:Mallenom.DShow.NotifyFlags">
            <summary>
            From define AM_MEDIAEVENT_NONOTIFY
            </summary>
        </member>
        <member name="T:Mallenom.DShow.OABool">
            <summary>
            From #define OATRUE/OAFALSE
            </summary>
        </member>
        <member name="T:Mallenom.DShow.WindowStyle">
            <summary>
            From WS_* defines
            </summary>
        </member>
        <member name="T:Mallenom.DShow.WindowStyleEx">
            <summary>
            From WS_EX_* defines
            </summary>
        </member>
        <member name="T:Mallenom.DShow.WindowState">
            <summary>
            From SW_* defines
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DispatchFlags">
            <summary>
            From DISPATCH_* defines
            </summary>
        </member>
        <member name="M:Mallenom.DShow.DES.DESError.ThrowExceptionForHR(System.Int32)">
            <summary>
            If hr has a "failed" status code (E_*), throw an exception.  Note that status
            messages (S_*) are not considered failure codes.  If DES or DShow error text
            is available, it is used to build the exception, otherwise a generic com error
            is thrown.
            </summary>
            <param name="hr">The HRESULT to check</param>
        </member>
        <member name="T:Mallenom.DShow.DES.AMTimeline">
            <summary>
            From CLSID_AMTimeline
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DES.PropertySetter">
            <summary>
            From CLSID_PropertySetter
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DES.AMTimelineObj">
            <summary>
            From CLSID_AMTimelineObj
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DES.AMTimelineSrc">
            <summary>
            From CLSID_AMTimelineSrc
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DES.AMTimelineTrack">
            <summary>
            From CLSID_AMTimelineTrack
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DES.AMTimelineComp">
            <summary>
            From CLSID_AMTimelineComp
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DES.AMTimelineGroup">
            <summary>
            From CLSID_AMTimelineGroup
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DES.AMTimelineTrans">
            <summary>
            From CLSID_AMTimelineTrans
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DES.AMTimelineEffect">
            <summary>
            From CLSID_AMTimelineEffect
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DES.RenderEngine">
            <summary>
            From CLSID_RenderEngine
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DES.SmartRenderEngine">
            <summary>
            From CLSID_SmartRenderEngine
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DES.AudMixer">
            <summary>
            From CLSID_AudMixer
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DES.Xml2Dex">
            <summary>
            From CLSID_Xml2Dex
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DES.MediaLocator">
            <summary>
            From CLSID_MediaLocator
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DES.MediaDet">
            <summary>
            From CLSID_MediaDet
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DES.DxtCompositor">
            <summary>
            From CLSID_DxtCompositor
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DES.DxtAlphaSetter">
            <summary>
            From CLSID_DxtAlphaSetter
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DES.DxtJpeg">
            <summary>
            From CLSID_DxtJpeg
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DES.ColorSource">
            <summary>
            From CLSID_ColorSource
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DES.DxtKey">
            <summary>
            From CLSID_DxtKey
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DES.TimelineMajorType">
            <summary>
            From TIMELINE_MAJOR_TYPE
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DES.TimelineInsertMode">
            <summary>
            From unnamed enum
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DES.SFNValidateFlags">
            <summary>
            From unnamed enum
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DES.SCompFmt0">
            <summary>
            From SCompFmt0
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DES.ResizeFlags">
            <summary>
            From unnamed enum
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DES.DexterFTrackSearchFlags">
            <summary>
            From DEXTERF_TRACK_SEARCH_FLAGS
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DES.DexterParam">
            <summary>
            From DEXTER_PARAM
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DES.ConnectFDynamic">
            <summary>
            From unnamed enum
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DES.DexterValue">
            <summary>
            From DEXTER_VALUE
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DES.Dexterf">
            <summary>
            From DEXTERF
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DES.DESErrorCode">
            <summary>
            From DEX_IDS_* defines
            </summary>
        </member>
        <member name="T:Mallenom.DShow.CDef">
            <summary>
            From CDEF_CLASS_* defines
            </summary>
        </member>
        <member name="T:Mallenom.DShow.PinConnectedStatus">
            <summary>
            Not from DirectShow
            </summary>
        </member>
        <member name="T:Mallenom.DShow.BitmapInfo">
            <summary>
            From BITMAPINFO
            </summary>
        </member>
        <member name="T:Mallenom.DShow.BitmapInfoHeader">
            <summary>
            From BITMAPINFOHEADER
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DDPixelFormat">
            <summary>
            From DDPIXELFORMAT
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DsCAUUID">
            <summary>
            From CAUUID
            </summary>
        </member>
        <member name="M:Mallenom.DShow.DsCAUUID.ToGuidArray">
            <summary>
            Perform a manual marshaling of pElems to retrieve an array of System.Guid.
            Assume this structure has been already filled by the ISpecifyPropertyPages.GetPages() method.
            </summary>
            <returns>A managed representation of pElems (cElems items)</returns>
        </member>
        <member name="T:Mallenom.DShow.DsLong">
            <summary>
            DirectShowLib.DsLong is a wrapper class around a <see cref="T:System.Int64"/> value type.
            </summary>
            <remarks>
            This class is necessary to enable null paramters passing.
            </remarks>
        </member>
        <member name="M:Mallenom.DShow.DsLong.#ctor(System.Int64)">
            <summary>
            Constructor
            Initialize a new instance of DirectShowLib.DsLong with the Value parameter
            </summary>
            <param name="Value">Value to assign to this new instance</param>
        </member>
        <member name="M:Mallenom.DShow.DsLong.ToString">
            <summary>
            Get a string representation of this DirectShowLib.DsLong Instance.
            </summary>
            <returns>A string representing this instance</returns>
        </member>
        <member name="M:Mallenom.DShow.DsLong.op_Implicit(Mallenom.DShow.DsLong)~System.Int64">
             <summary>
             Define implicit cast between DirectShowLib.DsLong and System.Int64 for languages supporting this feature.
             VB.Net doesn't support implicit cast. <see cref="M:Mallenom.DShow.DsLong.ToInt64"/> for similar functionality.
             <code>
               // Define a new DsLong instance
               DsLong dsL = new DsLong(9876543210);
               // Do implicit cast between DsLong and Int64
               long l = dsL;
            
               Console.WriteLine(l.ToString());
             </code>
             </summary>
             <param name="l">DirectShowLib.DsLong to be cast</param>
             <returns>A casted System.Int64</returns>
        </member>
        <member name="M:Mallenom.DShow.DsLong.op_Implicit(System.Int64)~Mallenom.DShow.DsLong">
             <summary>
             Define implicit cast between System.Int64 and DirectShowLib.DsLong for languages supporting this feature.
             VB.Net doesn't support implicit cast. <see cref="M:Mallenom.DShow.DsGuid.FromInt64"/> for similar functionality.
             <code>
               // Define a new Int64 instance
               long l = 9876543210;
               // Do implicit cast between Int64 and DsLong
               DsLong dsl = l;
            
               Console.WriteLine(dsl.ToString());
             </code>
             </summary>
             <param name="l">System.Int64 to be cast</param>
             <returns>A casted DirectShowLib.DsLong</returns>
        </member>
        <member name="M:Mallenom.DShow.DsLong.ToInt64">
            <summary>
            Get the System.Int64 equivalent to this DirectShowLib.DsLong instance.
            </summary>
            <returns>A System.Int64</returns>
        </member>
        <member name="M:Mallenom.DShow.DsLong.FromInt64(System.Int64)">
            <summary>
            Get a new DirectShowLib.DsLong instance for a given System.Int64
            </summary>
            <param name="l">The System.Int64 to wrap into a DirectShowLib.DsLong</param>
            <returns>A new instance of DirectShowLib.DsLong</returns>
        </member>
        <member name="T:Mallenom.DShow.DsGuid">
            <summary>
            DirectShowLib.DsGuid is a wrapper class around a System.Guid value type.
            </summary>
            <remarks>
            This class is necessary to enable null paramters passing.
            </remarks>
        </member>
        <member name="M:Mallenom.DShow.DsGuid.#ctor">
            <summary>
            Empty constructor. 
            Initialize it with System.Guid.Empty
            </summary>
        </member>
        <member name="M:Mallenom.DShow.DsGuid.#ctor(System.String)">
            <summary>
            Constructor.
            Initialize this instance with a given System.Guid string representation.
            </summary>
            <param name="g">A valid System.Guid as string</param>
        </member>
        <member name="M:Mallenom.DShow.DsGuid.#ctor(System.Guid)">
            <summary>
            Constructor.
            Initialize this instance with a given System.Guid.
            </summary>
            <param name="g">A System.Guid value type</param>
        </member>
        <member name="M:Mallenom.DShow.DsGuid.ToString">
            <summary>
            Get a string representation of this DsGuid Instance.
            </summary>
            <returns>A string representing this instance</returns>
        </member>
        <member name="M:Mallenom.DShow.DsGuid.ToString(System.String)">
            <summary>
            Get a string representation of this DsGuid Instance with a specific format.
            </summary>
            <param name="format"><see cref="M:System.Guid.ToString(System.String)"/> for a description of the format parameter.</param>
            <returns>A string representing this instance according to the format parameter</returns>
        </member>
        <member name="M:Mallenom.DShow.DsGuid.op_Implicit(Mallenom.DShow.DsGuid)~System.Guid">
             <summary>
             Define implicit cast between DirectShowLib.DsGuid and System.Guid for languages supporting this feature.
             VB.Net doesn't support implicit cast. <see cref="M:Mallenom.DShow.DsGuid.ToGuid"/> for similar functionality.
             <code>
               // Define a new DsGuid instance
               DsGuid dsG = new DsGuid("{33D57EBF-7C9D-435e-A15E-D300B52FBD91}");
               // Do implicit cast between DsGuid and Guid
               Guid g = dsG;
            
               Console.WriteLine(g.ToString());
             </code>
             </summary>
             <param name="g">DirectShowLib.DsGuid to be cast</param>
             <returns>A casted System.Guid</returns>
        </member>
        <member name="M:Mallenom.DShow.DsGuid.op_Implicit(System.Guid)~Mallenom.DShow.DsGuid">
             <summary>
             Define implicit cast between System.Guid and DirectShowLib.DsGuid for languages supporting this feature.
             VB.Net doesn't support implicit cast. <see cref="M:Mallenom.DShow.DsGuid.FromGuid(System.Guid)"/> for similar functionality.
             <code>
               // Define a new Guid instance
               Guid g = new Guid("{B9364217-366E-45f8-AA2D-B0ED9E7D932D}");
               // Do implicit cast between Guid and DsGuid
               DsGuid dsG = g;
            
               Console.WriteLine(dsG.ToString());
             </code>
             </summary>
             <param name="g">System.Guid to be cast</param>
             <returns>A casted DsGuid</returns>
        </member>
        <member name="M:Mallenom.DShow.DsGuid.ToGuid">
            <summary>
            Get the System.Guid equivalent to this DirectShowLib.DsGuid instance.
            </summary>
            <returns>A System.Guid</returns>
        </member>
        <member name="M:Mallenom.DShow.DsGuid.FromGuid(System.Guid)">
            <summary>
            Get a new DsGuid instance for a given System.Guid
            </summary>
            <param name="g">The System.Guid to wrap into a DsGuid</param>
            <returns>A new instance of DsGuid</returns>
        </member>
        <member name="T:Mallenom.DShow.DsInt">
            <summary>
            DirectShowLib.DsInt is a wrapper class around a <see cref="T:System.Int32"/> value type.
            </summary>
            <remarks>
            This class is necessary to enable null paramters passing.
            </remarks>
        </member>
        <member name="M:Mallenom.DShow.DsInt.#ctor(System.Int32)">
            <summary>
            Constructor
            Initialize a new instance of DirectShowLib.DsInt with the Value parameter
            </summary>
            <param name="Value">Value to assign to this new instance</param>
        </member>
        <member name="M:Mallenom.DShow.DsInt.ToString">
            <summary>
            Get a string representation of this DirectShowLib.DsInt Instance.
            </summary>
            <returns>A string representing this instance</returns>
        </member>
        <member name="M:Mallenom.DShow.DsInt.op_Implicit(Mallenom.DShow.DsInt)~System.Int32">
             <summary>
             Define implicit cast between DirectShowLib.DsInt and System.Int64 for languages supporting this feature.
             VB.Net doesn't support implicit cast. <see cref="M:Mallenom.DShow.DsInt.ToInt64"/> for similar functionality.
             <code>
               // Define a new DsInt instance
               DsInt dsI = new DsInt(0x12345678);
               // Do implicit cast between DsInt and Int32
               int i = dsI;
            
               Console.WriteLine(i.ToString());
             </code>
             </summary>
             <param name="l">DirectShowLib.DsInt to be cast</param>
             <returns>A casted System.Int32</returns>
        </member>
        <member name="M:Mallenom.DShow.DsInt.op_Implicit(System.Int32)~Mallenom.DShow.DsInt">
             <summary>
             Define implicit cast between System.Int32 and DirectShowLib.DsInt for languages supporting this feature.
             VB.Net doesn't support implicit cast. <see cref="M:Mallenom.DShow.DsGuid.FromInt32"/> for similar functionality.
             <code>
               // Define a new Int32 instance
               int i = 0x12345678;
               // Do implicit cast between Int64 and DsInt
               DsInt dsI = i;
            
               Console.WriteLine(dsI.ToString());
             </code>
             </summary>
             <param name="l">System.Int32 to be cast</param>
             <returns>A casted DirectShowLib.DsInt</returns>
        </member>
        <member name="M:Mallenom.DShow.DsInt.ToInt32">
            <summary>
            Get the System.Int32 equivalent to this DirectShowLib.DsInt instance.
            </summary>
            <returns>A System.Int32</returns>
        </member>
        <member name="M:Mallenom.DShow.DsInt.FromInt32(System.Int32)">
            <summary>
            Get a new DirectShowLib.DsInt instance for a given System.Int32
            </summary>
            <param name="l">The System.Int32 to wrap into a DsInt</param>
            <returns>A new instance of DsInt</returns>
        </member>
        <member name="T:Mallenom.DShow.DsShort">
            <summary>
            DirectShowLib.DsShort is a wrapper class around a <see cref="T:System.Int16"/> value type.
            </summary>
            <remarks>
            This class is necessary to enable null paramters passing.
            </remarks>
        </member>
        <member name="M:Mallenom.DShow.DsShort.#ctor(System.Int16)">
            <summary>
            Constructor
            Initialize a new instance of DirectShowLib.DsShort with the Value parameter
            </summary>
            <param name="Value">Value to assign to this new instance</param>
        </member>
        <member name="M:Mallenom.DShow.DsShort.ToString">
            <summary>
            Get a string representation of this DirectShowLib.DsShort Instance.
            </summary>
            <returns>A string representing this instance</returns>
        </member>
        <member name="M:Mallenom.DShow.DsShort.op_Implicit(Mallenom.DShow.DsShort)~System.Int16">
             <summary>
             Define implicit cast between DsShort and System.Int16 for languages supporting this feature.
             VB.Net doesn't support implicit cast. <see cref="M:Mallenom.DShow.DsShort.ToInt64"/> for similar functionality.
             <code>
               // Define a new DsShort instance
               DsShort dsS = new DsShort(0x1234);
               // Do implicit cast between DsShort and Int16
               short s = dsS;
            
               Console.WriteLine(s.ToString());
             </code>
             </summary>
             <param name="l">DsShort to be cast</param>
             <returns>A casted System.Int16</returns>
        </member>
        <member name="M:Mallenom.DShow.DsShort.op_Implicit(System.Int16)~Mallenom.DShow.DsShort">
             <summary>
             Define implicit cast between System.Int16 and DsShort for languages supporting this feature.
             VB.Net doesn't support implicit cast. <see cref="M:Mallenom.DShow.DsGuid.FromInt16"/> for similar functionality.
             <code>
               // Define a new Int16 instance
               short s = 0x1234;
               // Do implicit cast between Int64 and DsShort
               DsShort dsS = s;
            
               Console.WriteLine(dsS.ToString());
             </code>
             </summary>
             <param name="l">System.Int16 to be cast</param>
             <returns>A casted DsShort</returns>
        </member>
        <member name="M:Mallenom.DShow.DsShort.ToInt16">
            <summary>
            Get the System.Int16 equivalent to this DsShort instance.
            </summary>
            <returns>A System.Int16</returns>
        </member>
        <member name="M:Mallenom.DShow.DsShort.FromInt16(System.Int16)">
            <summary>
            Get a new DsShort instance for a given System.Int64
            </summary>
            <param name="l">The System.Int16 to wrap into a DsShort</param>
            <returns>A new instance of DsShort</returns>
        </member>
        <member name="T:Mallenom.DShow.DsRect">
            <summary>
            DirectShowLib.DsRect is a managed representation of the Win32 RECT structure.
            </summary>
        </member>
        <member name="M:Mallenom.DShow.DsRect.#ctor">
            <summary>
            Empty contructor. Initialize all fields to 0
            </summary>
        </member>
        <member name="M:Mallenom.DShow.DsRect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            A parametred constructor. Initialize fields with given values.
            </summary>
            <param name="left">the left value</param>
            <param name="top">the top value</param>
            <param name="right">the right value</param>
            <param name="bottom">the bottom value</param>
        </member>
        <member name="M:Mallenom.DShow.DsRect.#ctor(System.Drawing.Rectangle)">
            <summary>
            A parametred constructor. Initialize fields with a given <see cref="T:System.Drawing.Rectangle"/>.
            </summary>
            <param name="rectangle">A <see cref="T:System.Drawing.Rectangle"/></param>
            <remarks>
            Warning, DsRect define a rectangle by defining two of his corners and <see cref="T:System.Drawing.Rectangle"/> define a rectangle with his upper/left corner, his width and his height.
            </remarks>
        </member>
        <member name="M:Mallenom.DShow.DsRect.ToString">
            <summary>
            Provide de string representation of this DsRect instance
            </summary>
            <returns>A string formated like this : [left, top - right, bottom]</returns>
        </member>
        <member name="M:Mallenom.DShow.DsRect.op_Implicit(Mallenom.DShow.DsRect)~System.Drawing.Rectangle">
             <summary>
             Define implicit cast between DirectShowLib.DsRect and System.Drawing.Rectangle for languages supporting this feature.
             VB.Net doesn't support implicit cast. <see cref="M:Mallenom.DShow.DsRect.ToRectangle"/> for similar functionality.
             <code>
               // Define a new Rectangle instance
               Rectangle r = new Rectangle(0, 0, 100, 100);
               // Do implicit cast between Rectangle and DsRect
               DsRect dsR = r;
            
               Console.WriteLine(dsR.ToString());
             </code>
             </summary>
             <param name="r">a DsRect to be cast</param>
             <returns>A casted System.Drawing.Rectangle</returns>
        </member>
        <member name="M:Mallenom.DShow.DsRect.op_Implicit(System.Drawing.Rectangle)~Mallenom.DShow.DsRect">
             <summary>
             Define implicit cast between System.Drawing.Rectangle and DirectShowLib.DsRect for languages supporting this feature.
             VB.Net doesn't support implicit cast. <see cref="M:Mallenom.DShow.DsRect.FromRectangle"/> for similar functionality.
             <code>
               // Define a new DsRect instance
               DsRect dsR = new DsRect(0, 0, 100, 100);
               // Do implicit cast between DsRect and Rectangle
               Rectangle r = dsR;
            
               Console.WriteLine(r.ToString());
             </code>
             </summary>
             <param name="r">A System.Drawing.Rectangle to be cast</param>
             <returns>A casted DsRect</returns>
        </member>
        <member name="M:Mallenom.DShow.DsRect.ToRectangle">
            <summary>
            Get the System.Drawing.Rectangle equivalent to this DirectShowLib.DsRect instance.
            </summary>
            <returns>A System.Drawing.Rectangle</returns>
        </member>
        <member name="M:Mallenom.DShow.DsRect.FromRectangle(System.Drawing.Rectangle)">
            <summary>
            Get a new DirectShowLib.DsRect instance for a given <see cref="T:System.Drawing.Rectangle"/>
            </summary>
            <param name="r">The <see cref="T:System.Drawing.Rectangle"/> used to initialize this new DirectShowLib.DsGuid</param>
            <returns>A new instance of DirectShowLib.DsGuid</returns>
        </member>
        <member name="M:Mallenom.DShow.DsError.ThrowExceptionForHR(System.Int32)">
            <summary>
            If hr has a "failed" status code (E_*), throw an exception.  Note that status
            messages (S_*) are not considered failure codes.  If DirectShow error text
            is available, it is used to build the exception, otherwise a generic com error
            is thrown.
            </summary>
            <param name="hr">The HRESULT to check</param>
        </member>
        <member name="M:Mallenom.DShow.DsError.GetErrorText(System.Int32)">
            <summary>
            Returns a string describing a DS error.  Works for both error codes
            and Status codes (values >= 0)
            </summary>
            <param name="hr">HRESULT for which to get description</param>
            <returns>The string, or null if no error text can be found</returns>
        </member>
        <member name="M:Mallenom.DShow.DsUtils.GetPinCategory(Mallenom.DShow.IPin)">
            <summary>
            Returns the PinCategory of the specified pin.  Usually a member of PinCategory.  Not all pins have a category.
            </summary>
            <param name="pPin"></param>
            <returns>Guid indicating pin category or Guid.Empty on no category.  Usually a member of PinCategory</returns>
        </member>
        <member name="M:Mallenom.DShow.DsUtils.FreeAMMediaType(Mallenom.DShow.AMMediaType)">
            <summary>
             Free the nested structures and release any
             COM objects within an AMMediaType struct.
            </summary>
        </member>
        <member name="M:Mallenom.DShow.DsUtils.FreePinInfo(Mallenom.DShow.PinInfo)">
            <summary>
             Free the nested interfaces within a PinInfo struct.
            </summary>
        </member>
        <member name="P:Mallenom.DShow.DsDevice.DevicePath">
            <summary>
            Returns a unique identifier for a device
            </summary>
        </member>
        <member name="M:Mallenom.DShow.DsDevice.GetDevicesOfCat(System.Guid)">
            <summary>
            Returns an array of DsDevices of type devcat.
            </summary>
            <param name="FilterCategory">Any one of FilterCategory</param>
        </member>
        <member name="M:Mallenom.DShow.DsDevice.GetFriendlyName">
            <summary>
            Get the FriendlyName for a moniker
            </summary>
            <returns>String or null on error</returns>
        </member>
        <member name="M:Mallenom.DShow.DsFindPin.ByDirection(Mallenom.DShow.IBaseFilter,Mallenom.DShow.PinDirection,System.Int32)">
            <summary>
            Scans a filter's pins looking for a pin in the specified direction
            </summary>
            <param name="vSource">The filter to scan</param>
            <param name="vDir">The direction to find</param>
            <param name="iIndex">Zero based index (ie 2 will return the third pin in the specified direction)</param>
            <returns>The matching pin, or null if not found</returns>
        </member>
        <member name="M:Mallenom.DShow.DsFindPin.ByName(Mallenom.DShow.IBaseFilter,System.String)">
            <summary>
            Scans a filter's pins looking for a pin with the specified name
            </summary>
            <param name="vSource">The filter to scan</param>
            <param name="vPinName">The pin name to find</param>
            <returns>The matching pin, or null if not found</returns>
        </member>
        <member name="M:Mallenom.DShow.DsFindPin.ByCategory(Mallenom.DShow.IBaseFilter,System.Guid,System.Int32)">
            <summary>
            Scan's a filter's pins looking for a pin with the specified category
            </summary>
            <param name="vSource">The filter to scan</param>
            <param name="PinCategory">The guid from PinCategory to scan for</param>
            <param name="iIndex">Zero based index (ie 2 will return the third pin of the specified category)</param>
            <returns>The matching pin, or null if not found</returns>
        </member>
        <member name="M:Mallenom.DShow.DsFindPin.ByConnectionStatus(Mallenom.DShow.IBaseFilter,Mallenom.DShow.PinConnectedStatus,System.Int32)">
            <summary>
            Scans a filter's pins looking for a pin with the specified connection status
            </summary>
            <param name="vSource">The filter to scan</param>
            <param name="vStat">The status to find (connected/unconnected)</param>
            <param name="iIndex">Zero based index (ie 2 will return the third pin with the specified status)</param>
            <returns>The matching pin, or null if not found</returns>
        </member>
        <member name="M:Mallenom.DShow.DsToString.AMMediaTypeToString(Mallenom.DShow.AMMediaType)">
            <summary>
            Produces a usable string that describes the MediaType object
            </summary>
            <returns>Concatenation of MajorType + SubType + FormatType + Fixed + Temporal + SampleSize.ToString</returns>
        </member>
        <member name="M:Mallenom.DShow.DsToString.MediaTypeToString(System.Guid)">
            <summary>
            Converts AMMediaType.MajorType Guid to a readable string
            </summary>
            <returns>MajorType Guid as a readable string or Guid if unrecognized</returns>
        </member>
        <member name="M:Mallenom.DShow.DsToString.MediaSubTypeToString(System.Guid)">
            <summary>
            Converts the AMMediaType.SubType Guid to a readable string
            </summary>
            <returns>SubType Guid as a readable string or Guid if unrecognized</returns>
        </member>
        <member name="M:Mallenom.DShow.DsToString.MediaFormatTypeToString(System.Guid)">
            <summary>
            Converts the AMMediaType.FormatType Guid to a readable string
            </summary>
            <returns>FormatType Guid as a readable string or Guid if unrecognized</returns>
        </member>
        <member name="M:Mallenom.DShow.DsToString.WalkClass(System.Type,System.Guid)">
            <summary>
            Use reflection to walk a class looking for a property containing a specified guid
            </summary>
            <param name="MyType">Class to scan</param>
            <param name="guid">Guid to scan for</param>
            <returns>String representing property name that matches, or Guid.ToString() for no match</returns>
        </member>
        <member name="T:Mallenom.DShow.Dvd.DvdDomain">
            <summary>
            From DVD_DOMAIN
            </summary>
        </member>
        <member name="T:Mallenom.DShow.Dvd.DvdMenuId">
            <summary>
            From DVD_MENU_ID
            </summary>
        </member>
        <member name="T:Mallenom.DShow.Dvd.DvdDiscSide">
            <summary>
            From DVD_DISC_SIDE
            </summary>
        </member>
        <member name="T:Mallenom.DShow.Dvd.DvdPreferredDisplayMode">
            <summary>
            From DVD_PREFERRED_DISPLAY_MODE
            </summary>
        </member>
        <member name="T:Mallenom.DShow.Dvd.DvdFrameRate">
            <summary>
            From DVD_FRAMERATE
            </summary>
        </member>
        <member name="T:Mallenom.DShow.Dvd.DvdTimeCodeFlags">
            <summary>
            From DVD_TIMECODE_FLAGS
            </summary>
        </member>
        <member name="T:Mallenom.DShow.Dvd.ValidUOPFlag">
            <summary>
            From VALID_UOP_FLAG
            </summary>
        </member>
        <member name="T:Mallenom.DShow.Dvd.DvdCmdFlags">
            <summary>
            From DVD_CMD_FLAGS
            </summary>
        </member>
        <member name="T:Mallenom.DShow.Dvd.DvdOptionFlag">
            <summary>
            From DVD_OPTION_FLAG
            </summary>
        </member>
        <member name="T:Mallenom.DShow.Dvd.DvdRelativeButton">
            <summary>
            From DVD_RELATIVE_BUTTON
            </summary>
        </member>
        <member name="T:Mallenom.DShow.Dvd.DvdParentalLevel">
            <summary>
            From DVD_PARENTAL_LEVEL
            </summary>
        </member>
        <member name="T:Mallenom.DShow.Dvd.DvdAudioLangExt">
            <summary>
            From DVD_AUDIO_LANG_EXT
            </summary>
        </member>
        <member name="T:Mallenom.DShow.Dvd.DvdSubPictureLangExt">
            <summary>
            From DVD_SUBPICTURE_LANG_EXT
            </summary>
        </member>
        <member name="T:Mallenom.DShow.Dvd.DvdAudioAppMode">
            <summary>
            From DVD_AUDIO_APPMODE
            </summary>
        </member>
        <member name="T:Mallenom.DShow.Dvd.DvdAudioFormat">
            <summary>
            From DVD_AUDIO_FORMAT
            </summary>
        </member>
        <member name="T:Mallenom.DShow.Dvd.DvdKaraokeDownMix">
            <summary>
            From DVD_KARAOKE_DOWNMIX
            </summary>
        </member>
        <member name="T:Mallenom.DShow.Dvd.DvdKaraokeContents">
            <summary>
            From DVD_KARAOKE_CONTENTS
            </summary>
        </member>
        <member name="T:Mallenom.DShow.Dvd.DvdKaraokeAssignment">
            <summary>
            From DVD_KARAOKE_ASSIGNMENT
            </summary>
        </member>
        <member name="T:Mallenom.DShow.Dvd.DvdVideoCompression">
            <summary>
            From DVD_VIDEO_COMPRESSION
            </summary>
        </member>
        <member name="T:Mallenom.DShow.Dvd.DvdSubPictureType">
            <summary>
            From DVD_SUBPICTURE_TYPE
            </summary>
        </member>
        <member name="T:Mallenom.DShow.Dvd.DvdSubPictureCoding">
            <summary>
            From DVD_SUBPICTURE_CODING
            </summary>
        </member>
        <member name="T:Mallenom.DShow.Dvd.DvdTitleAppMode">
            <summary>
            From DVD_TITLE_APPMODE
            </summary>
        </member>
        <member name="T:Mallenom.DShow.Dvd.DvdTextStringType">
            <summary>
            From DVD_TextStringType
            </summary>
        </member>
        <member name="T:Mallenom.DShow.Dvd.DvdTextCharSet">
            <summary>
            From DVD_TextCharSet
            </summary>
        </member>
        <member name="T:Mallenom.DShow.Dvd.DvdAudioCaps">
            <summary>
            From DVD_AUDIO_CAPS_* defines
            </summary>
        </member>
        <member name="T:Mallenom.DShow.Dvd.AMDvdGraphFlags">
            <summary>
            From AM_DVD_GRAPH_FLAGS
            </summary>
        </member>
        <member name="T:Mallenom.DShow.Dvd.AMDvdStreamFlags">
            <summary>
            From AM_DVD_STREAM_FLAGS
            </summary>
        </member>
        <member name="T:Mallenom.DShow.Dvd.GPRMArray">
            <summary>
            From GPRMARRAY
            </summary>
        </member>
        <member name="T:Mallenom.DShow.Dvd.SPRMArray">
            <summary>
            From SPRMARRAY
            </summary>
        </member>
        <member name="T:Mallenom.DShow.Dvd.DvdHMSFTimeCode">
            <summary>
            From DVD_HMSF_TIMECODE
            </summary>
        </member>
        <member name="T:Mallenom.DShow.Dvd.DvdPlaybackLocation2">
            <summary>
            From DVD_PLAYBACK_LOCATION2
            </summary>
        </member>
        <member name="T:Mallenom.DShow.Dvd.DvdAudioAttributes">
            <summary>
            From DVD_AudioAttributes
            </summary>
        </member>
        <member name="T:Mallenom.DShow.Dvd.DvdMUAMixingInfo">
            <summary>
            From DVD_MUA_MixingInfo
            </summary>
        </member>
        <member name="T:Mallenom.DShow.Dvd.DvdMUACoeff">
            <summary>
            From DVD_MUA_Coeff
            </summary>
        </member>
        <member name="T:Mallenom.DShow.Dvd.DvdMultichannelAudioAttributes">
            <summary>
            From DVD_MultichannelAudioAttributes
            </summary>
        </member>
        <member name="T:Mallenom.DShow.Dvd.DvdKaraokeAttributes">
            <summary>
            From DVD_KaraokeAttributes
            </summary>
        </member>
        <member name="T:Mallenom.DShow.Dvd.DvdVideoAttributes">
            <summary>
            From DVD_VideoAttributes
            </summary>
        </member>
        <member name="T:Mallenom.DShow.Dvd.DvdSubpictureAttributes">
            <summary>
            From DVD_SubpictureAttributes
            </summary>
        </member>
        <member name="T:Mallenom.DShow.Dvd.DvdTitleAttributes">
            <summary>
            From DVD_TitleAttributes
            </summary>
        </member>
        <member name="T:Mallenom.DShow.Dvd.DvdMenuAttributes">
            <summary>
            From DVD_MenuAttributes
            </summary>
        </member>
        <member name="T:Mallenom.DShow.Dvd.DvdDecoderCaps">
            <summary>
            From DVD_DECODER_CAPS
            </summary>
        </member>
        <member name="T:Mallenom.DShow.Dvd.AMDvdRenderStatus">
            <summary>
            From AM_DVD_RENDERSTATUS
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AMPinFlowControl">
            <summary>
            From _AM_PIN_FLOW_CONTROL_BLOCK_FLAGS
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AMGraphConfigReconnect">
            <summary>
            From AM_GRAPH_CONFIG_RECONNECT_FLAGS
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AMFilterFlags">
            <summary>
            From _AM_FILTER_FLAGS
            </summary>
        </member>
        <member name="T:Mallenom.DShow.RemFilterFlags">
            <summary>
            From _REM_FILTER_FLAGS
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AMLine21CCLevel">
            <summary>
            From AM_LINE21_CCLEVEL
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AMLine21CCService">
            <summary>
            From AM_LINE21_CCSERVICE
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AMLine21CCState">
            <summary>
            From AM_LINE21_CCSTATE
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AMLine21DrawBGMode">
            <summary>
            From AM_LINE21_DRAWBGMODE
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DMO.DMOOutputDataBufferFlags">
            <summary>
            From _DMO_OUTPUT_DATA_BUFFER_FLAGS
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DMO.DMOEnumerator">
            <summary>
            From DMO_ENUM_FLAGS
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DMO.DMORegisterFlags">
            <summary>
            From DMO_REGISTER_FLAGS
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DMO.DMOProcessOutput">
            <summary>
            From DMO_PROCESS_OUTPUT_FLAGS
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DMO.DMOInputDataBuffer">
            <summary>
            From DMO_INPUT_DATA_BUFFER_FLAGS
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DMO.DMOInplaceProcess">
            <summary>
            From DMO_INPLACE_PROCESS_FLAGS
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DMO.DMOInputStreamInfo">
            <summary>
            From DMO_INPUT_STREAM_INFO_FLAGS
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DMO.DMOOutputStreamInfo">
            <summary>
            From DMO_OUTPUT_STREAM_INFO_FLAGS
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DMO.DMOSetType">
            <summary>
            From _DMO_SET_TYPE_FLAGS
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DMO.DMOInputStatusFlags">
            <summary>
            From DMO_INPUT_STATUS_FLAGS
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DMO.DMOVideoOutputStream">
            <summary>
            From DMO_VIDEO_OUTPUT_STREAM_FLAGS
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DMO.DMOPartialMediatype">
            <summary>
            From DMO_PARTIAL_MEDIATYPE
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DMO.DMOOutputDataBuffer">
            <summary>
            From DMO_OUTPUT_DATA_BUFFER
            </summary>
        </member>
        <member name="F:Mallenom.DShow.DMO.DMOCategory.AudioDecoder">
            <summary> DMOCATEGORY_AUDIO_DECODER </summary>
        </member>
        <member name="F:Mallenom.DShow.DMO.DMOCategory.AudioEncoder">
            <summary> DMOCATEGORY_AUDIO_ENCODER </summary>
        </member>
        <member name="F:Mallenom.DShow.DMO.DMOCategory.VideoDecoder">
            <summary> DMOCATEGORY_VIDEO_DECODER </summary>
        </member>
        <member name="F:Mallenom.DShow.DMO.DMOCategory.VideoEncoder">
            <summary> DMOCATEGORY_VIDEO_ENCODER </summary>
        </member>
        <member name="F:Mallenom.DShow.DMO.DMOCategory.AudioEffect">
            <summary> DMOCATEGORY_AUDIO_EFFECT </summary>
        </member>
        <member name="F:Mallenom.DShow.DMO.DMOCategory.VideoEffect">
            <summary> DMOCATEGORY_VIDEO_EFFECT </summary>
        </member>
        <member name="F:Mallenom.DShow.DMO.DMOCategory.AudioCaptureEffect">
            <summary> DMOCATEGORY_AUDIO_CAPTURE_EFFECT </summary>
        </member>
        <member name="M:Mallenom.DShow.DMO.DMOError.ThrowExceptionForHR(System.Int32)">
            <summary>
            If hr has a "failed" status code (E_*), throw an exception.  Note that status
            messages (S_*) are not considered failure codes.  If DMO or DShow error text
            is available, it is used to build the exception, otherwise a generic COM error
            is thrown.
            </summary>
            <param name="hr">The HRESULT to check</param>
        </member>
        <member name="F:Mallenom.DShow.DMO.MediaParamTimeFormat.Reference">
            <summary> GUID_TIME_REFERENCE </summary>
        </member>
        <member name="F:Mallenom.DShow.DMO.MediaParamTimeFormat.Music">
            <summary> GUID_TIME_MUSIC </summary>
        </member>
        <member name="F:Mallenom.DShow.DMO.MediaParamTimeFormat.Samples">
            <summary> GUID_TIME_SAMPLES, audio capture category </summary>
        </member>
        <member name="T:Mallenom.DShow.DMO.MPData">
            <summary>
            From MP_DATA
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DMO.MPEnvelopeSegment">
            <summary>
            From MP_ENVELOPE_SEGMENT
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DMO.MPFlags">
            <summary>
            From MPF_ENVLP_* defines
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DMO.MPType">
            <summary>
            From MP_TYPE
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DMO.MPCaps">
            <summary>
            From MP_CAPS_CURVE* defines
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DMO.ParamInfo">
            <summary>
            From MP_PARAMINFO
            </summary>
        </member>
        <member name="T:Mallenom.DShow.KSMultipleItem">
            <summary>
            From KSMULTIPLE_ITEM - Note that data is returned in the memory IMMEDIATELY following this struct.
            The Size parm indicates ths size of the KSMultipleItem plus the extra bytes.
            </summary>
        </member>
        <member name="M:Mallenom.DShow.IKsPin.KsQueryMediums(System.IntPtr@)">
            <summary>
            The caller must free the returned structures, using the CoTaskMemFree function
            </summary>
        </member>
        <member name="T:Mallenom.DShow.MixerData">
            <summary>
            From MIXER_DATA_* defines
            </summary>
        </member>
        <member name="T:Mallenom.DShow.MixerState">
            <summary>
            From MIXER_STATE_* defines
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DDColor">
            <summary>
            From DDCOLOR_* defines
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DDColorControl">
            <summary>
            From DDCOLORCONTROL
            </summary>
        </member>
        <member name="T:Mallenom.DShow.MPEGRequestType">
            <summary>
            From MPEG_REQUEST_TYPE
            </summary>
        </member>
        <member name="T:Mallenom.DShow.MPEGContextType">
            <summary>
            From MPEG_CONTEXT_TYPE
            </summary>
        </member>
        <member name="T:Mallenom.DShow.MPEGPacketList">
            <summary>
            From MPEG_PACKET_LIST
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DSMCCFilterOptions">
            <summary>
            From DSMCC_FILTER_OPTIONS
            </summary>
        </member>
        <member name="T:Mallenom.DShow.ATSCFilterOptions">
            <summary>
            From ATSC_FILTER_OPTIONS
            </summary>
        </member>
        <member name="T:Mallenom.DShow.MPEG2Filter">
            <summary>
            From MPEG2_FILTER
            </summary>
        </member>
        <member name="T:Mallenom.DShow.MPEGContextUnion">
            <summary>
            From unnamed union
            </summary>
        </member>
        <member name="T:Mallenom.DShow.BCSDeMux">
            <summary>
            From MPEG_BCS_DEMUX
            </summary>
        </member>
        <member name="T:Mallenom.DShow.MPEGWinSock">
            <summary>
            From MPEG_WINSOCK
            </summary>
        </member>
        <member name="T:Mallenom.DShow.MPEGContext">
            <summary>
            From MPEG_CONTEXT
            </summary>
        </member>
        <member name="T:Mallenom.DShow.MPEGStreamBuffer">
            <summary>
            From MPEG_STREAM_BUFFER
            </summary>
        </member>
        <member name="T:Mallenom.DShow.WSTLevel">
            <summary>
            From AM_WST_LEVEL
            </summary>
        </member>
        <member name="T:Mallenom.DShow.WSTService">
            <summary>
            From AM_WST_SERVICE
            </summary>
        </member>
        <member name="T:Mallenom.DShow.WSTState">
            <summary>
            From AM_WST_STATE
            </summary>
        </member>
        <member name="T:Mallenom.DShow.WSTDrawBGMode">
            <summary>
            From AM_WST_DRAWBGMODE
            </summary>
        </member>
        <member name="T:Mallenom.DShow.MPEGAudioDivider">
            <summary>
            Not from DirectShow
            </summary>
        </member>
        <member name="T:Mallenom.DShow.MPEGAudioDual">
            <summary>
            From AM_MPEG_AUDIO_DUAL_* defines
            </summary>
        </member>
        <member name="T:Mallenom.DShow.MPEGAudioAccuracy">
            <summary>
            Not from DirectShow
            </summary>
        </member>
        <member name="T:Mallenom.DShow.MPEGAudioChannels">
            <summary>
            Not from DirectShow
            </summary>
        </member>
        <member name="T:Mallenom.DShow.WSTPage">
            <summary>
            From AM_WST_PAGE
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AcmMpegHeadLayer">
            <summary>
            From ACM_MPEG_LAYER* defines
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AcmMpegHeadMode">
            <summary>
            From ACM_MPEG_* defines
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AcmMpegHeadFlags">
            <summary>
            From ACM_MPEG_* defines
            </summary>
        </member>
        <member name="T:Mallenom.DShow.MPEG1WaveFormat">
            <summary>
            From MPEG1WAVEFORMAT
            </summary>
        </member>
        <member name="T:Mallenom.DShow.ASFWriterConfig">
            <summary>
            From _AM_ASFWRITERCONFIG_PARAM
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AMInterlace">
            <summary>
            From AMINTERLACE_*
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AMCopyProtect">
            <summary>
            From AMCOPYPROTECT_*
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AMControl">
            <summary>
            From AMCONTROL_*
            </summary>
        </member>
        <member name="T:Mallenom.DShow.VideoInfoHeader">
            <summary>
            From VIDEOINFOHEADER
            </summary>
        </member>
        <member name="T:Mallenom.DShow.VideoInfoHeader2">
            <summary>
            From VIDEOINFOHEADER2
            </summary>
        </member>
        <member name="T:Mallenom.DShow.WaveFormatEx">
            <summary>
            From WAVEFORMATEX
            </summary>
        </member>
        <member name="M:Mallenom.DShow.ISampleGrabberCB.SampleCB(System.Double,Mallenom.DShow.IMediaSample)">
            <summary>
            When called, callee must release pSample
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AMExtendedSeekingCapabilities">
            <summary>
            From AMExtendedSeekingCapabilities
            </summary>
        </member>
        <member name="T:Mallenom.DShow.SBE.RecordingType">
            <summary>
            From unnamed structure
            </summary>
        </member>
        <member name="T:Mallenom.DShow.SBE.StreamBufferAttrDataType">
            <summary>
            From STREAMBUFFER_ATTR_DATATYPE
            </summary>
        </member>
        <member name="T:Mallenom.DShow.SBE.StreamBufferEventCode">
            <summary>
            From unnamed structure
            </summary>
        </member>
        <member name="T:Mallenom.DShow.SBE.StreamBufferRecording">
            <summary>
            From g_wszStreamBufferRecording* static const WCHAR
            </summary>
        </member>
        <member name="T:Mallenom.DShow.SBE.StreamBufferAttribute">
            <summary>
            From STREAMBUFFER_ATTRIBUTE
            </summary>
        </member>
        <member name="T:Mallenom.DShow.SBE.SBEPinData">
            <summary>
            From SBE_PIN_DATA
            </summary>
        </member>
        <member name="T:Mallenom.DShow.StreamBufferRecordingAttributes">
            <summary>
            CLSID_StreamBufferRecordingAttributes
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AudioRecord">
            <summary>
            CLSID_AudioRecord
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AVICo">
            <summary>
            CLSID_AVICo
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AVIDoc">
            <summary>
            CLSID_AVIDoc
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AviReader">
            <summary>
            CLSID_AviReader
            </summary>
        </member>
        <member name="T:Mallenom.DShow.FGControl">
            <summary>
            CLSID_FGControl 
            </summary>
        </member>
        <member name="T:Mallenom.DShow.FileSource">
            <summary>
            CLSID_FileSource
            </summary>
        </member>
        <member name="T:Mallenom.DShow.FilterMapper">
            <summary>
            CLSID_FilterMapper
            </summary>
        </member>
        <member name="T:Mallenom.DShow.ProtoFilterGraph">
            <summary>
            CLSID_ProtoFilterGraph
            </summary>
        </member>
        <member name="T:Mallenom.DShow.MOVReader">
            <summary>
            CLSID_MOVReader
            </summary>
        </member>
        <member name="T:Mallenom.DShow.VPObject">
            <summary>
            CLSID_VPObject
            </summary>
        </member>
        <member name="T:Mallenom.DShow.VPVBIObject">
            <summary>
            CLSID_VPVBIObject
            </summary>
        </member>
        <member name="T:Mallenom.DShow.MPEG1Doc">
            <summary>
            CLSID_MPEG1Doc
            </summary>
        </member>
        <member name="T:Mallenom.DShow.TextRender">
            <summary>
            CLSID_TextRender
            </summary>
        </member>
        <member name="T:Mallenom.DShow.CDeviceMoniker">
            <summary>
            CLSID_CDeviceMoniker
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DTFilter">
            <summary>
            CLSID_DTFilter
            </summary>
        </member>
        <member name="T:Mallenom.DShow.ETFilter">
            <summary>
            CLSID_ETFilter
            </summary>
        </member>
        <member name="T:Mallenom.DShow.FilterGraphPrivateThread">
            <summary>
            CLSID_FilterGraphPrivateThread
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DtvCcFilter">
            <summary>
            CLSID_DtvCcFilter
            </summary>
        </member>
        <member name="T:Mallenom.DShow.MSTVCaptionFilter">
            <summary>
            CLSID_MSTVCaptionFilter
            </summary>
        </member>
        <member name="T:Mallenom.DShow.CreateDevEnum">
            <summary>
            CLSID_SystemDeviceEnum
            </summary>
        </member>
        <member name="T:Mallenom.DShow.FilterGraph">
            <summary>
            CLSID_FilterGraph
            </summary>
        </member>
        <member name="T:Mallenom.DShow.FilterGraphNoThread">
            <summary>
            CLSID_FilterGraphNoThread
            </summary>
        </member>
        <member name="T:Mallenom.DShow.CaptureGraphBuilder2">
            <summary>
            CLSID_CaptureGraphBuilder2
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DvdGraphBuilder">
            <summary>
            CLSID_DvdGraphBuilder
            </summary>
        </member>
        <member name="T:Mallenom.DShow.CaptureGraphBuilder">
            <summary>
            CLSID_CaptureGraphBuilder
            </summary>
        </member>
        <member name="T:Mallenom.DShow.StreamBufferConfig">
            <summary>
            CLSID_StreamBufferConfig
            </summary>
        </member>
        <member name="T:Mallenom.DShow.StreamBufferComposeRecording">
            <summary>
            CLSID_StreamBufferComposeRecording
            </summary>
        </member>
        <member name="T:Mallenom.DShow.SeekingPassThru">
            <summary>
            CLSID_SeekingPassThru
            </summary>
        </member>
        <member name="T:Mallenom.DShow.FilterMapper2">
            <summary>
            CLSID_FilterMapper2
            </summary>
        </member>
        <member name="T:Mallenom.DShow.MemoryAllocator">
            <summary>
            CLSID_MemoryAllocator
            </summary>
        </member>
        <member name="T:Mallenom.DShow.MediaPropertyBag">
            <summary>
            CLSID_MediaPropertyBag
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DVDState">
            <summary>
            CLSID_DVDState
            </summary>
        </member>
        <member name="T:Mallenom.DShow.SectionList">
            <summary>
            CLSID_SectionList
            </summary>
        </member>
        <member name="T:Mallenom.DShow.Mpeg2Stream">
            <summary>
            CLSID_Mpeg2Stream
            </summary>
        </member>
        <member name="T:Mallenom.DShow.Mpeg2Data">
            <summary>
            CLSID_Mpeg2Data
            </summary>
        </member>
        <member name="T:Mallenom.DShow.SAMIParser">
            <summary>
            Unnamed clsid
            </summary>
        </member>
        <member name="T:Mallenom.DShow.InternalScriptCommandRenderer">
            <summary>
            Unnamed clsid
            </summary>
        </member>
        <member name="T:Mallenom.DShow.BroadcastEventService">
            <summary>
            CLSID_BroadcastEventService
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AtscPsipParser">
            <summary>
            CLSID_AtscPsipParser
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DvbSiParser">
            <summary>
            CLSID_DvbSiParser
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DMOWrapperFilter">
            <summary>
            CLSID_DMOWrapperFilter
            </summary>
        </member>
        <member name="T:Mallenom.DShow.StreamBufferSink">
            <summary>
            CLSID_StreamBufferSink
            </summary>
        </member>
        <member name="T:Mallenom.DShow.SampleGrabber">
            <summary>
            CLSID_SampleGrabber
            </summary>
        </member>
        <member name="T:Mallenom.DShow.StreamBufferSource">
            <summary>
            CLSID_StreamBufferSource
            </summary>
        </member>
        <member name="T:Mallenom.DShow.VideoMixingRenderer">
            <summary>
            CLSID_VideoMixingRenderer
            </summary>
        </member>
        <member name="T:Mallenom.DShow.VideoMixingRenderer9">
            <summary>
            CLSID_VideoMixingRenderer9
            </summary>
        </member>
        <member name="T:Mallenom.DShow.VideoRendererDefault">
            <summary>
            CLSID_VideoRendererDefault
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AviSplitter">
            <summary>
            CLSID_AviSplitter
            </summary>
        </member>
        <member name="T:Mallenom.DShow.SmartTee">
            <summary>
            CLSID_SmartTee
            </summary>
        </member>
        <member name="T:Mallenom.DShow.NullRenderer">
            <summary>
            CLSID_NullRenderer
            </summary>
        </member>
        <member name="T:Mallenom.DShow.ACMWrapper">
            <summary>
            CLSID_ACMWrapper
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AudioRender">
            <summary>
            CLSID_AudioRender
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AVIDec">
            <summary>
            CLSID_AVIDec
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AVIDraw">
            <summary>
            CLSID_AVIDraw
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AviDest">
            <summary>
            CLSID_AviDest
            </summary>
        </member>
        <member name="T:Mallenom.DShow.ATSCNetworkProvider">
            <summary>
            CLSID_ATSCNetworkProvider
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DVBCNetworkProvider">
            <summary>
            CLSID_DVBCNetworkProvider
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DVBSNetworkProvider">
            <summary>
            CLSID_DVBSNetworkProvider
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DVBTNetworkProvider">
            <summary>
            CLSID_DVBTNetworkProvider
            </summary>
        </member>
        <member name="T:Mallenom.DShow.NetworkProvider">
            <summary>
            CLSID_NetworkProvider
            </summary>
        </member>
        <member name="T:Mallenom.DShow.Colour">
            <summary>
            CLSID_Colour
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DSoundRender">
            <summary>
            CLSID_DSoundRender
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DVMux">
            <summary>
            CLSID_DVMux
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DVSplitter">
            <summary>
            CLSID_DVSplitter
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DVVideoCodec">
            <summary>
            CLSID_DVVideoCodec
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DVVideoEnc">
            <summary>
            CLSID_DVVideoEnc
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DVDNavigator">
            <summary>
            CLSID_DVDNavigator
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AsyncReader">
            <summary>
            CLSID_AsyncReader
            </summary>
        </member>
        <member name="T:Mallenom.DShow.URLReader">
            <summary>
            CLSID_URLReader
            </summary>
        </member>
        <member name="T:Mallenom.DShow.FileWriter">
            <summary>
            CLSID_FileWriter
            </summary>
        </member>
        <member name="T:Mallenom.DShow.ModexRenderer">
            <summary>
            CLSID_ModexRenderer
            </summary>
        </member>
        <member name="T:Mallenom.DShow.InfTee">
            <summary>
            CLSID_InfTee
            </summary>
        </member>
        <member name="T:Mallenom.DShow.Line21Decoder">
            <summary>
            CLSID_Line21Decoder
            </summary>
        </member>
        <member name="T:Mallenom.DShow.Line21Decoder2">
            <summary>
            CLSID_Line21Decoder2
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AVIMIDIRender">
            <summary>
            CLSID_AVIMIDIRender
            </summary>
        </member>
        <member name="T:Mallenom.DShow.MJPGEnc">
            <summary>
            CLSID_MJPGEnc
            </summary>
        </member>
        <member name="T:Mallenom.DShow.MjpegDec">
            <summary>
            CLSID_MjpegDec
            </summary>
        </member>
        <member name="T:Mallenom.DShow.CMpegAudioCodec">
            <summary>
            CLSID_CMpegAudioCodec
            </summary>
        </member>
        <member name="T:Mallenom.DShow.MPEG1Splitter">
            <summary>
            CLSID_MPEG1Splitter
            </summary>
        </member>
        <member name="T:Mallenom.DShow.CMpegVideoCodec">
            <summary>
            CLSID_CMpegVideoCodec
            </summary>
        </member>
        <member name="T:Mallenom.DShow.MPEG2Demultiplexer">
            <summary>
            CLSID_MPEG2Demultiplexer
            </summary>
        </member>
        <member name="T:Mallenom.DShow.MMSPLITTER">
            <summary>
            CLSID_MMSPLITTER
            </summary>
        </member>
        <member name="T:Mallenom.DShow.OverlayMixer">
            <summary>
            CLSID_OverlayMixer
            </summary>
        </member>
        <member name="T:Mallenom.DShow.OverlayMixer2">
            <summary>
            CLSID_OverlayMixer2
            </summary>
        </member>
        <member name="T:Mallenom.DShow.QTDec">
            <summary>
            CLSID_QTDec
            </summary>
        </member>
        <member name="T:Mallenom.DShow.QuickTimeParser">
            <summary>
            CLSID_QuickTimeParser
            </summary>
        </member>
        <member name="T:Mallenom.DShow.VBISurfaces">
            <summary>
            CLSID_VBISurfaces
            </summary>
        </member>
        <member name="T:Mallenom.DShow.VfwCapture">
            <summary>
            CLSID_VfwCapture
            </summary>
        </member>
        <member name="T:Mallenom.DShow.Dither">
            <summary>
            CLSID_Dither
            </summary>
        </member>
        <member name="T:Mallenom.DShow.VideoPortManager">
            <summary>
            CLSID_VideoPortManager
            </summary>
        </member>
        <member name="T:Mallenom.DShow.VideoRenderer">
            <summary>
            CLSID_VideoRenderer
            </summary>
        </member>
        <member name="T:Mallenom.DShow.WMAsfReader">
            <summary>
            CLSID_WMAsfReader
            </summary>
        </member>
        <member name="T:Mallenom.DShow.SystemClock">
            <summary>
            CLSID_SystemClock
            </summary>
        </member>
        <member name="T:Mallenom.DShow.WMAsfWriter">
            <summary>
            CLSID_WMAsfWriter
            </summary>
        </member>
        <member name="T:Mallenom.DShow.WSTDecoder">
            <summary>
            CLSID_WSTDecoder
            </summary>
        </member>
        <member name="T:Mallenom.DShow.Mpeg2VideoStreamAnalyzer">
            <summary>
            CLSID_Mpeg2VideoStreamAnalyzer
            </summary>
        </member>
        <member name="F:Mallenom.DShow.FilterCategory.CPCAFiltersCategory">
            <summary> CLSID_CPCAFiltersCategory </summary>
        </member>
        <member name="F:Mallenom.DShow.FilterCategory.MediaEncoderCategory">
            <summary> CLSID_MediaEncoderCategory </summary>
        </member>
        <member name="F:Mallenom.DShow.FilterCategory.MediaMultiplexerCategory">
            <summary> CLSID_MediaMultiplexerCategory </summary>
        </member>
        <member name="F:Mallenom.DShow.FilterCategory.DMOFilterCategory">
            <summary> CLSID_DMOFilterCategory </summary>
        </member>
        <member name="F:Mallenom.DShow.FilterCategory.AudioInputDevice">
            <summary> CLSID_AudioInputDeviceCategory, audio capture category </summary>
        </member>
        <member name="F:Mallenom.DShow.FilterCategory.VideoInputDevice">
            <summary> CLSID_VideoInputDeviceCategory, video capture category </summary>
        </member>
        <member name="F:Mallenom.DShow.FilterCategory.VideoCompressorCategory">
            <summary> CLSID_VideoCompressorCategory, video compressor category </summary>
        </member>
        <member name="F:Mallenom.DShow.FilterCategory.AudioCompressorCategory">
            <summary> CLSID_AudioCompressorCategory, audio compressor category </summary>
        </member>
        <member name="F:Mallenom.DShow.FilterCategory.LegacyAmFilterCategory">
            <summary> CLSID_LegacyAmFilterCategory, legacy filters </summary>
        </member>
        <member name="F:Mallenom.DShow.FilterCategory.AudioRendererCategory">
            <summary> CLSID_AudioRendererCategory, Audio renderer category</summary>
        </member>
        <member name="F:Mallenom.DShow.FilterCategory.BDAReceiverComponentsCategory">
            <summary> KSCATEGORY_BDA_RECEIVER_COMPONENT, BDA Receiver Components category</summary>
        </member>
        <member name="F:Mallenom.DShow.FilterCategory.BDASourceFiltersCategory">
            <summary> KSCATEGORY_BDA_NETWORK_TUNER, BDA Source Filters category</summary>
        </member>
        <member name="F:Mallenom.DShow.FilterCategory.BDARenderingFiltersCategory">
            <summary> KSCATEGORY_BDA_IP_SINK, BDA Rendering Filters category</summary>
        </member>
        <member name="F:Mallenom.DShow.FilterCategory.BDANetworkProvidersCategory">
            <summary> KSCATEGORY_BDA_NETWORK_PROVIDER, BDA Network Providers category</summary>
        </member>
        <member name="F:Mallenom.DShow.FilterCategory.BDATransportInformationRenderersCategory">
            <summary> KSCATEGORY_BDA_TRANSPORT_INFORMATION, BDA Transport Information Renderers category</summary>
        </member>
        <member name="F:Mallenom.DShow.FilterCategory.MidiRendererCategory">
            <summary> CLSID_MidiRendererCategory </summary>
        </member>
        <member name="F:Mallenom.DShow.FilterCategory.TransmitCategory">
            <summary> CLSID_TransmitCategory  External Renderers Category</summary>
        </member>
        <member name="F:Mallenom.DShow.FilterCategory.DeviceControlCategory">
            <summary> CLSID_DeviceControlCategory  Device Control Filters</summary>
        </member>
        <member name="F:Mallenom.DShow.FilterCategory.VideoEffects1Category">
            <summary> CLSID_VideoEffects1Category </summary>
        </member>
        <member name="F:Mallenom.DShow.FilterCategory.VideoEffects2Category">
            <summary> CLSID_VideoEffects2Category </summary>
        </member>
        <member name="F:Mallenom.DShow.FilterCategory.AudioEffects1Category">
            <summary> CLSID_AudioEffects1Category </summary>
        </member>
        <member name="F:Mallenom.DShow.FilterCategory.AudioEffects2Category">
            <summary> CLSID_AudioEffects2Category </summary>
        </member>
        <member name="F:Mallenom.DShow.FilterCategory.KSDataDecompressor">
            <summary> KSCATEGORY_DATADECOMPRESSOR &amp; CLSID_DVDHWDecodersCategory</summary>
        </member>
        <member name="F:Mallenom.DShow.FilterCategory.KSCommunicationsTransform">
            <summary> KSCATEGORY_COMMUNICATIONSTRANSFORM </summary>
        </member>
        <member name="F:Mallenom.DShow.FilterCategory.KSDataTransform">
            <summary> KSCATEGORY_DATATRANSFORM </summary>
        </member>
        <member name="F:Mallenom.DShow.FilterCategory.KSInterfaceTransform">
            <summary> KSCATEGORY_INTERFACETRANSFORM </summary>
        </member>
        <member name="F:Mallenom.DShow.FilterCategory.KSMixer">
            <summary> KSCATEGORY_MIXER </summary>
        </member>
        <member name="F:Mallenom.DShow.FilterCategory.KSAudioDevice">
            <summary> KSCATEGORY_AUDIO_DEVICE </summary>
        </member>
        <member name="F:Mallenom.DShow.FilterCategory.ActiveMovieCategories">
            <summary> CLSID_ActiveMovieCategories </summary>
        </member>
        <member name="F:Mallenom.DShow.FilterCategory.AMKSCapture">
            <summary> AM_KSCATEGORY_CAPTURE </summary>
        </member>
        <member name="F:Mallenom.DShow.FilterCategory.AMKSRender">
            <summary> AM_KSCATEGORY_RENDER </summary>
        </member>
        <member name="F:Mallenom.DShow.FilterCategory.AMKSDataCompressor">
            <summary> AM_KSCATEGORY_DATACOMPRESSOR </summary>
        </member>
        <member name="F:Mallenom.DShow.FilterCategory.AMKSAudio">
            <summary> AM_KSCATEGORY_AUDIO </summary>
        </member>
        <member name="F:Mallenom.DShow.FilterCategory.AMKSVideo">
            <summary> AM_KSCATEGORY_VIDEO </summary>
        </member>
        <member name="F:Mallenom.DShow.FilterCategory.AMKSTVTuner">
            <summary> AM_KSCATEGORY_TVTUNER </summary>
        </member>
        <member name="F:Mallenom.DShow.FilterCategory.AMKSCrossbar">
            <summary> AM_KSCATEGORY_CROSSBAR </summary>
        </member>
        <member name="F:Mallenom.DShow.FilterCategory.AMKSTVAudio">
            <summary> AM_KSCATEGORY_TVAUDIO </summary>
        </member>
        <member name="F:Mallenom.DShow.FilterCategory.AMKSVBICodec">
            <summary> AM_KSCATEGORY_VBICODEC </summary>
        </member>
        <member name="F:Mallenom.DShow.FilterCategory.AMKSSplitter">
            <summary> AM_KSCATEGORY_SPLITTER </summary>
        </member>
        <member name="F:Mallenom.DShow.FilterCategory.WDMStreamingEncoderDevices">
            <summary> Not defined </summary>
        </member>
        <member name="F:Mallenom.DShow.FilterCategory.WDMStreamingMultiplexerDevices">
            <summary> Not defined </summary>
        </member>
        <member name="F:Mallenom.DShow.FilterCategory.LTMMVideoProcessors">
            <summary> Not defined </summary>
        </member>
        <member name="F:Mallenom.DShow.VMRClsId.AllocPresenter">
            <summary>CLSID_AllocPresenter</summary>
        </member>
        <member name="F:Mallenom.DShow.VMRClsId.AllocPresenterDDXclMode">
            <summary>CLSID_AllocPresenterDDXclMode</summary>
        </member>
        <member name="F:Mallenom.DShow.TVEClsId.DShowTVEFilter">
            <summary>CLSID_DShowTVEFilter</summary>
        </member>
        <member name="F:Mallenom.DShow.TVEClsId.TVEFilterTuneProperties">
            <summary>CLSID_TVEFilterTuneProperties</summary>
        </member>
        <member name="F:Mallenom.DShow.TVEClsId.TVEFilterCCProperties">
            <summary>CLSID_TVEFilterCCProperties</summary>
        </member>
        <member name="F:Mallenom.DShow.TVEClsId.TVEFilterStatsProperties">
            <summary>CLSID_TVEFilterStatsProperties</summary>
        </member>
        <member name="F:Mallenom.DShow.ENCAPIClsId.IVideoEncoderProxy">
            <summary>CLSID_IVideoEncoderProxy</summary>
        </member>
        <member name="F:Mallenom.DShow.ENCAPIClsId.ICodecAPIProxy">
            <summary>CLSID_ICodecAPIProxy</summary>
        </member>
        <member name="F:Mallenom.DShow.ENCAPIClsId.IVideoEncoderCodecAPIProxy">
            <summary>CLSID_IVideoEncoderCodecAPIProxy</summary>
        </member>
        <member name="F:Mallenom.DShow.MediaType.Video">
            <summary> MEDIATYPE_Video 'vids' </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaType.Interleaved">
            <summary> MEDIATYPE_Interleaved 'iavs' </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaType.Audio">
            <summary> MEDIATYPE_Audio 'auds' </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaType.Text">
            <summary> MEDIATYPE_Text 'txts' </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaType.Stream">
            <summary> MEDIATYPE_Stream </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaType.VBI">
            <summary> MEDIATYPE_VBI </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaType.Midi">
            <summary> MEDIATYPE_Midi </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaType.File">
            <summary> MEDIATYPE_File </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaType.ScriptCommand">
            <summary> MEDIATYPE_ScriptCommand </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaType.AuxLine21Data">
            <summary> MEDIATYPE_AUXLine21Data </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaType.Timecode">
            <summary> MEDIATYPE_Timecode </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaType.LMRT">
            <summary> MEDIATYPE_LMRT </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaType.URLStream">
            <summary> MEDIATYPE_URL_STREAM </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaType.AnalogVideo">
            <summary> MEDIATYPE_AnalogVideo </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaType.AnalogAudio">
            <summary> MEDIATYPE_AnalogAudio </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaType.Mpeg2Sections">
            <summary> MEDIATYPE_MPEG2_SECTIONS </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaType.DTVCCData">
            <summary> MEDIATYPE_DTVCCData </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaType.MSTVCaption">
            <summary> MEDIATYPE_MSTVCaption </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.CLPL">
            <summary> MEDIASUBTYPE_CLPL </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.YUYV">
            <summary> MEDIASUBTYPE_YUYV </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.IYUV">
            <summary> MEDIASUBTYPE_IYUV </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.YVU9">
            <summary> MEDIASUBTYPE_YVU9 </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.Y411">
            <summary> MEDIASUBTYPE_Y411 </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.Y41P">
            <summary> MEDIASUBTYPE_Y41P </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.YUY2">
            <summary> MEDIASUBTYPE_YUY2 </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.YVYU">
            <summary> MEDIASUBTYPE_YVYU </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.UYVY">
            <summary> MEDIASUBTYPE_UYVY </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.Y211">
            <summary> MEDIASUBTYPE_Y211 </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.CLJR">
            <summary> MEDIASUBTYPE_CLJR </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.IF09">
            <summary> MEDIASUBTYPE_IF09 </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.CPLA">
            <summary> MEDIASUBTYPE_CPLA </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.MJPG">
            <summary> MEDIASUBTYPE_MJPG </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.TVMJ">
            <summary> MEDIASUBTYPE_TVMJ </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.WAKE">
            <summary> MEDIASUBTYPE_WAKE </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.CFCC">
            <summary> MEDIASUBTYPE_CFCC </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.IJPG">
            <summary> MEDIASUBTYPE_IJPG </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.PLUM">
            <summary> MEDIASUBTYPE_Plum </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.DVCS">
            <summary> MEDIASUBTYPE_DVCS </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.DVSD">
            <summary> MEDIASUBTYPE_DVSD </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.MDVF">
            <summary> MEDIASUBTYPE_MDVF </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.RGB1">
            <summary> MEDIASUBTYPE_RGB1 </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.RGB4">
            <summary> MEDIASUBTYPE_RGB4 </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.RGB8">
            <summary> MEDIASUBTYPE_RGB8 </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.RGB565">
            <summary> MEDIASUBTYPE_RGB565 </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.RGB555">
            <summary> MEDIASUBTYPE_RGB555 </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.RGB24">
            <summary> MEDIASUBTYPE_RGB24 </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.RGB32">
            <summary> MEDIASUBTYPE_RGB32 </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.ARGB1555">
            <summary> MEDIASUBTYPE_ARGB1555 </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.ARGB4444">
            <summary> MEDIASUBTYPE_ARGB4444 </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.ARGB32">
            <summary> MEDIASUBTYPE_ARGB32 </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.A2R10G10B10">
            <summary> MEDIASUBTYPE_A2R10G10B10 </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.A2B10G10R10">
            <summary> MEDIASUBTYPE_A2B10G10R10 </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.AYUV">
            <summary> MEDIASUBTYPE_AYUV </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.AI44">
            <summary> MEDIASUBTYPE_AI44 </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.IA44">
            <summary> MEDIASUBTYPE_IA44 </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.RGB32_D3D_DX7_RT">
            <summary> MEDIASUBTYPE_RGB32_D3D_DX7_RT </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.RGB16_D3D_DX7_RT">
            <summary> MEDIASUBTYPE_RGB16_D3D_DX7_RT </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.ARGB32_D3D_DX7_RT">
            <summary> MEDIASUBTYPE_ARGB32_D3D_DX7_RT </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.ARGB4444_D3D_DX7_RT">
            <summary> MEDIASUBTYPE_ARGB4444_D3D_DX7_RT </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.ARGB1555_D3D_DX7_RT">
            <summary> MEDIASUBTYPE_ARGB1555_D3D_DX7_RT </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.RGB32_D3D_DX9_RT">
            <summary> MEDIASUBTYPE_RGB32_D3D_DX9_RT </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.RGB16_D3D_DX9_RT">
            <summary> MEDIASUBTYPE_RGB16_D3D_DX9_RT </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.ARGB32_D3D_DX9_RT">
            <summary> MEDIASUBTYPE_ARGB32_D3D_DX9_RT </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.ARGB4444_D3D_DX9_RT">
            <summary> MEDIASUBTYPE_ARGB4444_D3D_DX9_RT </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.ARGB1555_D3D_DX9_RT">
            <summary> MEDIASUBTYPE_ARGB1555_D3D_DX9_RT </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.YV12">
            <summary> MEDIASUBTYPE_YV12 </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.NV12">
            <summary> MEDIASUBTYPE_NV12 </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.IMC1">
            <summary> MEDIASUBTYPE_IMC1 </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.IMC2">
            <summary> MEDIASUBTYPE_IMC2 </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.IMC3">
            <summary> MEDIASUBTYPE_IMC3 </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.IMC4">
            <summary> MEDIASUBTYPE_IMC4 </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.S340">
            <summary> MEDIASUBTYPE_S340 </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.S342">
            <summary> MEDIASUBTYPE_S342 </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.Overlay">
            <summary> MEDIASUBTYPE_Overlay </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.MPEG1Packet">
            <summary> MEDIASUBTYPE_MPEG1Packet </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.MPEG1Payload">
            <summary> MEDIASUBTYPE_MPEG1Payload </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.MPEG1AudioPayload">
            <summary> MEDIASUBTYPE_MPEG1AudioPayload </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.MPEG1SystemStream">
            <summary> MEDIATYPE_MPEG1SystemStream </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.MPEG1System">
            <summary> MEDIASUBTYPE_MPEG1System </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.MPEG1VideoCD">
            <summary> MEDIASUBTYPE_MPEG1VideoCD </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.MPEG1Video">
            <summary> MEDIASUBTYPE_MPEG1Video </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.MPEG1Audio">
            <summary> MEDIASUBTYPE_MPEG1Audio </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.Avi">
            <summary> MEDIASUBTYPE_Avi </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.Asf">
            <summary> MEDIASUBTYPE_Asf </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.QTMovie">
            <summary> MEDIASUBTYPE_QTMovie </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.QTRpza">
            <summary> MEDIASUBTYPE_QTRpza </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.QTSmc">
            <summary> MEDIASUBTYPE_QTSmc </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.QTRle">
            <summary> MEDIASUBTYPE_QTRle </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.QTJpeg">
            <summary> MEDIASUBTYPE_QTJpeg </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.PCMAudio_Obsolete">
            <summary> MEDIASUBTYPE_PCMAudio_Obsolete </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.PCM">
            <summary> MEDIASUBTYPE_PCM </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.WAVE">
            <summary> MEDIASUBTYPE_WAVE </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.AU">
            <summary> MEDIASUBTYPE_AU </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.AIFF">
            <summary> MEDIASUBTYPE_AIFF </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.dvhd">
            <summary> MEDIASUBTYPE_dvhd </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.dvsl">
            <summary> MEDIASUBTYPE_dvsl </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.dv25">
            <summary> MEDIASUBTYPE_dv25 </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.dv50">
            <summary> MEDIASUBTYPE_dv50 </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.dvh1">
            <summary> MEDIASUBTYPE_dvh1 </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.Line21_BytePair">
            <summary> MEDIASUBTYPE_Line21_BytePair </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.Line21_GOPPacket">
            <summary> MEDIASUBTYPE_Line21_GOPPacket </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.Line21_VBIRawData">
            <summary> MEDIASUBTYPE_Line21_VBIRawData </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.TELETEXT">
            <summary> MEDIASUBTYPE_TELETEXT </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.WSS">
            <summary> MEDIASUBTYPE_WSS </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.VPS">
            <summary> MEDIASUBTYPE_VPS </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.DRM_Audio">
            <summary> MEDIASUBTYPE_DRM_Audio </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.IEEE_FLOAT">
            <summary> MEDIASUBTYPE_IEEE_FLOAT </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.DOLBY_AC3_SPDIF">
            <summary> MEDIASUBTYPE_DOLBY_AC3_SPDIF </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.RAW_SPORT">
            <summary> MEDIASUBTYPE_RAW_SPORT </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.SPDIF_TAG_241h">
            <summary> MEDIASUBTYPE_SPDIF_TAG_241h </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.DssVideo">
            <summary> MEDIASUBTYPE_DssVideo </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.DssAudio">
            <summary> MEDIASUBTYPE_DssAudio </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.VPVideo">
            <summary> MEDIASUBTYPE_VPVideo </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.VPVBI">
            <summary> MEDIASUBTYPE_VPVBI </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.AnalogVideo_NTSC_M">
            <summary> MEDIASUBTYPE_AnalogVideo_NTSC_M </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.AnalogVideo_PAL_B">
            <summary> MEDIASUBTYPE_AnalogVideo_PAL_B </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.AnalogVideo_PAL_D">
            <summary> MEDIASUBTYPE_AnalogVideo_PAL_D </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.AnalogVideo_PAL_G">
            <summary> MEDIASUBTYPE_AnalogVideo_PAL_G </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.AnalogVideo_PAL_H">
            <summary> MEDIASUBTYPE_AnalogVideo_PAL_H </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.AnalogVideo_PAL_I">
            <summary> MEDIASUBTYPE_AnalogVideo_PAL_I </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.AnalogVideo_PAL_M">
            <summary> MEDIASUBTYPE_AnalogVideo_PAL_M </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.AnalogVideo_PAL_N">
            <summary> MEDIASUBTYPE_AnalogVideo_PAL_N </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.AnalogVideo_PAL_N_COMBO">
            <summary> MEDIASUBTYPE_AnalogVideo_PAL_N_COMBO </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.AnalogVideo_SECAM_B">
            <summary> MEDIASUBTYPE_AnalogVideo_SECAM_B </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.AnalogVideo_SECAM_D">
            <summary> MEDIASUBTYPE_AnalogVideo_SECAM_D </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.AnalogVideo_SECAM_G">
            <summary> MEDIASUBTYPE_AnalogVideo_SECAM_G </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.AnalogVideo_SECAM_H">
            <summary> MEDIASUBTYPE_AnalogVideo_SECAM_H </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.AnalogVideo_SECAM_K">
            <summary> MEDIASUBTYPE_AnalogVideo_SECAM_K </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.AnalogVideo_SECAM_K1">
            <summary> MEDIASUBTYPE_AnalogVideo_SECAM_K1 </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.AnalogVideo_SECAM_L">
            <summary> MEDIASUBTYPE_AnalogVideo_SECAM_L </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.I420">
            <summary> not in uuids.h </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.VideoImage">
            <summary> WMMEDIASUBTYPE_VIDEOIMAGE </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.Mpeg2Video">
            <summary> WMMEDIASUBTYPE_MPEG2_VIDEO </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.WebStream">
            <summary> WMMEDIASUBTYPE_WebStream </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.Mpeg2Audio">
            <summary> MEDIASUBTYPE_MPEG2_AUDIO </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.DolbyAC3">
            <summary> MEDIASUBTYPE_DOLBY_AC3 </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.DvbSI">
            <summary> MEDIASUBTYPE_DVB_SI </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.AtscSI">
            <summary> MEDIASUBTYPE_ATSC_SI </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.Mpeg2Data">
            <summary> MEDIASUBTYPE_MPEG2DATA </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.Mpeg2Program">
            <summary> MEDIASUBTYPE_MPEG2_PROGRAM </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.Mpeg2Transport">
            <summary> MEDIASUBTYPE_MPEG2_TRANSPORT </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.Mpeg2TransportStride">
            <summary> MEDIASUBTYPE_MPEG2_TRANSPORT_STRIDE </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.None">
            <summary> MEDIASUBTYPE_None </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.H264">
            <summary> MEDIASUBTYPE_H264 </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.NV24">
            <summary> MEDIASUBTYPE_NV24 </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.Data708_608">
            <summary> MEDIASUBTYPE_708_608Data </summary>
        </member>
        <member name="F:Mallenom.DShow.MediaSubType.DtvCcData">
            <summary> MEDIASUBTYPE_DtvCcData </summary>
        </member>
        <member name="F:Mallenom.DShow.FormatType.None">
            <summary> FORMAT_None </summary>
        </member>
        <member name="F:Mallenom.DShow.FormatType.VideoInfo">
            <summary> FORMAT_VideoInfo </summary>
        </member>
        <member name="F:Mallenom.DShow.FormatType.VideoInfo2">
            <summary> FORMAT_VideoInfo2 </summary>
        </member>
        <member name="F:Mallenom.DShow.FormatType.WaveEx">
            <summary> FORMAT_WaveFormatEx </summary>
        </member>
        <member name="F:Mallenom.DShow.FormatType.MpegVideo">
            <summary> FORMAT_MPEGVideo </summary>
        </member>
        <member name="F:Mallenom.DShow.FormatType.MpegStreams">
            <summary> FORMAT_MPEGStreams </summary>
        </member>
        <member name="F:Mallenom.DShow.FormatType.DvInfo">
            <summary> FORMAT_DvInfo </summary>
        </member>
        <member name="F:Mallenom.DShow.FormatType.AnalogVideo">
            <summary> FORMAT_AnalogVideo </summary>
        </member>
        <member name="F:Mallenom.DShow.FormatType.Mpeg2Video">
            <summary> FORMAT_MPEG2Video </summary>
        </member>
        <member name="F:Mallenom.DShow.FormatType.DolbyAC3">
            <summary> FORMAT_DolbyAC3 </summary>
        </member>
        <member name="F:Mallenom.DShow.FormatType.Mpeg2Audio">
            <summary> FORMAT_MPEG2Audio </summary>
        </member>
        <member name="F:Mallenom.DShow.FormatType.WSS525">
            <summary> FORMAT_525WSS </summary>
        </member>
        <member name="F:Mallenom.DShow.DSAttrib.UDCRTag">
            <summary> DSATTRIB_UDCRTag </summary>
        </member>
        <member name="F:Mallenom.DShow.DSAttrib.PicSampleSeq">
            <summary> DSATTRIB_PicSampleSeq </summary>
        </member>
        <member name="F:Mallenom.DShow.PropSetID.Pin">
            <summary> AMPROPSETID_Pin</summary>
        </member>
        <member name="F:Mallenom.DShow.PropSetID.DroppedFrames">
            <summary> PROPSETID_VIDCAP_DROPPEDFRAMES </summary>
        </member>
        <member name="F:Mallenom.DShow.PropSetID.ENCAPIPARAM_BitRate">
            <summary> STATIC_ENCAPIPARAM_BITRATE </summary>
        </member>
        <member name="F:Mallenom.DShow.PropSetID.ENCAPIPARAM_PeakBitRate">
            <summary> STATIC_ENCAPIPARAM_PEAK_BITRATE </summary>
        </member>
        <member name="F:Mallenom.DShow.PropSetID.ENCAPIPARAM_BitRateMode">
            <summary> STATIC_ENCAPIPARAM_BITRATE_MODE </summary>
        </member>
        <member name="F:Mallenom.DShow.PropSetID.ENCAPIPARAM_SAP_MODE">
            <summary> ENCAPIPARAM_SAP_MODE </summary>
        </member>
        <member name="F:Mallenom.DShow.PropSetID.CODECAPI_AVDecMmcssClass">
            <summary> CODECAPI_AVDecMmcssClass </summary>
        </member>
        <member name="F:Mallenom.DShow.PropSetID.CODECAPI_ChangeLists">
            <summary> STATIC_CODECAPI_CHANGELISTS </summary>
        </member>
        <member name="F:Mallenom.DShow.PropSetID.CODECAPI_VideoEncoder">
            <summary> STATIC_CODECAPI_VIDEO_ENCODER </summary>
        </member>
        <member name="F:Mallenom.DShow.PropSetID.CODECAPI_AudioEncoder">
            <summary> STATIC_CODECAPI_AUDIO_ENCODER </summary>
        </member>
        <member name="F:Mallenom.DShow.PropSetID.CODECAPI_SetAllDefaults">
            <summary> STATIC_CODECAPI_SETALLDEFAULTS </summary>
        </member>
        <member name="F:Mallenom.DShow.PropSetID.CODECAPI_AllSettings">
            <summary> STATIC_CODECAPI_ALLSETTINGS </summary>
        </member>
        <member name="F:Mallenom.DShow.PropSetID.CODECAPI_SupportsEvents">
            <summary> STATIC_CODECAPI_SUPPORTSEVENTS </summary>
        </member>
        <member name="F:Mallenom.DShow.PropSetID.CODECAPI_CurrentChangeList">
            <summary> STATIC_CODECAPI_CURRENTCHANGELIST </summary>
        </member>
        <member name="F:Mallenom.DShow.PinCategory.Capture">
            <summary> PIN_CATEGORY_CAPTURE </summary>
        </member>
        <member name="F:Mallenom.DShow.PinCategory.Preview">
            <summary> PIN_CATEGORY_PREVIEW </summary>
        </member>
        <member name="F:Mallenom.DShow.PinCategory.AnalogVideoIn">
            <summary> PIN_CATEGORY_ANALOGVIDEOIN </summary>
        </member>
        <member name="F:Mallenom.DShow.PinCategory.VBI">
            <summary> PIN_CATEGORY_VBI </summary>
        </member>
        <member name="F:Mallenom.DShow.PinCategory.VideoPort">
            <summary> PIN_CATEGORY_VIDEOPORT </summary>
        </member>
        <member name="F:Mallenom.DShow.PinCategory.NABTS">
            <summary> PIN_CATEGORY_NABTS </summary>
        </member>
        <member name="F:Mallenom.DShow.PinCategory.EDS">
            <summary> PIN_CATEGORY_EDS </summary>
        </member>
        <member name="F:Mallenom.DShow.PinCategory.TeleText">
            <summary> PIN_CATEGORY_TELETEXT </summary>
        </member>
        <member name="F:Mallenom.DShow.PinCategory.CC">
            <summary> PIN_CATEGORY_CC </summary>
        </member>
        <member name="F:Mallenom.DShow.PinCategory.Still">
            <summary> PIN_CATEGORY_STILL </summary>
        </member>
        <member name="F:Mallenom.DShow.PinCategory.TimeCode">
            <summary> PIN_CATEGORY_TIMECODE </summary>
        </member>
        <member name="F:Mallenom.DShow.PinCategory.VideoPortVBI">
            <summary> PIN_CATEGORY_VIDEOPORT_VBI </summary>
        </member>
        <member name="F:Mallenom.DShow.FindDirection.UpstreamOnly">
            <summary> LOOK_UPSTREAM_ONLY </summary>
        </member>
        <member name="F:Mallenom.DShow.FindDirection.DownstreamOnly">
            <summary> LOOK_DOWNSTREAM_ONLY </summary>
        </member>
        <member name="F:Mallenom.DShow.PropertyPages.CrossbarFilterPropertyPage">
            <summary> CLSID_CrossbarFilterPropertyPage </summary>
        </member>
        <member name="F:Mallenom.DShow.PropertyPages.AudioInputMixer">
            <summary> CLSID_AudioInputMixerProperties </summary>
        </member>
        <member name="F:Mallenom.DShow.PropertyPages.AudioProperties">
            <summary> CLSID_AudioProperties </summary>
        </member>
        <member name="F:Mallenom.DShow.PropertyPages.AudioRendererAdvancedProperties">
            <summary> CLSID_AudioRendererAdvancedProperties </summary>
        </member>
        <member name="F:Mallenom.DShow.PropertyPages.AviMux">
            <summary> CLSID_AviMuxProptyPage </summary>
        </member>
        <member name="F:Mallenom.DShow.PropertyPages.AviMux1">
            <summary> CLSID_AviMuxProptyPage1 </summary>
        </member>
        <member name="F:Mallenom.DShow.PropertyPages.DVDec">
            <summary> CLSID_DVDecPropertiesPage </summary>
        </member>
        <member name="F:Mallenom.DShow.PropertyPages.DVEnc">
            <summary> CLSID_DVEncPropertiesPage </summary>
        </member>
        <member name="F:Mallenom.DShow.PropertyPages.Modex">
            <summary> CLSID_ModexProperties </summary>
        </member>
        <member name="F:Mallenom.DShow.PropertyPages.Capture">
            <summary> CLSID_CaptureProperties </summary>
        </member>
        <member name="F:Mallenom.DShow.PropertyPages.WstDecoder">
            <summary> CLSID_WstDecoderPropertyPage </summary>
        </member>
        <member name="F:Mallenom.DShow.PropertyPages.DVMux">
            <summary> CLSID_DVMuxPropertyPage </summary>
        </member>
        <member name="F:Mallenom.DShow.PropertyPages.VideoProcAmpPropertyPage">
            <summary> CLSID_VideoProcAmpPropertyPage </summary>
        </member>
        <member name="F:Mallenom.DShow.PropertyPages.CameraControlPropertyPage">
            <summary> CLSID_CameraControlPropertyPage </summary>
        </member>
        <member name="F:Mallenom.DShow.PropertyPages.AnalogVideoDecoderPropertyPage">
            <summary> CLSID_AnalogVideoDecoderPropertyPage </summary>
        </member>
        <member name="F:Mallenom.DShow.PropertyPages.VideoStreamConfigPropertyPage">
            <summary> CLSID_VideoStreamConfigPropertyPage </summary>
        </member>
        <member name="F:Mallenom.DShow.PropertyPages.ATSCNetworkPropertyPage">
            <summary> CLSID_ATSCNetworkPropertyPage </summary>
        </member>
        <member name="F:Mallenom.DShow.PropertyPages.TVTunerFilterPropertyPage">
            <summary> CLSID_TVTunerFilterPropertyPage </summary>
        </member>
        <member name="F:Mallenom.DShow.PropertyPages.TVAudioFilterPropertyPage">
            <summary> CLSID_TVAudioFilterPropertyPage </summary>
        </member>
        <member name="F:Mallenom.DShow.BDANodeCategory.RFTuner">
            <summary> KSNODE_BDA_RF_TUNER </summary>
        </member>
        <member name="F:Mallenom.DShow.BDANodeCategory.QAMDemodulator">
            <summary> KSNODE_BDA_QAM_DEMODULATOR </summary>
        </member>
        <member name="F:Mallenom.DShow.BDANodeCategory.QPSKDemodulator">
            <summary> KSNODE_BDA_QPSK_DEMODULATOR </summary>
        </member>
        <member name="F:Mallenom.DShow.BDANodeCategory.EightVSBDemodulator">
            <summary> KSNODE_BDA_8VSB_DEMODULATOR </summary>
        </member>
        <member name="F:Mallenom.DShow.BDANodeCategory.COFDMDemodulator">
            <summary> KSNODE_BDA_COFDM_DEMODULATOR </summary>
        </member>
        <member name="F:Mallenom.DShow.BDANodeCategory.OpenCablePod">
            <summary> KSNODE_BDA_OPENCABLE_POD </summary>
        </member>
        <member name="F:Mallenom.DShow.BDANodeCategory.CommonCAPod">
            <summary> KSNODE_BDA_COMMON_CA_POD </summary>
        </member>
        <member name="F:Mallenom.DShow.BDANodeCategory.PidFilter">
            <summary> KSNODE_BDA_PID_FILTER </summary>
        </member>
        <member name="F:Mallenom.DShow.BDANodeCategory.IPSink">
            <summary> KSNODE_BDA_IP_SINK </summary>
        </member>
        <member name="T:Mallenom.DShow.KSTopologyConnection">
            <summary>
            From KSTOPOLOGY_CONNECTION
            </summary>
        </member>
        <member name="T:Mallenom.DShow.AMVP_Mode">
            <summary>
            From AMVP_MODE
            </summary>
        </member>
        <member name="T:Mallenom.DShow.VMR9PresentationFlags">
            <summary>
            From VMR9PresentationFlags
            </summary>
        </member>
        <member name="T:Mallenom.DShow.VMR9SurfaceAllocationFlags">
            <summary>
            From VMR9SurfaceAllocationFlags
            </summary>
        </member>
        <member name="T:Mallenom.DShow.VMR9ProcAmpControlFlags">
            <summary>
            From VMR9ProcAmpControlFlags
            </summary>
        </member>
        <member name="T:Mallenom.DShow.VMR9MixerPrefs">
            <summary>
            From VMR9MixerPrefs
            </summary>
        </member>
        <member name="T:Mallenom.DShow.VMR9DeinterlaceTech">
            <summary>
            From VMR9DeinterlaceTech
            </summary>
        </member>
        <member name="T:Mallenom.DShow.VMR9AlphaBitmapFlags">
            <summary>
            From VMR9AlphaBitmapFlags
            </summary>
        </member>
        <member name="T:Mallenom.DShow.VMR9DeinterlacePrefs">
            <summary>
            From VMR9DeinterlacePrefs
            </summary>
        </member>
        <member name="T:Mallenom.DShow.VMR9RenderPrefs">
            <summary>
            From VMR9RenderPrefs
            </summary>
        </member>
        <member name="T:Mallenom.DShow.VMR9Mode">
            <summary>
            From VMR9Mode
            </summary>
        </member>
        <member name="T:Mallenom.DShow.VMR9AspectRatioMode">
            <summary>
            From VMR9AspectRatioMode
            </summary>
        </member>
        <member name="T:Mallenom.DShow.VMR9SampleFormat">
            <summary>
            From VMR9_SampleFormat
            </summary>
        </member>
        <member name="T:Mallenom.DShow.VMR9PresentationInfo">
            <summary>
            From VMR9PresentationInfo
            </summary>
        </member>
        <member name="T:Mallenom.DShow.VMR9AllocationInfo">
            <summary>
            From VMR9AllocationInfo
            </summary>
        </member>
        <member name="T:Mallenom.DShow.VMR9ProcAmpControl">
            <summary>
            From VMR9ProcAmpControl
            </summary>
        </member>
        <member name="T:Mallenom.DShow.VMR9MonitorInfo">
            <summary>
            From VMR9MonitorInfo
            </summary>
        </member>
        <member name="T:Mallenom.DShow.VMR9DeinterlaceCaps">
            <summary>
            From VMR9DeinterlaceCaps
            </summary>
        </member>
        <member name="T:Mallenom.DShow.VMR9VideoStreamInfo">
            <summary>
            From VMR9VideoStreamInfo
            </summary>
        </member>
        <member name="T:Mallenom.DShow.VMR9VideoDesc">
            <summary>
            From VMR9VideoDesc
            </summary>
        </member>
        <member name="T:Mallenom.DShow.VMR9Frequency">
            <summary>
            From VMR9Frequency
            </summary>
        </member>
        <member name="T:Mallenom.DShow.VMR9AlphaBitmap">
            <summary>
            From VMR9AlphaBitmap
            </summary>
        </member>
        <member name="T:Mallenom.DShow.VMR9ProcAmpControlRange">
            <summary>
            From VMR9ProcAmpControlRange
            </summary>
        </member>
        <member name="T:Mallenom.DShow.VMRDeinterlaceTech">
            <summary>
            From VMRDeinterlaceTech
            </summary>
        </member>
        <member name="T:Mallenom.DShow.VMRBitmap">
            <summary>
            From VMRBITMAP_* defines
            </summary>
        </member>
        <member name="T:Mallenom.DShow.VMRDeinterlacePrefs">
            <summary>
            From VMRDeinterlacePrefs
            </summary>
        </member>
        <member name="T:Mallenom.DShow.VMRMixerPrefs">
            <summary>
            From VMRMixerPrefs
            </summary>
        </member>
        <member name="T:Mallenom.DShow.VMRRenderPrefs">
            <summary>
            From VMRRenderPrefs
            </summary>
        </member>
        <member name="T:Mallenom.DShow.VMRMode">
            <summary>
            From VMRMode
            </summary>
        </member>
        <member name="T:Mallenom.DShow.VMRAspectRatioMode">
            <summary>
            From VMR_ASPECT_RATIO_MODE
            </summary>
        </member>
        <member name="T:Mallenom.DShow.VMRAlphaBitmap">
            <summary>
            From VMRALPHABITMAP
            </summary>
        </member>
        <member name="T:Mallenom.DShow.VMRDeinterlaceCaps">
            <summary>
            From VMRDeinterlaceCaps
            </summary>
        </member>
        <member name="T:Mallenom.DShow.VMRFrequency">
            <summary>
            From VMRFrequency
            </summary>
        </member>
        <member name="T:Mallenom.DShow.VMRVideoDesc">
            <summary>
            From VMRVideoDesc
            </summary>
        </member>
        <member name="T:Mallenom.DShow.VMRVideoStreamInfo">
            <summary>
            From VMRVIDEOSTREAMINFO
            </summary>
        </member>
        <member name="T:Mallenom.DShow.DDColorKey">
            <summary>
            From DDCOLORKEY
            </summary>
        </member>
        <member name="T:Mallenom.DShow.VMRMonitorInfo">
            <summary>
            From VMRMONITORINFO
            </summary>
        </member>
        <member name="T:Mallenom.DShow.VMRGuid">
            <summary>
            From VMRGUID
            </summary>
        </member>
        <member name="M:Mallenom.DShow.IVMRWindowlessControl.GetCurrentImage(System.IntPtr@)">
            <summary>
            the caller is responsible for free the returned memory by calling CoTaskMemFree.
            </summary>
        </member>
        <member name="T:Mallenom.Video.DirectShow.DxCapturePin">
            <summary>Пин, с которого осуществляется захват видео.</summary>
        </member>
        <member name="F:Mallenom.Video.DirectShow.DxCapturePin.Capture">
            <summary>Capture.</summary>
        </member>
        <member name="F:Mallenom.Video.DirectShow.DxCapturePin.Preview">
            <summary>Preview.</summary>
        </member>
        <member name="T:Mallenom.Video.DirectShow.DxCaptureResolution">
            <summary>Разрешение захватывваемого видео.</summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.DxCaptureResolution.#ctor(System.Int32,System.Int32)">
            <summary>Создание <see cref="T:Mallenom.Video.DirectShow.DxCaptureResolution"/>.</summary>
            <param name="frameWidth">Ширина кадра.</param>
            <param name="frameHeight">Высота кадра.</param>
        </member>
        <member name="P:Mallenom.Video.DirectShow.DxCaptureResolution.FrameWidth">
            <summary>Возвращает ширину кадра.</summary>
            <value>Ширина кадра.</value>
        </member>
        <member name="P:Mallenom.Video.DirectShow.DxCaptureResolution.FrameHeight">
            <summary>Возвращает высоту кадра.</summary>
            <value>Высота кадра.</value>
        </member>
        <member name="T:Mallenom.Video.DirectShow.DXCaptureSourceConfiguration">
            <summary>Конфигурация видеоисточника <see cref="T:Mallenom.Video.DirectShow.DXCaptureSource"/>.</summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.DXCaptureSourceConfiguration.SaveVideoSourceConfigurationCore(Mallenom.Video.DirectShow.DXCaptureSource,Mallenom.Storage.IObjectStorageWriter)">
            <summary>Выполняет сохранение конфигурации источника.</summary>
            <param name="videoSource">Видеоисточник, конфигурация которого будет сохранена.</param>
            <param name="writer">Объект для записи параметров.</param>
        </member>
        <member name="M:Mallenom.Video.DirectShow.DXCaptureSourceConfiguration.LoadVideoSourceConfigurationCore(Mallenom.Video.DirectShow.DXCaptureSource,Mallenom.Storage.IObjectStorageReader)">
            <summary>Выполняет загрузку конфигурации источника.</summary>
            <param name="videoSource">Видеоисточник, конфигурация которого будет загружена.</param>
            <param name="reader">Объект для чтения параметров.</param>
        </member>
        <member name="T:Mallenom.Video.DirectShow.DXFileSourceConfiguration">
            <summary>Конфигурация видеоисточника <see cref="T:Mallenom.Video.DirectShow.DXFileSource"/>.</summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.DXFileSourceConfiguration.SaveVideoSourceConfigurationCore(Mallenom.Video.DirectShow.DXFileSource,Mallenom.Storage.IObjectStorageWriter)">
            <summary>Выполняет сохранение конфигурации источника.</summary>
            <param name="videoSource">Видеоисточник, конфигурация которого будет сохранена.</param>
            <param name="writer">Объект для записи параметров.</param>
        </member>
        <member name="M:Mallenom.Video.DirectShow.DXFileSourceConfiguration.LoadVideoSourceConfigurationCore(Mallenom.Video.DirectShow.DXFileSource,Mallenom.Storage.IObjectStorageReader)">
            <summary>Выполняет загрузку конфигурации источника.</summary>
            <param name="videoSource">Видеоисточник, конфигурация которого будет загружена.</param>
            <param name="reader">Объект для чтения параметров.</param>
        </member>
        <member name="F:Mallenom.Video.DirectShow.BaseCapture.Log">
            <summary>Лог.</summary>
        </member>
        <member name="F:Mallenom.Video.DirectShow.BaseCapture._mediaControl">
            <summary>DShow Filter: Start/Stop the filter graph -> copy of _graphBuilder.</summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.BaseCapture.OnGraphEvent(Mallenom.DShow.EventCode,System.IntPtr,System.IntPtr)">
            <summary>Override this to handle graph events. Note: processing happens in a separate thread.</summary>
        </member>
        <member name="T:Mallenom.Video.DirectShow.DeviceMatrixUpdatedEventArgs">
            <summary>Аргументы события - устройство обновило кадр.</summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.DeviceMatrixUpdatedEventArgs.#ctor(System.DateTime,Mallenom.Imaging.ImageDataFormat,System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>Конструктор.</summary>
            <param name="timestamp">Время генерации кадра.</param>
            <param name="dataFormat">Формат данных.</param>
            <param name="data">Указатель на данные.</param>
            <param name="stride">Смещение до следующей строки в байтах.</param>
            <param name="width">Ширина изображения.</param>
            <param name="height">Высота изображения.</param>
        </member>
        <member name="P:Mallenom.Video.DirectShow.DeviceMatrixUpdatedEventArgs.DataFormat">
            <summary>Формат данных.</summary>
        </member>
        <member name="P:Mallenom.Video.DirectShow.DeviceMatrixUpdatedEventArgs.Data">
            <summary>Указатель на данные.</summary>
        </member>
        <member name="P:Mallenom.Video.DirectShow.DeviceMatrixUpdatedEventArgs.Stride">
            <summary>Смещение до следующей строки в байтах.</summary>
        </member>
        <member name="P:Mallenom.Video.DirectShow.DeviceMatrixUpdatedEventArgs.Width">
            <summary>Ширина изображения.</summary>
        </member>
        <member name="P:Mallenom.Video.DirectShow.DeviceMatrixUpdatedEventArgs.Height">
            <summary>Высота изображения.</summary>
        </member>
        <member name="T:Mallenom.Video.DirectShow.DXFileSourceProvider">
            <summary>Дескриптор видеоисточника.</summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.DXFileSourceProvider.#ctor">
            <summary>Конструктор.</summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.DXFileSourceProvider.CreateSetupControl(Mallenom.Video.IVideoSource)">
            <summary>Создать контрол настройки для видеоисточника.</summary>
            <param name="source">Видеоисточник.</param>
            <returns>Созданный контрол.</returns>
            <exception cref="T:System.ArgumentNullException">Передан <paramref name="source"/> == <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Передан <paramref name="source"/>, не являющийся экземпляром <see cref="T:Mallenom.Video.DirectShow.DXFileSource"/>.</exception>
        </member>
        <member name="P:Mallenom.Video.DirectShow.DXFileSourceProvider.SourceType">
            <summary>Тип создаваемого видеосточника (<see cref="T:Mallenom.Video.DirectShow.DXFileSource"/>).</summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.DXFileSourceProvider.CreateVideoSource">
            <summary>Создать экземпляр видеоисточника.</summary>
            <returns>Созданный видеоисточник.</returns>
        </member>
        <member name="P:Mallenom.Video.DirectShow.DXFileSourceProvider.Name">
            <summary>Имя источника.</summary>
        </member>
        <member name="P:Mallenom.Video.DirectShow.DXFileSourceProvider.Description">
            <summary>Описание источника.</summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.DXFileSourceProvider.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Mallenom.Video.DirectShow.DXFileSourceProvider"/>.</summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Mallenom.Video.DirectShow.DXFileSourceProvider"/>.</returns>
        </member>
        <member name="T:Mallenom.Video.DirectShow.DXCaptureSource">
            <summary>Видеоисточник для DirectShow-совместимого устройства.</summary>
        </member>
        <member name="F:Mallenom.Video.DirectShow.DXCaptureSource._supportedMatrixTypes">
            <summary>Поддерживаемые типы матриц.</summary>
        </member>
        <member name="F:Mallenom.Video.DirectShow.DXCaptureSource._capture">
            <summary>Текущий DShow-источник.</summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.DXCaptureSource.#cctor">
            <summary>Статический конструктор.</summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.DXCaptureSource.#ctor">
            <summary>Конструктор.</summary>
        </member>
        <member name="P:Mallenom.Video.DirectShow.DXCaptureSource.Name">
            <summary>Имя источника.</summary>
        </member>
        <member name="P:Mallenom.Video.DirectShow.DXCaptureSource.SupportedMatrixTypes">
            <summary>Поддерживаемые типы матриц.</summary>
        </member>
        <member name="P:Mallenom.Video.DirectShow.DXCaptureSource.CapturePin">
            <summary>Возвращает и устанавливает пин, с которого осуществляется захват видео.</summary>
            <value>Пин, с которого осуществляется захват видео.</value>
        </member>
        <member name="P:Mallenom.Video.DirectShow.DXCaptureSource.PreferredResolution">
            <summary>Возвращает и устанавливает предпочитаемое разрешение захватываемого видео.</summary>
            <value>Предпочитаемое разрешение захватываемого видео.</value>
        </member>
        <member name="M:Mallenom.Video.DirectShow.DXCaptureSource.CreateCaptureDeviceSetting">
            <summary>Создать параметр для выбора устройства видеоввода.</summary>
            <returns>Созданный параметр.</returns>
        </member>
        <member name="M:Mallenom.Video.DirectShow.DXCaptureSource.AttachToDevice(Mallenom.Video.DirectShow.Filter)">
            <summary>Подключиться к устройству.</summary>
            <param name="device">Устройство.</param>
        </member>
        <member name="M:Mallenom.Video.DirectShow.DXCaptureSource.DetachFromDevice(Mallenom.Video.DirectShow.Filter)">
            <summary>Отключиьтся от устройства.</summary>
            <param name="device">Устройство.</param>
        </member>
        <member name="P:Mallenom.Video.DirectShow.DXCaptureSource.Settings">
            <summary>Параметры источника.</summary>
        </member>
        <member name="P:Mallenom.Video.DirectShow.DXCaptureSource.DeviceSettings">
            <summary>Параметры устройства.</summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.DXCaptureSource.InternalOpen(Mallenom.Video.DirectShow.Filter)">
            <summary>Открыть источник.</summary>
            <param name="device">Устройство.</param>
        </member>
        <member name="M:Mallenom.Video.DirectShow.DXCaptureSource.InternalStart(Mallenom.Video.DirectShow.Filter)">
            <summary>Запустить источник.</summary>
            <param name="device">Устройство.</param>
        </member>
        <member name="M:Mallenom.Video.DirectShow.DXCaptureSource.InternalStop(Mallenom.Video.DirectShow.Filter)">
            <summary>Остановить источник.</summary>
            <param name="device">Устройство.</param>
        </member>
        <member name="M:Mallenom.Video.DirectShow.DXCaptureSource.InternalClose(Mallenom.Video.DirectShow.Filter)">
            <summary>Закрыть источник.</summary>
            <param name="device">Устройство.</param>
        </member>
        <member name="P:Mallenom.Video.DirectShow.DXCaptureSource.Actions">
            <summary>Возвращает список действий, которые может выполнить источник видео.</summary>
            <value>Список действий, которые может выполнить источник видео.</value>
        </member>
        <member name="E:Mallenom.Video.DirectShow.DXCaptureSource.ActionsChanged">
            <summary>Список выполняемых действий изменился.</summary>
        </member>
        <member name="T:Mallenom.Video.DirectShow.DXCaptureSourceProvider">
            <summary>Дескриптор видеоисточника.</summary>
        </member>
        <member name="P:Mallenom.Video.DirectShow.DXCaptureSourceProvider.Devices">
            <summary>Устройства видеоввода.</summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.DXCaptureSourceProvider.CreateVideoSource">
            <summary>Создать экземпляр видеоисточника.</summary>
            <returns>Созданный видеоисточник.</returns>
        </member>
        <member name="P:Mallenom.Video.DirectShow.DXCaptureSourceProvider.Name">
            <summary>Имя источника.</summary>
        </member>
        <member name="P:Mallenom.Video.DirectShow.DXCaptureSourceProvider.Description">
            <summary>Описание источника.</summary>
        </member>
        <member name="T:Mallenom.Video.DirectShow.DXFileSource">
            <summary>Файловый источник видео на базе DirectShow.</summary>
        </member>
        <member name="F:Mallenom.Video.DirectShow.DXFileSource.Log">
            <summary>Лог.</summary>
        </member>
        <member name="F:Mallenom.Video.DirectShow.DXFileSource._supportedMatrixTypes">
            <summary>Поддерживаемые типы матриц.</summary>
        </member>
        <member name="F:Mallenom.Video.DirectShow.DXFileSource._state">
            <summary>Состояние источника.</summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.DXFileSource.#cctor">
            <summary>Инициализация типа <see cref="T:Mallenom.Video.DirectShow.DXFileSource"/>.</summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.DXFileSource.#ctor">
            <summary>Конструктор.</summary>
        </member>
        <member name="P:Mallenom.Video.DirectShow.DXFileSource.Repeat">
            <summary> Цикличное воспроизведение. </summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.DXFileSource.SetRepeat(System.Boolean)">
            <summary> Установить цикличное воспроизведение. </summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.DXFileSource.SubscribeToEvents">
            <summary>Подписаться на события изменения параметров.</summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.DXFileSource.UnsubscribeFromEvents">
            <summary>Отписаться от событий изменения параметров.</summary>
        </member>
        <member name="P:Mallenom.Video.DirectShow.DXFileSource.Settings">
            <summary>Настройки источника.</summary>
        </member>
        <member name="P:Mallenom.Video.DirectShow.DXFileSource.FileName">
            <summary>Имя видеофайла.</summary>
        </member>
        <member name="P:Mallenom.Video.DirectShow.DXFileSource.PlayAudio">
            <summary>Воспроизводить звуковые треки, если они присутствуют в файле.</summary>
        </member>
        <member name="P:Mallenom.Video.DirectShow.DXFileSource.Name">
            <summary>Имя источника.</summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.DXFileSource.SetFileName(System.String)">
            <summary>Указать видеофайл.</summary>
            <param name="fileName">Путь к новому видеофайлу.</param>
        </member>
        <member name="M:Mallenom.Video.DirectShow.DXFileSource.Open">
            <summary>Открыть источник.</summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.DXFileSource.Close">
            <summary>Закрыть источник.</summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.DXFileSource.Start">
            <summary>Запустить источник.</summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.DXFileSource.Stop">
            <summary>Остановить источник.</summary>
        </member>
        <member name="P:Mallenom.Video.DirectShow.DXFileSource.State">
            <summary>Состояние источника.</summary>
        </member>
        <member name="P:Mallenom.Video.DirectShow.DXFileSource.SupportedMatrixTypes">
            <summary>Поддерживаемые типы матриц.</summary>
        </member>
        <member name="P:Mallenom.Video.DirectShow.DXFileSource.FrameDelay">
            <summary>
                Возвращает и устанавливает задержку в миллисекундах между соседними кадрами
                при автоматическом воспроизведении.
            </summary>
        </member>
        <member name="P:Mallenom.Video.DirectShow.DXFileSource.IsRotate">
            <summary>Зацикливать ли видеоисточник.</summary>
        </member>
        <member name="E:Mallenom.Video.DirectShow.DXFileSource.Completed">
            <summary>Генерируется после перехода вперед с последнего кадра.</summary>
        </member>
        <member name="E:Mallenom.Video.DirectShow.DXFileSource.CurrentChanged">
            <summary>Генерируется после смены кадра.</summary>
        </member>
        <member name="E:Mallenom.Video.DirectShow.DXFileSource.CurrentChanging">
            <summary>Генерируется перед сменой кадра.</summary>
        </member>
        <member name="P:Mallenom.Video.DirectShow.DXFileSource.Count">
            <summary>Возвращает количество кадров.</summary>
            <value>Количество кадров.</value>
        </member>
        <member name="P:Mallenom.Video.DirectShow.DXFileSource.Current">
            <summary>Возвращает номер текущего кадра.</summary>
            <value>Номер текущего кадра.</value>
        </member>
        <member name="M:Mallenom.Video.DirectShow.DXFileSource.GoFirst">
            <summary>Перейти к первому кадру.</summary>
            <returns><c>true</c>, если переход выполнен, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Video.DirectShow.DXFileSource.GoLast">
            <summary>Перейти к последнему кадру.</summary>
            <returns><c>true</c>, если переход выполнен, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Video.DirectShow.DXFileSource.GoNext">
            <summary>Перейти к следующему кадру.</summary>
            <returns><c>true</c>, если переход выполнен, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Video.DirectShow.DXFileSource.GoPrev">
            <summary>Перейти к предыдущему кадру.</summary>
            <returns><c>true</c>, если переход выполнен, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Mallenom.Video.DirectShow.DXFileSource.GetEnumerator">
            <summary>Метод не поддерживается.</summary>
            <returns>Метож не поддерживается.</returns>
            <exception cref="T:System.NotSupportedException" />
        </member>
        <member name="M:Mallenom.Video.DirectShow.DXFileSource.Mallenom#Systems#Config#IConfigurationValue#LoadState(Mallenom.Systems.Config.PropertyBag)">
            <summary>Загрузиь настройки источника.</summary>
            <param name="propertyBag">Хранилище настроек.</param>
        </member>
        <member name="M:Mallenom.Video.DirectShow.DXFileSource.Mallenom#Systems#Config#IConfigurationValue#SaveState(Mallenom.Systems.Config.PropertyBag)">
            <summary>Сохранить настройки источника.</summary>
            <param name="propertyBag">Хранилище настроек.</param>
        </member>
        <member name="M:Mallenom.Video.DirectShow.DXFileSource.Dispose">
            <summary>Releases all resources used by this <see cref="T:Mallenom.Video.DirectShow.DXFileSource" />.</summary>
        </member>
        <member name="T:Mallenom.Video.DirectShow.AudioCapabilities">
            <summary>Возможности аудиоустройства.</summary>
        </member>
        <member name="F:Mallenom.Video.DirectShow.AudioCapabilities.MinimumChannels">
            <summary> Minimum number of audio channels. </summary>
        </member>
        <member name="F:Mallenom.Video.DirectShow.AudioCapabilities.MaximumChannels">
            <summary> Maximum number of audio channels. </summary>
        </member>
        <member name="F:Mallenom.Video.DirectShow.AudioCapabilities.ChannelsGranularity">
            <summary> Granularity of the channels. For example, channels 2 through 4, in steps of 2. </summary>
        </member>
        <member name="F:Mallenom.Video.DirectShow.AudioCapabilities.MinimumSampleSize">
            <summary> Minimum number of bits per sample. </summary>
        </member>
        <member name="F:Mallenom.Video.DirectShow.AudioCapabilities.MaximumSampleSize">
            <summary> Maximum number of bits per sample. </summary>
        </member>
        <member name="F:Mallenom.Video.DirectShow.AudioCapabilities.SampleSizeGranularity">
            <summary> Granularity of the bits per sample. For example, 8 bits per sample through 32 bits per sample, in steps of 8. </summary>
        </member>
        <member name="F:Mallenom.Video.DirectShow.AudioCapabilities.MinimumSamplingRate">
            <summary> Minimum sample frequency. </summary>
        </member>
        <member name="F:Mallenom.Video.DirectShow.AudioCapabilities.MaximumSamplingRate">
            <summary> Maximum sample frequency. </summary>
        </member>
        <member name="F:Mallenom.Video.DirectShow.AudioCapabilities.SamplingRateGranularity">
            <summary> Granularity of the frequency. For example, 11025 Hz to 44100 Hz, in steps of 11025 Hz. </summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.AudioCapabilities.#ctor(Mallenom.DShow.IAMStreamConfig)">
            <summary> Retrieve capabilities of an audio device </summary>
        </member>
        <member name="T:Mallenom.Video.DirectShow.FilterProvider">
            <summary>
             Provides collections of devices and compression codecs
             installed on the system. 
            </summary>
        </member>
        <member name="F:Mallenom.Video.DirectShow.FilterProvider.VideoInputDevices">
            <summary> Collection of available video capture devices. </summary>
        </member>
        <member name="T:Mallenom.Video.DirectShow.CrossbarSource">
            <summary></summary>
        </member>
        <member name="P:Mallenom.Video.DirectShow.CrossbarSource.Enabled">
            <summary> Enabled or disable this source. </summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.CrossbarSource.#ctor(Mallenom.DShow.IAMCrossbar,System.Int32,System.Int32,Mallenom.DShow.PhysicalConnectorType)">
            <summary>Constructor. This class cannot be created directly.</summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.CrossbarSource.GetName(Mallenom.DShow.PhysicalConnectorType)">
            <summary> Retrieve the friendly name of a connectorType. </summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.CrossbarSource.Dispose">
            <summary> Release unmanaged resources. </summary>
        </member>
        <member name="T:Mallenom.Video.DirectShow.DirectShowPropertyPage">
            <summary>
             Property pages for a DirectShow filter (e.g. hardware device). These
             property pages do not support persisting their settings. 
            </summary>
        </member>
        <member name="F:Mallenom.Video.DirectShow.DirectShowPropertyPage._specifyPropertyPages">
            <summary> COM ISpecifyPropertyPages interface </summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.DirectShowPropertyPage.#ctor(System.String,Mallenom.DShow.ISpecifyPropertyPages)">
            <summary> Constructor </summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.DirectShowPropertyPage.Show(System.Windows.Forms.IWin32Window)">
            <summary> 
             Show the property page. Some property pages cannot be displayed 
             while previewing and/or capturing. 
            </summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.DirectShowPropertyPage.Dispose">
            <summary> Release unmanaged resources </summary>
        </member>
        <member name="F:Mallenom.Video.DirectShow.CaptureDevice._videoDevice">
            <summary>Property Backer: Video capture device filter.</summary>
        </member>
        <member name="F:Mallenom.Video.DirectShow.CaptureDevice._videoSources">
            <summary>Property Backer: list of physical video sources.</summary>
        </member>
        <member name="F:Mallenom.Video.DirectShow.CaptureDevice._videoCapabilities">
            <summary>Property Backer: capabilities of video device.</summary>
        </member>
        <member name="F:Mallenom.Video.DirectShow.CaptureDevice._videoDeviceFilter">
            <summary>DShow Filter: selected video device.</summary>
        </member>
        <member name="F:Mallenom.Video.DirectShow.CaptureDevice._videoStreamConfig">
            <summary>DShow Filter: configure frame rate, size.</summary>
        </member>
        <member name="F:Mallenom.Video.DirectShow.CaptureDevice._captureGraphBuilder">
            <summary>DShow Filter: building graphs for capturing video.</summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.CaptureDevice.#cctor">
            <summary>Инициализация типа <see cref="T:Mallenom.Video.DirectShow.CaptureDevice"/>.</summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.CaptureDevice.#ctor(Mallenom.Video.DirectShow.Filter,System.Guid,Mallenom.Video.DirectShow.DxCaptureResolution)">
            <summary>Создание объекта.</summary>
            <param name="videoDevice">Фильтр устройства видеозахвата.</param>
            <param name="pinCategory">Категория пина, с которого пойдет видео.</param>
            <param name="preferredResolution">Предпочитаемое разрешение.</param>
        </member>
        <member name="P:Mallenom.Video.DirectShow.CaptureDevice.VideoSources">
            <summary> 
             Collection of available video sources/physical connectors 
             on the current video device. 
            </summary>
            <remarks>
             In most cases, if the device has only one source, 
             this collection will be empty. 
            
            <para>
             The information contained in this property is retrieved and
             cached the first time this property is accessed. Future
             calls to this property use the cached results. This was done 
             for performance. </para>
             
            <para>
             However, this means <b>you may get different results depending 
             on when you access this property first</b>. If you are experiencing 
             problems, try accessing the property immediately after creating 
             the Capture class or immediately after setting the video and 
             audio compressors. Also, inform the developer. </para>
            </remarks>
        </member>
        <member name="T:Mallenom.Video.DirectShow.VideoStreamFormat">
            <summary>Формат видеопотока.</summary>
        </member>
        <member name="P:Mallenom.Video.DirectShow.VideoStreamFormat.FrameWidth">
            <summary>Возвращает ширину кадра.</summary>
            <value>Ширина кадра.</value>
        </member>
        <member name="P:Mallenom.Video.DirectShow.VideoStreamFormat.FrameHeight">
            <summary>Возвращает высоту кадра.</summary>
            <value>Высота кадра.</value>
        </member>
        <member name="M:Mallenom.Video.DirectShow.VideoStreamFormat.ToString">
            <summary>Возвращает строковое представление данного экземпляра <see cref="T:Mallenom.Video.DirectShow.VideoStreamFormat"/>.</summary>
            <returns>Строковое представление данного экземпляра <see cref="T:Mallenom.Video.DirectShow.VideoStreamFormat"/>.</returns>
        </member>
        <member name="T:Mallenom.Video.DirectShow.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Mallenom.Video.DirectShow.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Mallenom.Video.DirectShow.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Mallenom.Video.DirectShow.Properties.Resources.DEVICE_SOURCE_DESCRIPTION">
            <summary>
              Looks up a localized string similar to DirectShow Capture Device.
            </summary>
        </member>
        <member name="P:Mallenom.Video.DirectShow.Properties.Resources.DEVICE_SOURCE_NAME">
            <summary>
              Looks up a localized string similar to DirectShow Device: {0}.
            </summary>
        </member>
        <member name="P:Mallenom.Video.DirectShow.Properties.Resources.DEVICE_SOURCE_NAME_NO_DEVICE">
            <summary>
              Looks up a localized string similar to DirectShow Device.
            </summary>
        </member>
        <member name="P:Mallenom.Video.DirectShow.Properties.Resources.FILE_SOURCE_DESCRIPTION">
            <summary>
              Looks up a localized string similar to DirectShow Video File.
            </summary>
        </member>
        <member name="P:Mallenom.Video.DirectShow.Properties.Resources.FILE_SOURCE_NAME">
            <summary>
              Looks up a localized string similar to DirectShow File: {0}.
            </summary>
        </member>
        <member name="P:Mallenom.Video.DirectShow.Properties.Resources.FILE_SOURCE_NAME_NO_FILE">
            <summary>
              Looks up a localized string similar to DirectShow File.
            </summary>
        </member>
        <member name="P:Mallenom.Video.DirectShow.Properties.Resources.VideoCamera">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="T:Mallenom.Video.DirectShow.SettingCategories">
            <summary>Категории настроек.</summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.SettingCategories.#cctor">
            <summary>Инициализация типа <see cref="T:Mallenom.Video.DirectShow.SettingCategories"/>.</summary>
        </member>
        <member name="F:Mallenom.Video.DirectShow.SettingCategories.VideoSourceProperties">
            <summary>Настройки источника.</summary>
        </member>
        <member name="F:Mallenom.Video.DirectShow.SettingCategories.InputProperties">
            <summary>Настройки источника.</summary>
        </member>
        <member name="F:Mallenom.Video.DirectShow.SettingCategories.AnalogDecoderProperties">
            <summary>Настройки декодера.</summary>
        </member>
        <member name="F:Mallenom.Video.DirectShow.SettingCategories.TVTunerProperties">
            <summary>Настройки тюнера.</summary>
        </member>
        <member name="F:Mallenom.Video.DirectShow.SettingCategories.ImageProperties">
            <summary>Настройки изображения.</summary>
        </member>
        <member name="F:Mallenom.Video.DirectShow.SettingCategories.CameraProperties">
            <summary>Настройки камеры.</summary>
        </member>
        <member name="F:Mallenom.Video.DirectShow.SettingCategories.PlaybackProperties">
            <summary>Воспроизведение.</summary>
        </member>
        <member name="T:Mallenom.Video.DirectShow.DeviceInUseException">
            <summary>Exception thrown when the device cannot be rendered or started.</summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.DeviceInUseException.#ctor(System.String,System.Int32)">
            <summary>Initializes a new instance with the specified HRESULT.</summary>
            <param name="deviceName">Имя устройства.</param>
            <param name="hResult">HRESULT</param>
        </member>
        <member name="T:Mallenom.Video.DirectShow.Filter">
            <summary>Фильтр DShow.</summary>
        </member>
        <member name="F:Mallenom.Video.DirectShow.Filter._name">
            <summary> Human-readable name of the filter </summary>
        </member>
        <member name="F:Mallenom.Video.DirectShow.Filter._monikerString">
            <summary> Unique string referencing this filter. This string can be used to recreate this filter. </summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.Filter.#ctor(System.String)">
            <summary> Create a new filter from its moniker string. </summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.Filter.#ctor(System.Runtime.InteropServices.ComTypes.IMoniker)">
            <summary> Create a new filter from its moniker </summary>
        </member>
        <member name="P:Mallenom.Video.DirectShow.Filter.Name">
            <summary> Human-readable name of the filter </summary>
        </member>
        <member name="P:Mallenom.Video.DirectShow.Filter.MonikerString">
            <summary> Unique string referencing this filter. This string can be used to recreate this filter. </summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.Filter.GetMonikerString(System.Runtime.InteropServices.ComTypes.IMoniker)">
            <summary> Retrieve the a moniker's display name (i.e. it's unique string) </summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.Filter.GetName(System.Runtime.InteropServices.ComTypes.IMoniker)">
            <summary> Retrieve the human-readable name of the filter </summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.Filter.GetName(System.String)">
            <summary> Get a moniker's human-readable name based on a moniker string. </summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.Filter.GetAnyMoniker">
            <summary>
             This method gets a UCOMIMoniker object.
            
             HACK: The only way to create a UCOMIMoniker from a moniker 
             string is to use UCOMIMoniker.ParseDisplayName(). So I 
             need ANY UCOMIMoniker object so that I can call 
             ParseDisplayName(). Does anyone have a better solution?
            
             This assumes there is at least one video compressor filter
             installed on the system.
            </summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.Filter.CompareTo(System.Object)">
            <summary>
             Compares the current instance with another object of 
             the same type.
            </summary>
        </member>
        <member name="P:Mallenom.Video.DirectShow.Filter.SettingName">
            <summary>Идентификационная строка.</summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.Filter.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Mallenom.Video.DirectShow.Filter"/>.</summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Mallenom.Video.DirectShow.Filter"/>.</returns>
        </member>
        <member name="P:Mallenom.Video.DirectShow.Filter.Capturing">
            <summary>Осуществляет захват видео в данный момент.</summary>
        </member>
        <member name="P:Mallenom.Video.DirectShow.Filter.DisplayName">
            <summary>Отображаемое имя.</summary>
        </member>
        <member name="P:Mallenom.Video.DirectShow.Filter.HandlingVideoSource">
            <summary>Тип видеоисточника, способного работать с данным устройством.</summary>
        </member>
        <member name="P:Mallenom.Video.DirectShow.Filter.Icon">
            <summary>Пиктограмма.</summary>
        </member>
        <member name="P:Mallenom.Video.DirectShow.Filter.Information">
            <summary>Информация об устройстве.</summary>
        </member>
        <member name="P:Mallenom.Video.DirectShow.Filter.UsedBySource">
            <summary>Используется источниками.</summary>
        </member>
        <member name="T:Mallenom.Video.DirectShow.FilterCollection">
            <summary>
             A collection of Filter objects (DirectShow filters).
             This is used by the <see cref="T:System.Text.RegularExpressions.Capture"/> class to provide
             lists of capture devices and compression filters. This class
             cannot be created directly.
            </summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.FilterCollection.#ctor(System.Guid)">
            <summary> Populate the collection with a list of filters from a particular category. </summary>
        </member>
        <member name="P:Mallenom.Video.DirectShow.FilterCollection.Item(System.Int32)">
            <summary> Get the filter at the specified index. </summary>
        </member>
        <member name="P:Mallenom.Video.DirectShow.FilterCollection.Item(System.String)">
            <summary>
            
            </summary>
            <param name="monikerName"></param>
            <returns></returns>
        </member>
        <member name="M:Mallenom.Video.DirectShow.FilterCollection.GetFilters(System.Guid)">
            <summary> Populate the InnerList with a list of filters from a particular category </summary>
        </member>
        <member name="P:Mallenom.Video.DirectShow.FilterCollection.Count">
            <summary>Количество фильтров в коллекции.</summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.FilterCollection.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Mallenom.Video.DirectShow.PropertyPage.Name">
            <summary> Name of property page. This name may not be unique </summary>
        </member>
        <member name="F:Mallenom.Video.DirectShow.PropertyPage.SupportsPersisting">
            <summary> Does this property page support saving and loading the user's choices. </summary>
        </member>
        <member name="P:Mallenom.Video.DirectShow.PropertyPage.State">
            <summary> 
             Get or set the state of the property page. This is used to save
             and restore the user's choices without redisplaying the property page. 
            </summary>
            <remarks>
             After showing this property page, read and store the value of 
             this property. At a later time, the user's choices can be 
             reloaded by setting this property with the value stored earlier. 
             Note that some property pages, after setting this property, 
             will not reflect the new state. However, the filter will use the
             new settings. 
             
            <para>
             When reading this property, copy the entire array at once then manipulate
             your local copy (e..g byte[] myState = propertyPage.State). When
             setting this property set the entire array at once (e.g. propertyPage = myState).
            </para>
             
            <para>
             Not all property pages support saving/loading state. Check the 
             <see cref="F:Mallenom.Video.DirectShow.PropertyPage.SupportsPersisting"/> property to determine if this 
             property page supports it.
            </para>
            </remarks>
        </member>
        <member name="M:Mallenom.Video.DirectShow.PropertyPage.#ctor">
            <summary> Constructor </summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.PropertyPage.Show(System.Windows.Forms.IWin32Window)">
            <summary> 
             Show the property page. Some property pages cannot be displayed 
             while previewing and/or capturing. This method will block until
             the property page is closed by the user.
            </summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.PropertyPage.Dispose">
            <summary> Release unmanaged resources </summary>
        </member>
        <member name="T:Mallenom.Video.DirectShow.Source">
            <summary></summary>
        </member>
        <member name="F:Mallenom.Video.DirectShow.Source._name">
            <summary>Name of the source.</summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.Source.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name">Name of the source.</param>
        </member>
        <member name="P:Mallenom.Video.DirectShow.Source.Name">
            <summary>The name of the source. Read-only.</summary>
        </member>
        <member name="P:Mallenom.Video.DirectShow.Source.Enabled">
            <summary>Is this source enabled.</summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.Source.ToString">
            <summary> Obtains the String representation of this instance. </summary>
        </member>
        <member name="P:Mallenom.Video.DirectShow.Source.SettingName">
            <summary>Идентификационная строка.</summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.SourceCollection.#ctor">
            <summary> Initialize collection with no sources. </summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.SourceCollection.#ctor(Mallenom.DShow.ICaptureGraphBuilder2,Mallenom.DShow.IBaseFilter,System.Boolean)">
            <summary> Initialize collection with sources from graph. </summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.SourceCollection.Finalize">
            <summary> Destructor. Release unmanaged resources. </summary>
        </member>
        <member name="P:Mallenom.Video.DirectShow.SourceCollection.Item(System.Int32)">
            <summary> Get the source at the specified index. </summary>
        </member>
        <member name="P:Mallenom.Video.DirectShow.SourceCollection.CurrentSource">
            <summary>
             Gets or sets the source/physical connector currently in use.
             This is marked internal so that the Capture class can control
             how and when the source is changed.
            </summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.SourceCollection.Clear">
            <summary> Empty the collection. </summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.SourceCollection.Dispose">
            <summary> Release unmanaged resources. </summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.SourceCollection.AddFromGraph(Mallenom.DShow.ICaptureGraphBuilder2,Mallenom.DShow.IBaseFilter,System.Boolean)">
            <summary> Populate the collection from a filter graph. </summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.SourceCollection.FindCrossbars(Mallenom.DShow.ICaptureGraphBuilder2,Mallenom.DShow.IBaseFilter)">
            <summary>
             Retrieve a list of crossbar filters in the graph.
             Most hardware devices should have a maximum of 2 crossbars, 
             one for video and another for audio.
            </summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.SourceCollection.FindCrossbarSources(Mallenom.DShow.ICaptureGraphBuilder2,Mallenom.DShow.IAMCrossbar,System.Boolean)">
            <summary>
             Populate the internal InnerList with sources/physical connectors
             found on the crossbars. Each instance of this class is limited
             to video only or audio only sources ( specified by the isVideoDevice
             parameter on the constructor) so we check each source before adding
             it to the list.
            </summary>
        </member>
        <member name="T:Mallenom.Video.DirectShow.VideoCapabilities">
            <summary>
             Capabilities of the video device such as 
             min/max frame size and frame rate.
            </summary>
        </member>
        <member name="M:Mallenom.Video.DirectShow.VideoCapabilities.#ctor(Mallenom.DShow.IAMStreamConfig)">
            <summary> Retrieve capabilities of a video device </summary>
        </member>
        <member name="P:Mallenom.Video.DirectShow.VideoCapabilities.Formats">
            <summary>Возвращает список доступных форматов видеопотока.</summary>
            <value>Список форматов видеопотока.</value>
        </member>
        <member name="M:Mallenom.Video.DirectShow.VideoCapabilities.Dispose">
            <summary>Освобождает ресурсы.</summary>
        </member>
        <member name="T:Native.Constants">
            <summary>Константы для native-функций.</summary>
        </member>
        <member name="F:Native.Constants.INVALID_HANDLE_VALUE">
            <summary>Invalid handle value.</summary>
        </member>
        <member name="F:Native.Constants.HWND_BOTTOM">
            <summary>
            Places the window at the bottom of the Z order.
            If the hWnd parameter identifies a topmost window, the window loses its topmost status and is placed at the bottom of all other windows.
            </summary>
        </member>
        <member name="F:Native.Constants.HWND_NOTOPMOST">
            <summary>
            Places the window above all non-topmost windows (that is, behind all topmost windows).
            This flag has no effect if the window is already a non-topmost window.
            </summary>
        </member>
        <member name="F:Native.Constants.HWND_TOP">
            <summary>Places the window at the top of the Z order.</summary>
        </member>
        <member name="F:Native.Constants.HWND_TOPMOST">
            <summary>Places the window above all non-topmost windows. The window maintains its topmost position even when it is deactivated.</summary>
        </member>
        <member name="F:Native.Constants.FILE_SHARE_NONE">
            <summary>
            Prevents other processes from opening a file or device if they request delete, read, or write access.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_SHARE_READ">
            <summary>
            Enables subsequent open operations on a file or device to request read access.
            Otherwise, other processes cannot open the file or device if they request read access.
            If this flag is not specified, but the file or device has been opened for read access, the function fails.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_SHARE_WRITE">
            <summary>
            Enables subsequent open operations on a file or device to request write access.
            Otherwise, other processes cannot open the file or device if they request write access.
            If this flag is not specified, but the file or device has been opened for write access or has a file mapping with write access, the function fails.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_SHARE_DELETE">
            <summary>
            Enables subsequent open operations on a file or device to request delete access.
            Otherwise, other processes cannot open the file or device if they request delete access.
            If this flag is not specified, but the file or device has been opened for delete access, the function fails.
            </summary>
            <remarks>Delete access allows both delete and rename operations.</remarks>
        </member>
        <member name="F:Native.Constants.CREATE_ALWAYS">
            <summary>
            Creates a new file, always.
            If the specified file exists and is writable, the function overwrites the file, the function succeeds, and last-error code is set to ERROR_ALREADY_EXISTS (183).
            If the specified file does not exist and is a valid path, a new file is created, the function succeeds, and the last-error code is set to zero.
            </summary>
        </member>
        <member name="F:Native.Constants.CREATE_NEW">
            <summary>
            Creates a new file, only if it does not already exist.
            If the specified file exists, the function fails and the last-error code is set to ERROR_FILE_EXISTS (80).
            If the specified file does not exist and is a valid path to a writable location, a new file is created.
            </summary>
        </member>
        <member name="F:Native.Constants.OPEN_ALWAYS">
            <summary>
            Opens a file, always.
            If the specified file exists, the function succeeds and the last-error code is set to ERROR_ALREADY_EXISTS (183).
            If the specified file does not exist and is a valid path to a writable location, the function creates a file and the last-error code is set to zero.
            </summary>
        </member>
        <member name="F:Native.Constants.OPEN_EXISTING">
            <summary>
            Opens a file or device, only if it exists.
            If the specified file or device does not exist, the function fails and the last-error code is set to ERROR_FILE_NOT_FOUND (2).
            </summary>
        </member>
        <member name="F:Native.Constants.TRUNCATE_EXISTING">
            <summary>
            Opens a file and truncates it so that its size is zero bytes, only if it exists.
            If the specified file does not exist, the function fails and the last-error code is set to ERROR_FILE_NOT_FOUND (2).
            The calling process must open the file with the GENERIC_WRITE bit set as part of the dwDesiredAccess parameter.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_ATTRIBUTE_ARCHIVE">
            <summary>
            The file should be archived. Applications use this attribute to mark files for backup or removal.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_ATTRIBUTE_ENCRYPTED">
            <summary>
            The file or directory is encrypted. For a file, this means that all data in the file is encrypted.
            For a directory, this means that encryption is the default for newly created files and subdirectories.
            This flag has no effect if <see cref="F:Native.Constants.FILE_ATTRIBUTE_SYSTEM"/> is also specified.
            This flag is not supported on Home, Home Premium, Starter, or ARM editions of Windows.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_ATTRIBUTE_HIDDEN">
            <summary>
            The file is hidden. Do not include it in an ordinary directory listing.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_ATTRIBUTE_NORMAL">
            <summary>
            The file does not have other attributes set. This attribute is valid only if used alone.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_ATTRIBUTE_OFFLINE">
            <summary>
            The data of a file is not immediately available.
            This attribute indicates that file data is physically moved to offline storage.
            This attribute is used by Remote Storage, the hierarchical storage management software.
            Applications should not arbitrarily change this attribute.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_ATTRIBUTE_READONLY">
            <summary>
            The file is read only. Applications can read the file, but cannot write to or delete it.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_ATTRIBUTE_SYSTEM">
            <summary>
            The file is part of or used exclusively by an operating system.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_ATTRIBUTE_TEMPORARY">
            <summary>
            The file is being used for temporary storage.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_FLAG_BACKUP_SEMANTICS">
            <summary>
            The file is being opened or created for a backup or restore operation.
            The system ensures that the calling process overrides file security checks when the process has SE_BACKUP_NAME and SE_RESTORE_NAME privileges.
            You must set this flag to obtain a handle to a directory.
            A directory handle can be passed to some functions instead of a file handle.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_FLAG_DELETE_ON_CLOSE">
            <summary>
            The file is to be deleted immediately after all of its handles are closed, which includes the specified handle and any other open or duplicated handles.
            If there are existing open handles to a file, the call fails unless they were all opened with the <see cref="F:Native.Constants.FILE_SHARE_DELETE"/> share mode.
            Subsequent open requests for the file fail, unless the FILE_SHARE_DELETE share mode is specified.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_FLAG_NO_BUFFERING">
            <summary>
            The file or device is being opened with no system caching for data reads and writes.
            This flag does not affect hard disk caching or memory mapped files.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_FLAG_OPEN_NO_RECALL">
            <summary>
            The file data is requested, but it should continue to be located in remote storage.
            It should not be transported back to local storage.
            This flag is for use by remote storage systems.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_FLAG_OPEN_REPARSE_POINT">
            <summary>
            Normal reparse point processing will not occur;
            CreateFile will attempt to open the reparse point. When a file is opened, a file handle is returned,
            whether or not the filter that controls the reparse point is operational.
            This flag cannot be used with the <see cref="F:Native.Constants.CREATE_ALWAYS"/> flag.
            If the file is not a reparse point, then this flag is ignored.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_FLAG_OVERLAPPED">
            <summary>
            The file or device is being opened or created for asynchronous I/O.
            When subsequent I/O operations are completed on this handle, the event specified in the OVERLAPPED structure will be set to the signaled state.
            If this flag is specified, the file can be used for simultaneous read and write operations.
            If this flag is not specified, then I/O operations are serialized, even if the calls to the read and write functions specify an OVERLAPPED structure.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_FLAG_POSIX_SEMANTICS">
            <summary>
            Access will occur according to POSIX rules.
            This includes allowing multiple files with names, differing only in case, for file systems that support that naming.
            Use care when using this option, because files created with this flag may not be accessible by applications that are written for MS-DOS or 16-bit Windows.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_FLAG_RANDOM_ACCESS">
            <summary>
            Access is intended to be random. The system can use this as a hint to optimize file caching.
            This flag has no effect if the file system does not support cached I/O and <see cref="F:Native.Constants.FILE_FLAG_NO_BUFFERING"/>.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_FLAG_SESSION_AWARE">
            <summary>
            The file or device is being opened with session awareness.
            If this flag is not specified, then per-session devices (such as a redirected USB device) cannot be opened by processes running in session 0.
            This flag has no effect for callers not in session 0.
            This flag is supported only on server editions of Windows.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_FLAG_SEQUENTIAL_SCAN">
            <summary>
            Access is intended to be sequential from beginning to end. The system can use this as a hint to optimize file caching.
            This flag should not be used if read-behind (that is, reverse scans) will be used.
            This flag has no effect if the file system does not support cached I/O and <see cref="F:Native.Constants.FILE_FLAG_NO_BUFFERING"/>.
            </summary>
        </member>
        <member name="F:Native.Constants.FILE_FLAG_WRITE_THROUGH">
            <summary>
            Write operations will not go through any intermediate cache, they will go directly to disk.
            </summary>
        </member>
        <member name="F:Native.Constants.GENERIC_READ">
            <summary>Read access.</summary>
        </member>
        <member name="F:Native.Constants.GENERIC_WRITE">
            <summary>Write access.</summary>
        </member>
        <member name="F:Native.Constants.GENERIC_EXECUTE">
            <summary>Execute access.</summary>
        </member>
        <member name="F:Native.Constants.GENERIC_ALL">
            <summary>All possible access rights.</summary>
        </member>
        <member name="F:Native.Constants.GWL_EXSTYLE">
            <summary>Extended window style.</summary>
        </member>
        <member name="F:Native.Constants.GWLP_HINSTANCE">
            <summary>Application instance handle.</summary>
        </member>
        <member name="F:Native.Constants.GWLP_ID">
            <summary>Identifier of the child window.</summary>
        </member>
        <member name="F:Native.Constants.GWL_STYLE">
            <summary>Window style.</summary>
        </member>
        <member name="F:Native.Constants.GWLP_USERDATA">
            <summary>
            user data associated with the window.
            This data is intended for use by the application that created the window.
            Its value is initially zero.
            </summary>
        </member>
        <member name="F:Native.Constants.GWLP_WNDPROC">
            <summary>Address for the window procedure.</summary>
        </member>
        <member name="T:Native.Kernel32">
            <summary>Функции библиотеки kernel32.dll.</summary>
        </member>
        <member name="F:Native.Kernel32.LibName">
            <summary>Имя библиотеки.</summary>
        </member>
        <member name="F:Native.Kernel32.CopyMemoryEntryPoint">
            <summary>Точка входа функции CopyMemory.</summary>
        </member>
        <member name="M:Native.Kernel32.CopyMemory(System.IntPtr,System.IntPtr,System.UIntPtr)">
            <summary>Copies a block of memory from one location to another.</summary>
            <param name="destination">A pointer to the starting address of the copied block's destination.</param>
            <param name="source">A pointer to the starting address of the block of memory to copy.</param>
            <param name="length">The size of the block of memory to copy, in bytes.</param>
        </member>
        <member name="M:Native.Kernel32.CopyMemory(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>Copies a block of memory from one location to another.</summary>
            <param name="destination">A pointer to the starting address of the copied block's destination.</param>
            <param name="source">A pointer to the starting address of the block of memory to copy.</param>
            <param name="length">The size of the block of memory to copy, in bytes.</param>
        </member>
        <member name="F:Native.Kernel32.MoveMemoryEntryPoint">
            <summary>Точка входа функции CopyMemory.</summary>
        </member>
        <member name="M:Native.Kernel32.MoveMemory(System.IntPtr,System.IntPtr,System.UIntPtr)">
            <summary>Moves a block of memory from one location to another.</summary>
            <param name="destination">A pointer to the starting address of the move destination.</param>
            <param name="source">A pointer to the starting address of the block of memory to be moved.</param>
            <param name="length">The size of the block of memory to move, in bytes.</param>
        </member>
        <member name="M:Native.Kernel32.MoveMemory(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>Moves a block of memory from one location to another.</summary>
            <param name="destination">A pointer to the starting address of the move destination.</param>
            <param name="source">A pointer to the starting address of the block of memory to be moved.</param>
            <param name="length">The size of the block of memory to move, in bytes.</param>
        </member>
        <member name="F:Native.Kernel32.CloseHandleEntryPoint">
            <summary>Точка входа функции CloseHandle.</summary>
        </member>
        <member name="M:Native.Kernel32.CloseHandle(System.IntPtr)">
            <summary>Closes an open object handle.</summary>
            <param name="hObject">A valid handle to an open object.</param>
            <returns>
            If the function succeeds, the return value is <c>true</c>.
            If the function fails, the return value is <c>false</c>.
            </returns>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/ms724211.aspx</seealso>
        </member>
        <member name="F:Native.Kernel32.MulDivEntryPoint">
            <summary>Точка входа функции MulDiv.</summary>
        </member>
        <member name="M:Native.Kernel32.MulDiv(System.Int32,System.Int32,System.Int32)">
            <summary>
            Multiplies two 32-bit values and then divides the 64-bit result by a third 32-bit value.
            The final result is rounded to the nearest integer.
            </summary>
            <param name="nNumber">The multiplicand.</param>
            <param name="nNumerator">The multiplier.</param>
            <param name="nDenominator">The number by which the result of the multiplication operation is to be divided.</param>
            <returns>
            If the function succeeds, the return value is the result of the multiplication and division, rounded to the nearest integer.
            If the result is a positive half integer (ends in .5), it is rounded up. If the result is a negative half integer, it is rounded down.
            If either an overflow occurred or nDenominator was 0, the return value is -1.
            </returns>
        </member>
        <member name="F:Native.Kernel32.CreateFileEntryPoint">
            <summary>Точка входа функции CreateFile.</summary>
        </member>
        <member name="M:Native.Kernel32.CreateFile(System.String,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            Creates or opens a file or I/O device.
            The most commonly used I/O devices are as follows:
            	file, file stream, directory, physical disk, volume, console buffer, tape drive, communications resource, mailslot, and pipe.
            The function returns a handle that can be used to access the file or device for various types of I/O depending
            on the file or device and the flags and attributes specified.
            </summary>
            <param name="lpFileName">
            The name of the file or device to be created or opened.
            You may use either forward slashes (/) or backslashes (\) in this name.</param>
            <param name="dwDesiredAccess">
            The requested access to the file or device, which can be summarized as read, write, both or neither zero).
            </param>
            <param name="dwShareMode">
            The requested sharing mode of the file or device, which can be read, write, both, delete, all of these, or none (refer to the following table).
            Access requests to attributes or extended attributes are not affected by this flag.
            </param>
            <param name="lpSecurityAttributes">
            A pointer to a SECURITY_ATTRIBUTES structure that contains two separate but related data members:
            an optional security descriptor, and a Boolean value that determines whether the returned handle can be inherited by child processes.
            </param>
            <param name="dwCreationDisposition">
            An action to take on a file or device that exists or does not exist.
            </param>
            <param name="dwFlagsAndAttributes">
            The file or device attributes and flags, <see cref="F:Native.Constants.FILE_ATTRIBUTE_NORMAL"/> being the most common default value for files.
            </param>
            <param name="hTemplateFile">
            A valid handle to a template file with the GENERIC_READ access right.
            The template file supplies file attributes and extended attributes for the file that is being created.
            </param>
            <returns>
            If the function succeeds, the return value is an open handle to the specified file, device, named pipe, or mail slot.
            If the function fails, the return value is <see cref="F:Native.Constants.INVALID_HANDLE_VALUE"/>.
            </returns>
        </member>
        <member name="F:Native.Kernel32.DeviceIOControlEntryPoint">
            <summary>Точка входа функции DeviceIoControl.</summary>
        </member>
        <member name="M:Native.Kernel32.DeviceIoControl(System.IntPtr,System.UInt32,System.IntPtr,System.UInt32,System.IntPtr,System.UInt32,System.UInt32@,System.IntPtr)">
            <summary>
            Sends a control code directly to a specified device driver, causing the corresponding device to perform the corresponding operation.
            </summary>
            <param name="hDevice">
            A handle to the device on which the operation is to be performed.
            The device is typically a volume, directory, file, or stream.
            To retrieve a device handle, use the <see cref="M:Native.Kernel32.CreateFile(System.String,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)"/> function.</param>
            <param name="dwIoControlCode">
            The control code for the operation. This value identifies the specific operation to be performed and the type of device on which to perform it.
            </param>
            <param name="lpInBuffer">
            A pointer to the input buffer that contains the data required to perform the operation.
            The format of this data depends on the value of the <paramref name="dwIoControlCode"/> parameter.
            This parameter can be NULL if <paramref name="dwIoControlCode"/> specifies an operation that does not require input data.
            </param>
            <param name="nInBufferSize">The size of the input buffer, in bytes.</param>
            <param name="lpOutBuffer">
            A pointer to the output buffer that is to receive the data returned by the operation.
            The format of this data depends on the value of the <paramref name="dwIoControlCode"/> parameter.
            This parameter can be NULL if <paramref name="dwIoControlCode"/> specifies an operation that does not return data.
            </param>
            <param name="nOutBufferSize">The size of the output buffer, in bytes.</param>
            <param name="lpBytesReturned">A pointer to a variable that receives the size of the data stored in the output buffer, in bytes.</param>
            <param name="lpOverlapped">
            A pointer to an OVERLAPPED structure.
            If hDevice was opened without specifying <see cref="F:Native.Constants.FILE_FLAG_OVERLAPPED"/>, <paramref name="lpOverlapped"/> is ignored.
            </param>
            <returns>
            If the operation completes successfully, the return value is nonzero.
            If the operation fails or is pending, the return value is zero.
            </returns>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/aa363216.aspx</seealso>
        </member>
        <member name="F:Native.Kernel32.WaitForMultipleObjectsEntryPoint">
            <summary>Точка входа функции WaitForMultipleObjects.</summary>
        </member>
        <member name="M:Native.Kernel32.WaitForMultipleObjects(System.Int32,System.IntPtr[],System.Boolean,System.UInt32)">
            <summary>
            Waits until one or all of the specified objects are in the signaled state or the time-out interval elapses.
            To enter an alertable wait state, use the <see cref="M:Native.Kernel32.WaitForMultipleObjectsEx(System.Int32,System.IntPtr[],System.Boolean,System.UInt32,System.Boolean)"/> function.
            </summary>
            <param name="nCount">
            The number of object handles in the array pointed to by lpHandles.
            The maximum number of object handles is <see cref="F:Native.Constants.MAXIMUM_WAIT_OBJECTS"/>.
            This parameter cannot be zero.
            </param>
            <param name="lpHandles">
            An array of object handles. The array can contain handles to objects of different types.
            It may not contain multiple copies of the same handle.
            </param>
            <param name="bWaitAll">
            If this parameter is <c>true</c>, the function returns when the state of all objects in the lpHandles array is signaled.
            If <c>false</c>, the function returns when the state of any one of the objects is set to signaled.
            In the latter case, the return value indicates the object whose state caused the function to return.
            </param>
            <param name="dwMilliseconds">
            The time-out interval, in milliseconds.
            If a nonzero value is specified, the function waits until the specified objects are signaled or the interval elapses.
            If dwMilliseconds is zero, the function does not enter a wait state if the specified objects are not signaled; it always returns immediately.
            If dwMilliseconds is <see cref="F:Native.Constants.INFINITE"/>, the function will return only when the specified objects are signaled.
            </param>
            <returns>
            If the function succeeds, the return value indicates the event that caused the function to return.
            </returns>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/ms687025.aspx</seealso>
        </member>
        <member name="F:Native.Kernel32.WaitForMultipleObjectsExEntryPoint">
            <summary>Точка входа функции WaitForMultipleObjectsEx.</summary>
        </member>
        <member name="M:Native.Kernel32.WaitForMultipleObjectsEx(System.Int32,System.IntPtr[],System.Boolean,System.UInt32,System.Boolean)">
            <summary>
            Waits until one or all of the specified objects are in the signaled state, an I/O completion routine
            or asynchronous procedure call (APC) is queued to the thread, or the time-out interval elapses.
            </summary>
            <param name="nCount">
            The number of object handles in the array pointed to by lpHandles.
            The maximum number of object handles is <see cref="F:Native.Constants.MAXIMUM_WAIT_OBJECTS"/>.
            This parameter cannot be zero.
            </param>
            <param name="lpHandles">
            An array of object handles. The array can contain handles to objects of different types.
            It may not contain multiple copies of the same handle.
            </param>
            <param name="bWaitAll">
            If this parameter is <c>true</c>, the function returns when the state of all objects in the lpHandles array is signaled.
            If <c>false</c>, the function returns when the state of any one of the objects is set to signaled.
            In the latter case, the return value indicates the object whose state caused the function to return.
            </param>
            <param name="dwMilliseconds">
            The time-out interval, in milliseconds.
            If a nonzero value is specified, the function waits until the specified objects are signaled or the interval elapses.
            If dwMilliseconds is zero, the function does not enter a wait state if the specified objects are not signaled; it always returns immediately.
            If dwMilliseconds is <see cref="F:Native.Constants.INFINITE"/>, the function will return only when the specified objects are signaled.
            </param>
            <param name="bAlertable">
            If this parameter is TRUE and the thread is in the waiting state, the function returns when the
            system queues an I/O completion routine or APC, and the thread runs the routine or function.
            Otherwise, the function does not return and the completion routine or APC function is not executed.
            </param>
            <returns>
            If the function succeeds, the return value indicates the event that caused the function to return.
            </returns>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/ms687028.aspx</seealso>
        </member>
        <member name="M:Native.Kernel32.GetShortPathName(System.String,System.Char[],System.Int32)">
            <summary>Retrieves the short path form of the specified path.</summary>
            <param name="lpszLongPath">
            The path string.
            In the ANSI version of this function, the name is limited to MAX_PATH characters.
            To extend this limit to 32,767 wide characters, call the Unicode version of the function and prepend "\\?\" to the path.
            </param>
            <param name="lpszShortPath">
            A pointer to a buffer to receive the null-terminated short form of the path that <paramref name="lpszLongPath"/> specifies.
            Passing NULL for this parameter and zero for cchBuffer will always return the required buffer size for a specified <paramref name="lpszLongPath"/>.
            </param>
            <param name="cchBuffer">
            The size of the buffer that <paramref name="lpszShortPath"/> points to, in chars.
            Set this parameter to zero if <paramref name="lpszShortPath"/> is set to <c>null</c>.
            </param>
            <returns>
            If the function succeeds, the return value is the length, in TCHARs, of the string that is copied to <paramref name="lpszShortPath"/>, not including the terminating null character.
            If the lpszShortPath buffer is too small to contain the path, the return value is the size of the buffer, in TCHARs, that is required to hold the path and the terminating null character.
            If the function fails for any other reason, the return value is zero. To get extended error information, call GetLastError().
            </returns>
        </member>
        <member name="T:Native.Gdi32">
            <summary>Функции библиотеки gdi32.dll.</summary>
        </member>
        <member name="F:Native.Gdi32.LibName">
            <summary>Имя библиотеки.</summary>
        </member>
        <member name="F:Native.Gdi32.SetStretchBltModeEntryPoint">
            <summary>Точка входа функции SetStretchBltMode.</summary>
        </member>
        <member name="M:Native.Gdi32.SetStretchBltMode(System.IntPtr,Native.StretchBltMode)">
            <summary>This function sets the bitmap stretching mode in the specified device context. </summary>
            <param name="hdc">Handle to the device context.</param>
            <param name="iStretchMode">Specifies the stretching mode.</param>
            <returns>
            If the function succeeds, the return value is the previous stretching mode.
            If the function fails, the return value is
            <see cref="M:StretchBltMode.INVALID"/> or
            <see cref="M:StretchBltMode.INVALID_PARAMETER"/>.
            </returns>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/dd145089.aspx</seealso>
        </member>
        <member name="F:Native.Gdi32.StretchBltEntryPoint">
            <summary>Точка входа функции StretchBlt.</summary>
        </member>
        <member name="M:Native.Gdi32.StretchBlt(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,Native.RasterOperation)">
            <summary>
            The StretchBlt function copies a bitmap from a source rectangle into a destination rectangle,
            stretching or compressing the bitmap to fit the dimensions of the destination rectangle, if necessary.
            The system stretches or compresses the bitmap according to the stretching mode currently set in the
            destination device context.
            </summary>
            <param name="hDCDest">A handle to the destination device context.</param>
            <param name="xOriginDest">The x-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="yOriginDest">The y-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="widthDest">The width, in logical units, of the destination rectangle.</param>
            <param name="heightDest">The height, in logical units, of the destination rectangle.</param>
            <param name="hDCSrc">A handle to the source device context.</param>
            <param name="xOriginScr">The x-coordinate, in logical units, of the upper-left corner of the source rectangle.</param>
            <param name="yOriginSrc">The y-coordinate, in logical units, of the upper-left corner of the source rectangle.</param>
            <param name="widthScr">The width, in logical units, of the source rectangle.</param>
            <param name="heightScr">The height, in logical units, of the source rectangle.</param>
            <param name="rop">
            The raster operation to be performed. Raster operation codes define how the system combines
            colors in output operations that involve a brush, a source bitmap, and a destination bitmap.
            </param>
            <returns>
            If the function succeeds, the return value is <c>true</c>.
            If the function fails, the return value is <c>false</c>.
            </returns>
        </member>
        <member name="F:Native.Gdi32.BitBltEntryPoint">
            <summary>Точка входа функции StretchBlt.</summary>
        </member>
        <member name="M:Native.Gdi32.BitBlt(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,Native.RasterOperation)">
            <summary>
            The BitBlt function performs a bit-block transfer of the color data corresponding to a rectangle of pixels 
            from the specified source device context into a destination device context.
            </summary>
            <param name="hDCDest">A handle to the destination device context.</param>
            <param name="xOriginDest">The x-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="yOriginDest">The y-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="widthDest">The width, in logical units, of the source and destination rectangles.</param>
            <param name="heightDest">The height, in logical units, of the source and the destination rectangles.</param>
            <param name="hDCSrc">A handle to the source device context.</param>
            <param name="xOriginScr">The x-coordinate, in logical units, of the upper-left corner of the source rectangle.</param>
            <param name="yOriginSrc">The y-coordinate, in logical units, of the upper-left corner of the source rectangle.</param>
            <param name="rop">
            A raster-operation code. These codes define how the color data for the source rectangle is to be combined with the
            color data for the destination rectangle to achieve the final color.
            </param>
            <returns>
            If the function succeeds, the return value is <c>true</c>.
            If the function fails, the return value is <c>false</c>.
            </returns>
        </member>
        <member name="F:Native.Gdi32.StretchDIBitsEntryPoint">
            <summary>Точка входа функции StretchDIBits.</summary>
        </member>
        <member name="M:Native.Gdi32.StretchDIBits(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,Native.DibUsage,Native.RasterOperation)">
            <summary>
            The StretchDIBits function copies the color data for a rectangle of pixels in a DIB, JPEG, or PNG image
            to the specified destination rectangle. If the destination rectangle is larger than the source rectangle,
            this function stretches the rows and columns of color data to fit the destination rectangle.
            If the destination rectangle is smaller than the source rectangle, this function compresses the rows and columns
            by using the specified raster operation.
            </summary>
            <param name="hDC">A handle to the destination device context.</param>
            <param name="xDest">The x-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="yDest">The y-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="widthDest">The width, in logical units, of the destination rectangle.</param>
            <param name="heightDest">The height, in logical units, of the destination rectangle.</param>
            <param name="xSrc">The x-coordinate, in pixels, of the source rectangle in the image.</param>
            <param name="ySrc">The y-coordinate, in pixels, of the source rectangle in the image.</param>
            <param name="srcWidth">The width, in pixels, of the source rectangle in the image.</param>
            <param name="srcHeight">The height, in pixels, of the source rectangle in the image.</param>
            <param name="lpBits">A pointer to the image bits, which are stored as an array of bytes.</param>
            <param name="lpBitsInfo">A pointer to a BITMAPINFO structure that contains information about the DIB.</param>
            <param name="iUsage"></param>
            <param name="dwRop">
            A raster-operation code that specifies how the source pixels, the destination device context's 
            current brush, and the destination pixels are to be combined to form the new image.
            </param>
            <returns>
            If the function succeeds, the return value is the number of scan lines copied. Note that this value can be negative for mirrored content.
            If the function fails, or no scan lines are copied, the return value is 0.
            </returns>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/dd145121.aspx</seealso>
        </member>
        <member name="M:Native.Gdi32.StretchDIBits(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,Native.BITMAPINFOHEADER@,Native.DibUsage,Native.RasterOperation)">
            <summary>
            The StretchDIBits function copies the color data for a rectangle of pixels in a DIB, JPEG, or PNG image
            to the specified destination rectangle. If the destination rectangle is larger than the source rectangle,
            this function stretches the rows and columns of color data to fit the destination rectangle.
            If the destination rectangle is smaller than the source rectangle, this function compresses the rows and columns
            by using the specified raster operation.
            </summary>
            <param name="hDC">A handle to the destination device context.</param>
            <param name="xDest">The x-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="yDest">The y-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="widthDest">The width, in logical units, of the destination rectangle.</param>
            <param name="heightDest">The height, in logical units, of the destination rectangle.</param>
            <param name="xSrc">The x-coordinate, in pixels, of the source rectangle in the image.</param>
            <param name="ySrc">The y-coordinate, in pixels, of the source rectangle in the image.</param>
            <param name="srcWidth">The width, in pixels, of the source rectangle in the image.</param>
            <param name="srcHeight">The height, in pixels, of the source rectangle in the image.</param>
            <param name="lpBits">A pointer to the image bits, which are stored as an array of bytes.</param>
            <param name="lpBitsInfo">A pointer to a <see cref="T:Native.BITMAPINFOHEADER"/> structure that contains information about the DIB.</param>
            <param name="iUsage"></param>
            <param name="dwRop">
            A raster-operation code that specifies how the source pixels, the destination device context's 
            current brush, and the destination pixels are to be combined to form the new image.
            </param>
            <returns>
            If the function succeeds, the return value is the number of scan lines copied. Note that this value can be negative for mirrored content.
            If the function fails, or no scan lines are copied, the return value is 0.
            </returns>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/dd145121.aspx</seealso>
        </member>
        <member name="F:Native.Gdi32.SelectObjectEntryPoint">
            <summary>Точка входа функции SelectObject.</summary>
        </member>
        <member name="M:Native.Gdi32.SelectObject(System.IntPtr,System.IntPtr)">
            <summary>
            The SelectObject function selects an object into the specified device context (DC).
            The new object replaces the previous object of the same type.
            </summary>
            <param name="hDC">A handle to the DC.</param>
            <param name="hObject">A handle to the object to be selected.</param>
            <returns>
            If the selected object is not a region and the function succeeds, the return value is a handle to the object being replaced.
            If the selected object is a region and the function succeeds, the return value is one of the following values:
              SIMPLEREGION, COMPLEXREGION, NULLREGION.
            If an error occurs and the selected object is not a region, the return value is NULL. Otherwise, it is HGDI_ERROR.
            </returns>
            <remarks>
            This function returns the previously selected object of the specified type.
            An application should always replace a new object with the original, default object after it has finished drawing with the new object.
            An application cannot select a single bitmap into more than one DC at a time.
            </remarks>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/dd162957.aspx</seealso>
        </member>
        <member name="F:Native.Gdi32.DeleteObjectEntryPoint">
            <summary>Точка входа функции DeleteObject.</summary>
        </member>
        <member name="M:Native.Gdi32.DeleteObject(System.IntPtr)">
            <summary>
            The DeleteObject function deletes a logical pen, brush, font, bitmap, region, or palette, freeing all
            system resources associated with the object.
            After the object is deleted, the specified handle is no longer valid.
            </summary>
            <param name="hObject">A handle to a logical pen, brush, font, bitmap, region, or palette.</param>
            <returns>
            If the function succeeds, the return value is <c>true</c>.
            If the specified handle is not valid or is currently selected into a DC, the return value is <c>false</c>.
            </returns>
            <remarks>
            Do not delete a drawing object (pen or brush) while it is still selected into a DC.
            When a pattern brush is deleted, the bitmap associated with the brush is not deleted. The bitmap must be deleted independently.
            </remarks>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/dd183539.aspx</seealso>
        </member>
        <member name="F:Native.Gdi32.CreateCompatibleDCEntryPoint">
            <summary>Точка входа функции CreateCompatibleDC.</summary>
        </member>
        <member name="M:Native.Gdi32.CreateCompatibleDC(System.IntPtr)">
            <summary>
            The CreateCompatibleDC function creates a memory device context (DC) compatible with the specified device.
            </summary>
            <param name="hDC">
            A handle to an existing DC. If this handle is NULL, the function creates a
            memory DC compatible with the application's current screen.
            </param>
            <returns>
            If the function succeeds, the return value is the handle to a memory DC.
            If the function fails, the return value is NULL.
            </returns>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/dd183489.aspx</seealso>
        </member>
        <member name="F:Native.Gdi32.DeleteDCEntryPoint">
            <summary>Точка входа функции DeleteDC.</summary>
        </member>
        <member name="M:Native.Gdi32.DeleteDC(System.IntPtr)">
            <summary>The DeleteDC function deletes the specified device context (DC).</summary>
            <param name="hDC">A handle to the device context.</param>
            <returns>
            If the function succeeds, the return value is <c>true</c>.
            If the function fails, the return value is <c>false</c>.
            </returns>
            <remarks>
            An application must not delete a DC whose handle was obtained by calling the GetDC function.
            Instead, it must call the ReleaseDC function to free the DC.
            </remarks>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/dd183533.aspx</seealso>
        </member>
        <member name="F:Native.Gdi32.GetDeviceCapsEntryPoint">
            <summary>Точка входа функции GetDeviceCaps.</summary>
        </member>
        <member name="M:Native.Gdi32.GetDeviceCaps(System.IntPtr,Native.DeviceCaps)">
            <summary>The GetDeviceCaps function retrieves device-specific information for the specified device.</summary>
            <param name="hdc">A handle to the DC.</param>
            <param name="nIndex">The item to be returned.</param>
            <returns>
            The return value specifies the value of the desired item.
            When nIndex is <see cref="M:DeviceCaps.BITSPIXEL"/> and the device has 15bpp or 16bpp, the return value is 16.
            </returns>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/dd144877.aspx</seealso>
        </member>
        <member name="F:Native.Gdi32.CreateCompatibleBitmapEntryPoint">
            <summary>Точка входа функции CreateCompatibleBitmap.</summary>
        </member>
        <member name="M:Native.Gdi32.CreateCompatibleBitmap(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            The CreateCompatibleBitmap function creates a bitmap compatible with the device that is associated with the specified device context.
            </summary>
            <param name="hDC">A handle to a device context.</param>
            <param name="width">The bitmap width, in pixels.</param>
            <param name="weigth">The bitmap height, in pixels.</param>
            <returns>
            If the function succeeds, the return value is a handle to the compatible bitmap (DDB).
            If the function fails, the return value is <c>IntPtr.Zero</c>.
            </returns>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/dd183488.aspx</seealso>
        </member>
        <member name="M:Native.Gdi32.GetStockObject(Native.StockObject)">
            <summary>Retrieves a handle to one of the stock pens, brushes, fonts, or palettes.</summary>
            <param name="fnObject">The type of stock object.</param>
            <returns>
            If the function succeeds, the return value is a handle to the requested logical object.
            If the function fails, the return value is <c>IntPtr.Zero</c>.
            </returns>
            <seealso>https://msdn.microsoft.com/en-us/library/windows/desktop/dd144925%28v=vs.85%29.aspx</seealso>
        </member>
        <member name="T:Native.User32">
            <summary>Функции библиотеки user32.dll.</summary>
        </member>
        <member name="F:Native.User32.LibName">
            <summary>Имя библиотеки.</summary>
        </member>
        <member name="F:Native.User32.AttachThreadInputEntryPoint">
            <summary>Точка входа функции AttachThreadInput.</summary>
        </member>
        <member name="M:Native.User32.AttachThreadInput(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Attaches or detaches the input processing mechanism of one thread to that of another thread.
            </summary>
            <param name="idAttach">
            The identifier of the thread to be attached to another thread. The thread to be attached cannot be a system thread.
            </param>
            <param name="idAttachTo">
            The identifier of the thread to which idAttach will be attached. This thread cannot be a system thread.
            A thread cannot attach to itself. Therefore, idAttachTo cannot equal idAttach.
            </param>
            <param name="fAttach">
            If this parameter is <c>true</c>, the two threads are attached. If the parameter is <c>false</c>, the threads are detached.
            </param>
            <returns>
            If the function succeeds, the return value is <c>true</c>.
            If the function fails, the return value is <c>false</c>.
            To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="F:Native.User32.AllowSetForegroundWindowEntryPoint">
            <summary>Точка входа функции AllowSetForegroundWindow.</summary>
        </member>
        <member name="M:Native.User32.AllowSetForegroundWindow(System.Int32)">
            <summary>
            Enables the specified process to set the foreground window using the SetForegroundWindow function.
            The calling process must already be able to set the foreground window.
            For more information, see Remarks later in this topic.
            </summary>
            <param name="dwProcessId">
            The identifier of the process that will be enabled to set the foreground window.
            If this parameter is ASFW_ANY, all processes will be enabled to set the foreground window.
            </param>
            <returns>
            If the function succeeds, the return value is <c>true</c>.
            If the function fails, the return value is <c>false</c>.
            The function will fail if the calling process cannot set the foreground window.
            To get extended error information, call GetLastError. 
            </returns>
        </member>
        <member name="F:Native.User32.LockSetForegroundWindowEntryPoint">
            <summary>Точка входа функции LockSetForegroundWindow.</summary>
        </member>
        <member name="M:Native.User32.LockSetForegroundWindow(Native.LSFW)">
            <summary>
            The foreground process can call the LockSetForegroundWindow function to disable calls
            to the <see cref="M:SetForegroundWindow"/> function.
            </summary>
            <param name="uLockCode">
            Specifies whether to enable or disable calls to <see cref="M:SetForegroundWindow"/>.
            </param>
            <returns>
            If the function succeeds, the return value is <c>true</c>.
            If the function fails, the return value is <c>false</c>.
            To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="F:Native.User32.GetDCEntryPoint">
            <summary>Точка входа функции GetDC.</summary>
        </member>
        <member name="M:Native.User32.GetDC(System.IntPtr)">
            <summary>
            The GetDC function retrieves a handle to a device context (DC) for the client area of a specified
            window or for the entire screen. You can use the returned handle in subsequent GDI functions to draw
            in the DC. The device context is an opaque data structure, whose values are used internally by GDI.
            </summary>
            <param name="hWnd">
            A handle to the window whose DC is to be retrieved.
            If this value is NULL, GetDC retrieves the DC for the entire screen.
            </param>
            <returns>
            If the function succeeds, the return value is a handle to the DC for the specified window's client area.
            If the function fails, the return value is NULL.
            </returns>
        </member>
        <member name="F:Native.User32.ReleaseDCEntryPoint">
            <summary>Точка входа функции ReleaseDC.</summary>
        </member>
        <member name="M:Native.User32.ReleaseDC(System.IntPtr,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="hWnd">A handle to the window whose DC is to be released.</param>
            <param name="hDC">A handle to the DC to be released.</param>
            <returns>
            The return value indicates whether the DC was released.
            If the DC was released, the return value is 1.
            If the DC was not released, the return value is zero.
            </returns>
        </member>
        <member name="F:Native.User32.ShowWindowEntryPoint">
            <summary>Точка входа функции ShowWindow.</summary>
        </member>
        <member name="M:Native.User32.ShowWindow(System.IntPtr,Native.SW)">
            <summary>Sets the specified window's show state.</summary>
            <param name="handle">A handle to the window. </param>
            <param name="flags">
            Controls how the window is to be shown.
            This parameter is ignored the first time an application calls <see cref="M:Native.User32.ShowWindow(System.IntPtr,Native.SW)"/>,
            if the program that launched the application provides a STARTUPINFO structure.
            Otherwise, the first time <see cref="M:Native.User32.ShowWindow(System.IntPtr,Native.SW)"/> is called, the value should be the value obtained by the WinMain function in its nCmdShow parameter.
            </param>
            <returns></returns>
        </member>
        <member name="F:Native.User32.GetSystemMetricsEntryPoint">
            <summary>Точка входа функции GetSystemMetrics.</summary>
        </member>
        <member name="M:Native.User32.GetSystemMetrics(Native.SM)">
            <summary>Retrieves the specified system metric or system configuration setting.</summary>
            <param name="nIndex">The system metric or configuration setting to be retrieved.</param>
            <returns>
            If the function succeeds, the return value is the requested system metric or configuration setting.
            If the function fails, the return value is 0.
            GetLastError does not provide extended error information. 
            </returns>
            <remarks>Note that all dimensions retrieved by <see cref="M:Native.User32.GetSystemMetrics(Native.SM)"/> are in pixels.</remarks>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/ms724385.aspx</seealso>
        </member>
        <member name="F:Native.User32.ScrollDCEntryPoint">
            <summary>Точка входа функции ScrollDC.</summary>
        </member>
        <member name="M:Native.User32.ScrollDC(System.IntPtr,System.Int32,System.Int32,Native.RECT@,Native.RECT@,System.IntPtr,Native.RECT@)">
            <summary>The ScrollDC function scrolls a rectangle of bits horizontally and vertically.</summary>
            <param name="hDC">Handle to the device context that contains the bits to be scrolled. </param>
            <param name="dx">
            Specifies the amount, in device units, of horizontal scrolling.
            This parameter must be a negative value to scroll to the left.
            </param>
            <param name="dy">
            Specifies the amount, in device units, of vertical scrolling.
            This parameter must be a negative value to scroll up.
            </param>
            <param name="lprcScroll">
            Pointer to a RECT structure containing the coordinates of the bits to be scrolled.
            The only bits affected by the scroll operation are bits in the intersection of this rectangle and the
            rectangle specified by lprcClip.
            If lprcScroll is NULL, the entire client area is used.
            </param>
            <param name="lprcClip">
            Pointer to a RECT structure containing the coordinates of the clipping rectangle.
            The only bits that will be painted are the bits that remain inside this rectangle after the
            scroll operation has been completed.
            If lprcClip is NULL, the entire client area is used.
            </param>
            <param name="hrgnUpdate">
            Handle to the region uncovered by the scrolling process.
            ScrollDC defines this region; it is not necessarily a rectangle.
            </param>
            <param name="lprcUpdate">
            Pointer to a RECT structure that receives the coordinates of the rectangle bounding the scrolling update region.
            This is the largest rectangular area that requires repainting. When the function returns,
            the values in the structure are in client coordinates, regardless of the mapping mode for
            the specified device context.
            This allows applications to use the update region in a call to the InvalidateRgn function, if required.
            </param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is <c>false</c>.
            </returns>
        </member>
        <member name="F:Native.User32.ScrollWindowExEntryPoint">
            <summary>Точка входа функции ScrollWindowEx.</summary>
        </member>
        <member name="M:Native.User32.ScrollWindowEx(System.IntPtr,System.Int32,System.Int32,Native.RECT@,Native.RECT@,System.IntPtr,System.IntPtr,Native.ScrollWindowFlags)">
            <summary>
            The ScrollWindowEx function scrolls the contents of the specified window's client area.
            </summary>
            <param name="hWnd">Handle to the window where the client area is to be scrolled. </param>
            <param name="nXAmount">
            Specifies the amount, in device units, of horizontal scrolling.
            This parameter must be a negative value to scroll to the left.
            </param>
            <param name="nYAmount">
            Specifies the amount, in device units, of vertical scrolling.
            This parameter must be a negative value to scroll up. 
            </param>
            <param name="rectScrollRegion">
            Pointer to a <see cref="T:Native.RECT"/> structure that specifies the portion of the client area to be scrolled.
            If this parameter is NULL, the entire client area is scrolled.
            </param>
            <param name="rectClip">
            Pointer to a RECT structure that contains the coordinates of the clipping rectangle.
            Only device bits within the clipping rectangle are affected.
            Bits scrolled from the outside of the rectangle to the inside are painted; bits scrolled from the inside
            of the rectangle to the outside are not painted.
            This parameter may be NULL.
            </param>
            <param name="hrgnUpdate">
            Handle to the region that is modified to hold the region invalidated by scrolling.
            This parameter may be NULL.
            </param>
            <param name="prcUpdate">
            Pointer to a RECT structure that receives the boundaries of the rectangle invalidated by scrolling.
            This parameter may be NULL.
            </param>
            <param name="flags">Specifies flags that control scrolling.</param>
            <returns>
            If the function succeeds, the return value is
            	SIMPLEREGION (rectangular invalidated region),
            	COMPLEXREGION (nonrectangular invalidated region; overlapping rectangles),
             or NULLREGION (no invalidated region).
            If the function fails, the return value is ERROR.
            </returns>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/bb787593.aspx</seealso>
        </member>
        <member name="M:Native.User32.ScrollWindowEx(System.IntPtr,System.Int32,System.Int32,Native.RECT@,Native.RECT@,System.IntPtr,Native.RECT@,Native.ScrollWindowFlags)">
            <summary>
            The ScrollWindowEx function scrolls the contents of the specified window's client area.
            </summary>
            <param name="hWnd">Handle to the window where the client area is to be scrolled. </param>
            <param name="nXAmount">
            Specifies the amount, in device units, of horizontal scrolling.
            This parameter must be a negative value to scroll to the left.
            </param>
            <param name="nYAmount">
            Specifies the amount, in device units, of vertical scrolling.
            This parameter must be a negative value to scroll up. 
            </param>
            <param name="rectScrollRegion">
            Pointer to a <see cref="T:Native.RECT"/> structure that specifies the portion of the client area to be scrolled.
            If this parameter is NULL, the entire client area is scrolled.
            </param>
            <param name="rectClip">
            Pointer to a RECT structure that contains the coordinates of the clipping rectangle.
            Only device bits within the clipping rectangle are affected.
            Bits scrolled from the outside of the rectangle to the inside are painted; bits scrolled from the inside
            of the rectangle to the outside are not painted.
            This parameter may be NULL.
            </param>
            <param name="hrgnUpdate">
            Handle to the region that is modified to hold the region invalidated by scrolling.
            This parameter may be NULL.
            </param>
            <param name="prcUpdate">
            Pointer to a RECT structure that receives the boundaries of the rectangle invalidated by scrolling.
            </param>
            <param name="flags">Specifies flags that control scrolling.</param>
            <returns>
            If the function succeeds, the return value is
            	SIMPLEREGION (rectangular invalidated region),
            	COMPLEXREGION (nonrectangular invalidated region; overlapping rectangles),
             or NULLREGION (no invalidated region).
            If the function fails, the return value is ERROR. To get extended error information, call GetLastError.
            </returns>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/bb787593.aspx</seealso>
        </member>
        <member name="F:Native.User32.WindowFromPointEntryPoint">
            <summary>Точка входа функции WindowFromPoint.</summary>
        </member>
        <member name="M:Native.User32.WindowFromPoint(Native.POINT)">
            <summary>Retrieves a handle to the window that contains the specified point.</summary>
            <param name="point">The point to be checked.</param>
            <returns>
            The return value is a handle to the window that contains the point.
            If no window exists at the given point, the return value is NULL.
            If the point is over a static text control, the return value is a handle to the window under the static text control.
            </returns>
        </member>
        <member name="F:Native.User32.ChildWindowFromPointEntryPoint">
            <summary>Точка входа функции ChildWindowFromPoint.</summary>
        </member>
        <member name="M:Native.User32.ChildWindowFromPoint(System.IntPtr,Native.POINT)">
            <summary>
            Determines which, if any, of the child windows belonging to a parent window contains the specified point.
            The search is restricted to immediate child windows.
            Grandchildren, and deeper descendant windows are not searched.
            To skip certain child windows, use the <see cref="M:Native.User32.ChildWindowFromPointEx(System.IntPtr,Native.POINT,Native.CWP)"/> function.
            </summary>
            <param name="hWndParent">A handle to the parent window.</param>
            <param name="point">A structure that defines the client coordinates, relative to <paramref name="hWndParent"/>, of the point to be checked.</param>
            <returns>
            The return value is a handle to the child window that contains the point, even if the child window is hidden or disabled.
            If the point lies outside the parent window, the return value is NULL.
            If the point is within the parent window but not within any child window, the return value is a handle to the parent window. 
            </returns>
        </member>
        <member name="F:Native.User32.ChildWindowFromPointExEntryPoint">
            <summary>Точка входа функции ChildWindowFromPointEx.</summary>
        </member>
        <member name="M:Native.User32.ChildWindowFromPointEx(System.IntPtr,Native.POINT,Native.CWP)">
            <summary>
            Determines which, if any, of the child windows belonging to the specified parent window contains the specified point.
            The function can ignore invisible, disabled, and transparent child windows.
            The search is restricted to immediate child windows.
            Grandchildren and deeper descendants are not searched. 
            </summary>
            <param name="hWndParent">A handle to the parent window.</param>
            <param name="point">A structure that defines the client coordinates (relative to <paramref name="hWndParent"/>) of the point to be checked. </param>
            <param name="uFlags">The child windows to be skipped (<see cref="T:Native.CWP"/>).</param>
            <returns>
            The return value is a handle to the first child window that contains the point and meets the criteria specified by <paramref name="uFlags"/>.
            If the point is within the parent window but not within any child window that meets the criteria, the return value is a handle to the parent window.
            If the point lies outside the parent window or if the function fails, the return value is NULL.
            </returns>
        </member>
        <member name="F:Native.User32.SendMessageEntryPoint">
            <summary>Точка входа функции SendMessage.</summary>
        </member>
        <member name="M:Native.User32.SendMessage(System.IntPtr,Native.WM,System.IntPtr,System.IntPtr)">
            <summary>
            Sends the specified message to a window or windows. The SendMessage function calls the window procedure for the specified
            window and does not return until the window procedure has processed the message.
            </summary>
            <param name="hWnd">
            A handle to the window whose window procedure will receive the message.
            If this parameter is HWND_BROADCAST ((IntPtr)0xffff), the message is sent to all top-level windows in the system,
            including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.
            </param>
            <param name="msg">The message to be sent.</param>
            <param name="wParam">Additional message-specific information.</param>
            <param name="lParam">Additional message-specific information.</param>
            <returns>The return value specifies the result of the message processing; it depends on the message sent.</returns>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/ms644950.aspx</seealso>
        </member>
        <member name="F:Native.User32.PostMessageEntryPoint">
            <summary>Точка входа функции PostMessage.</summary>
        </member>
        <member name="M:Native.User32.PostMessage(System.IntPtr,Native.WM,System.IntPtr,System.IntPtr)">
            <summary>
            Places (posts) a message in the message queue associated with the thread that created the
            specified window and returns without waiting for the thread to process the message.
            </summary>
            <param name="hWnd">
            A handle to the window whose window procedure is to receive the message. The following values have special meanings.
            	((IntPtr)0xffff): The message is posted to all top-level windows in the system, including disabled or invisible unowned windows,
            					  overlapped windows, and pop-up windows. The message is not posted to child windows.
            	IntPtr.Zero: The function behaves like a call to PostThreadMessage with the dwThreadId parameter set to the identifier of the current thread.
            </param>
            <param name="msg">The message to be sent.</param>
            <param name="wParam">Additional message-specific information.</param>
            <param name="lParam">Additional message-specific information.</param>
            <returns>
            If the function succeeds, the return value is <c>true</c>.
            If the function fails, the return value is <c>false</c>.
            To get extended error information, call GetLastError.
            GetLastError returns ERROR_NOT_ENOUGH_QUOTA when the limit is hit. 
            </returns>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/ms644950.aspx</seealso>
        </member>
        <member name="M:Native.User32.SetWindowLongPtr(System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            Changes an attribute of the specified window.
            The function also sets a value at the specified offset in the extra window memory.
            </summary>
            <param name="hWnd">
            A handle to the window and, indirectly, the class to which the window belongs.
            The <see cref="M:Native.User32.SetWindowLongPtr(System.IntPtr,System.Int32,System.IntPtr)"/> function fails if the process that owns the window specified by the hWnd
            parameter is at a higher process privilege in the UIPI hierarchy than the process the calling thread resides in.
            </param>
            <param name="nIndex">
            The zero-based offset to the value to be set.
            Valid values are in the range zero through the number of bytes of extra window memory, minus the size of an integer.
            To set any other value, specify one of the following values:
            <see cref="M:Constants.GWL_EXSTYLE"/>
            <see cref="M:Constants.GWLP_HINSTANCE"/>
            <see cref="M:Constants.GWLP_ID"/>
            <see cref="M:Constants.GWL_STYLE"/>
            <see cref="M:Constants.GWLP_USERDATA"/>
            <see cref="M:Constants.GWLP_WNDPROC"/>
            </param>
            <param name="dwNewLong">The replacement value.</param>
            <returns>
            If the function succeeds, the return value is the previous value of the specified offset.
            If the function fails, the return value is zero.
            </returns>
            <remarks>
            Certain window data is cached, so changes you make using <see cref="M:Native.User32.SetWindowLongPtr(System.IntPtr,System.Int32,System.IntPtr)"/> will not take effect
            until you call the <see cref="M:Native.User32.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,Native.SWP)"/> function.
            </remarks>
        </member>
        <member name="M:Native.User32.GetWindowLongPtr(System.IntPtr,System.Int32)">
            <summary>
            Retrieves information about the specified window.
            The function also retrieves the value at a specified offset into the extra window memory. 
            </summary>
            <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
            <param name="nIndex">
            The zero-based offset to the value to be retrieved.
            Valid values are in the range zero through the number of bytes of extra window memory, minus the size of an integer.
            To retrieve any other value, specify one of the following values:
            <see cref="M:Constants.GWL_EXSTYLE"/>
            <see cref="M:Constants.GWLP_HINSTANCE"/>
            <see cref="M:Constants.GWLP_ID"/>
            <see cref="M:Constants.GWL_STYLE"/>
            <see cref="M:Constants.GWLP_USERDATA"/>
            <see cref="M:Constants.GWLP_WNDPROC"/>
            </param>
            <returns>
            If the function succeeds, the return value is the requested value.
            If the function fails, the return value is zero.
            </returns>
        </member>
        <member name="M:Native.User32.GetWindowRect(System.IntPtr,Native.RECT@)">
            <summary>
            Retrieves the dimensions of the bounding rectangle of the specified window.
            The dimensions are given in screen coordinates that are relative to the upper-left corner of the screen.
            </summary>
            <param name="hWnd">A handle to the window.</param>
            <param name="lpRect">
            A pointer to a RECT structure that receives the screen coordinates of the upper-left and lower-right corners of the window.
            </param>
            <returns>
            If the function succeeds, the return value is <c>true</c>.
            If the function fails, the return value is <c>false</c>.
            To get extended error information, call GetLastError. 
            </returns>
        </member>
        <member name="M:Native.User32.GetClientRect(System.IntPtr,Native.RECT@)">
            <summary>
            Retrieves the coordinates of a window's client area.
            The client coordinates specify the upper-left and lower-right corners of the client area.
            Because client coordinates are relative to the upper-left corner of a window's client area,
            the coordinates of the upper-left corner are (0,0). 
            </summary>
            <param name="hWnd">A handle to the window.</param>
            <param name="lpRect">
            A pointer to a <see cref="T:Native.RECT"/> structure that receives the client coordinates.
            The left and top members are zero.
            The right and bottom members contain the width and height of the window.
            </param>
            <returns></returns>
        </member>
        <member name="M:Native.User32.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,Native.SWP)">
            <summary>
            Changes the size, position, and Z order of a child, pop-up, or top-level window.
            These windows are ordered according to their appearance on the screen.
            The topmost window receives the highest rank and is the first window in the Z order.
            </summary>
            <param name="hWnd">A handle to the window.</param>
            <param name="hWndInsertAfter">
            A handle to the window to precede the positioned window in the Z order.
            This parameter must be a window handle or one of the following values:
            <see cref="M:Constants.HWND_BOTTOM"/>
            <see cref="M:Constants.HWND_NOTOPMOST"/>
            <see cref="M:Constants.HWND_TOP"/>
            <see cref="M:Constants.HWND_TOPMOST"/>
            </param>
            <param name="x">The new position of the left side of the window, in client coordinates.</param>
            <param name="y">The new position of the top of the window, in client coordinates.</param>
            <param name="cx">The new width of the window, in pixels.</param>
            <param name="cy">The new height of the window, in pixels.</param>
            <param name="uFlags">The window sizing and positioning flags.</param>
            <returns>
            If the function succeeds, the return value is <c>true</c>.
            If the function fails, the return value is <c>false</c>.
            </returns>
        </member>
        <member name="F:Native.User32.SetForegroundWindowEntryPoint">
            <summary>Точка входа функции SetForegroundWindow.</summary>
        </member>
        <member name="M:Native.User32.SetForegroundWindow(System.IntPtr)">
            <summary>
            Brings the thread that created the specified window into the foreground and activates the window.
            Keyboard input is directed to the window, and various visual cues are changed for the user.
            The system assigns a slightly higher priority to the thread that created the foreground window than it does to other threads. 
            </summary>
            <param name="hWnd">A handle to the window that should be activated and brought to the foreground.</param>
            <returns>
            If the window was brought to the foreground, the return value is nonzero.
            If the window was not brought to the foreground, the return value is zero.
            </returns>
        </member>
        <member name="F:Native.User32.BringWindowToTopEntryPoint">
            <summary>Точка входа функции BringWindowToTop.</summary>
        </member>
        <member name="M:Native.User32.BringWindowToTop(System.IntPtr)">
            <summary>
            Brings the specified window to the top of the Z order.
            If the window is a top-level window, it is activated.
            If the window is a child window, the top-level parent window associated with the child window is activated. 
            </summary>
            <param name="hWnd">A handle to the window to bring to the top of the Z order.</param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:Native.User32.RegisterWindowMessage(System.String)">
            <summary>
            Defines a new window message that is guaranteed to be unique throughout the system.
            The message value can be used when sending or posting messages.
            </summary>
            <param name="lpString">The message to be registered.</param>
            <returns>
            If the message is successfully registered, the return value is a message identifier in the range 0xC000 through 0xFFFF.
            If the function fails, the return value is zero. To get extended error information, call GetLastError().
            </returns>
            <remarks>
            The RegisterWindowMessage function is typically used to register messages for communicating between two cooperating applications.
            If two different applications register the same message string, the applications return the same message value.
            The message remains registered until the session ends.
            Only use RegisterWindowMessage when more than one application must process the same message.
            For sending private messages within a window class, an application can use any integer in the range WM_USER through 0x7FFF.
            (Messages in this range are private to a window class, not to an application. For example, predefined control classes such as
            BUTTON, EDIT, LISTBOX, and COMBOBOX may use values in this range.) 
            </remarks>
        </member>
        <member name="M:Native.User32.GetForegroundWindow">
            <summary>
            Retrieves a handle to the foreground window (the window with which the user is currently working).
            The system assigns a slightly higher priority to the thread that creates the foreground window than it does to other threads.
            </summary>
            <returns>
            The return value is a handle to the foreground window.
            The foreground window can be <c>IntPtr.Zero</c> in certain circumstances, such as when a window is losing activation. 
            </returns>
        </member>
        <member name="M:Native.User32.FlashWindowEx(Native.FLASHWINFO@)">
            <summary>Flashes the specified window. It does not change the active state of the window.</summary>
            <param name="pwfi">A pointer to a <see cref="T:FLASHWINFO"/> structure.</param>
            <returns>
            The return value specifies the window's state before the call to the FlashWindowEx function.
            If the window caption was drawn as active before the call, the return value is nonzero.
            Otherwise, the return value is zero.
            </returns>
            <remarks>
            Typically, you flash a window to inform the user that the window requires attention but does not currently have the keyboard focus.
            When a window flashes, it appears to change from inactive to active status. An inactive caption bar changes to an active caption bar;
            an active caption bar changes to an inactive caption bar.
            </remarks>
        </member>
        <member name="M:Native.User32.MonitorFromWindow(System.IntPtr,Native.MONITOR)">
            <summary>
            Retrieves a handle to the display monitor that has the largest area of intersection
            with the bounding rectangle of a specified window.
            </summary>
            <param name="hwnd">A handle to the window of interest.</param>
            <param name="dwFlags">Determines the function's return value if the window does not intersect any display monitor.</param>
            <returns></returns>
        </member>
        <member name="M:Native.User32.GetMonitorInfo(System.IntPtr,Native.MONITORINFO@)">
            <summary>Retrieves information about a display monitor.</summary>
            <param name="hMonitor">A handle to the display monitor of interest.</param>
            <param name="lpmi">A pointer to a <see cref="T:Native.MONITORINFO"/> structure that receives information about the specified display monitor.</param>
            <returns>
            If the function succeeds, the return value is <c>true</c>.
            If the function fails, the return value is <c>false</c>.
            </returns>
        </member>
        <member name="M:Native.User32.LockWorkStation">
            <summary>Locks the workstation's display. Locking a workstation protects it from unauthorized use.</summary>
            <returns>
            If the function succeeds, the return value is <c>true</c>.
            Because the function executes asynchronously, a <c>true</c> return value indicates that the operation has been initiated.
            It does not indicate whether the workstation has been successfully locked.
            </returns>
        </member>
        <member name="M:Native.User32.BeginPaint(System.IntPtr,Native.PAINTSTRUCT@)">
            <summary>
            The BeginPaint function prepares the specified window for painting and fills a
            <see cref="T:Native.PAINTSTRUCT"/> structure with information about the painting.
            </summary>
            <param name="hWnd">Handle to the window to be repainted.</param>
            <param name="ps">Pointer to the <see cref="T:Native.PAINTSTRUCT"/> structure that will receive painting information.</param>
            <returns>
            If the function succeeds, the return value is the handle to a display device context for the specified window.
            If the function fails, the return value is <see cref="M:IntPtr.Zero"/>, indicating that no display device context is available.
            </returns>
        </member>
        <member name="M:Native.User32.EndPaint(System.IntPtr,Native.PAINTSTRUCT@)">
            <summary>
            The EndPaint function marks the end of painting in the specified window.
            This function is required for each call to the <see cref="M:Native.User32.BeginPaint(System.IntPtr,Native.PAINTSTRUCT@)"/> function, but only after painting is complete.
            </summary>
            <param name="hWnd">Handle to the window that has been repainted.</param>
            <param name="ps">Pointer to a <see cref="T:Native.PAINTSTRUCT"/> structure that contains the painting information retrieved by <see cref="M:Native.User32.BeginPaint(System.IntPtr,Native.PAINTSTRUCT@)"/>.</param>
            <returns>The return value is always <c>true</c>.</returns>
        </member>
        <member name="M:Native.User32.UpdateLayeredWindow(System.IntPtr,System.IntPtr,Native.POINT@,Native.SIZE@,System.IntPtr,Native.POINT@,System.Int32,Native.BLENDFUNCTION@,Native.ULW)">
            <summary>Updates the position, size, shape, content, and translucency of a layered window.</summary>
            <param name="hwnd">
            A handle to a layered window. A layered window is created by specifying WS_EX_LAYERED when creating the window with the CreateWindowEx function.
            Windows 8: The WS_EX_LAYERED style is supported for top-level windows and child windows.
            Previous Windows versions support WS_EX_LAYERED only for top-level windows.
            </param>
            <param name="hdcDst">
            A handle to a DC for the screen. This handle is obtained by specifying NULL when calling the function.
            It is used for palette color matching when the window contents are updated.
            If hdcDst isNULL, the default palette will be used.
            If hdcSrc is NULL, hdcDst must be NULL.
            </param>
            <param name="pptDst">
            A pointer to a structure that specifies the new screen position of the layered window.
            If the current position is not changing, pptDst can be NULL.
            </param>
            <param name="psize">
            A pointer to a structure that specifies the new size of the layered window.
            If the size of the window is not changing, psize can be NULL.
            If hdcSrc is NULL, psize must be NULL.
            </param>
            <param name="hdcSrc">
            A handle to a DC for the surface that defines the layered window.
            This handle can be obtained by calling the CreateCompatibleDC function.
            If the shape and visual context of the window are not changing, hdcSrc can be NULL. 
            </param>
            <param name="pprSrc">
            A pointer to a structure that specifies the location of the layer in the device context.
            If hdcSrc is NULL, pptSrc should be NULL. 
            </param>
            <param name="crKey">
            A structure that specifies the color key to be used when composing the layered window.
            To generate a COLORREF, use the RGB macro. 
            </param>
            <param name="pblend">
            A pointer to a structure that specifies the transparency value to be used when composing the layered window. 
            </param>
            <param name="dwFlags"><see cref="T:ULW"/>.</param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero.
            To get extended error information, call GetLastError. 
            </returns>
        </member>
        <member name="M:Native.User32.AnimateWindow(System.IntPtr,System.UInt32,Native.AW)">
            <summary>
            Enables you to produce special effects when showing or hiding windows.
            There are four types of animation: roll, slide, collapse or expand, and alpha-blended fade.
            </summary>
            <param name="hWnd">
            A handle to the window to animate.
            The calling thread must own this window.
            </param>
            <param name="dwTime">
            The time it takes to play the animation, in milliseconds.
            Typically, an animation takes 200 milliseconds to play.
            </param>
            <param name="dwFlags">
            The type of animation. Note that, by default, these flags take effect when showing a window.
            To take effect when hiding a window, use <see cref="M:AW.HIDE"/> and a logical OR operator with the appropriate flags. 
            </param>
            <returns>
            If the function succeeds, the return value is <c>true</c>.
            If the function fails, the return value is <c>false</c>.
            </returns>
        </member>
        <member name="M:Native.User32.RedrawWindow(System.IntPtr,Native.RECT@,System.IntPtr,Native.RDW)">
            <summary>
            Updates the specified rectangle or region in a window's client area.
            </summary>
            <param name="hWnd">
            A handle to the window to be redrawn.
            If this parameter is IntPtr.Zero, the desktop window is updated.
            </param>
            <param name="lprcUpdate">
            A pointer to a RECT structure containing the coordinates, in device units, of the update rectangle.
            This parameter is ignored if the <paramref name="hrgnUpdate"/> parameter identifies a region.
            </param>
            <param name="hrgnUpdate">
            A handle to the update region. If both the <paramref name="hrgnUpdate"/> and <paramref name="lprcUpdate"/> parameters are IntPtr.Zero,
            the entire client area is added to the update region.
            </param>
            <param name="flags">
            One or more redraw flags. This parameter can be used to invalidate or validate a window,
            control repainting, and control which windows are affected by RedrawWindow().
            </param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero.
            </returns>
        </member>
        <member name="M:Native.User32.RedrawWindow(System.IntPtr,System.IntPtr,System.IntPtr,Native.RDW)">
            <summary>
            Updates the specified rectangle or region in a window's client area.
            </summary>
            <param name="hWnd">
            A handle to the window to be redrawn.
            If this parameter is IntPtr.Zero, the desktop window is updated.
            </param>
            <param name="lprcUpdate">
            A pointer to a RECT structure containing the coordinates, in device units, of the update rectangle.
            This parameter is ignored if the <paramref name="hrgnUpdate"/> parameter identifies a region.
            </param>
            <param name="hrgnUpdate">
            A handle to the update region. If both the <paramref name="hrgnUpdate"/> and <paramref name="lprcUpdate"/> parameters are IntPtr.Zero,
            the entire client area is added to the update region.
            </param>
            <param name="flags">
            One or more redraw flags. This parameter can be used to invalidate or validate a window,
            control repainting, and control which windows are affected by RedrawWindow().
            </param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero.
            </returns>
        </member>
        <member name="M:Native.User32.GetParent(System.IntPtr)">
            <summary>
            Retrieves a handle to the specified window's parent or owner.
            To retrieve a handle to a specified ancestor, use the GetAncestor function.
            </summary>
            <param name="hWnd">A handle to the window whose parent window handle is to be retrieved.</param>
            <returns>
            If the window is a child window, the return value is a handle to the parent window.
            If the window is a top-level window with the WS_POPUP style, the return value is a handle to the owner window.
            If the function fails, the return value is NULL.
            </returns>
        </member>
        <member name="M:Native.User32.FillRect(System.IntPtr,Native.RECT@,System.IntPtr)">
            <summary>
            The FillRect function fills a rectangle by using the specified brush.
            This function includes the left and top borders, but excludes the right and bottom borders
            of the rectangle.
            </summary>
            <param name="hDC">A handle to the device context.</param>
            <param name="lprc">A pointer to a <see cref="T:Native.RECT"/> structure that contains the logical coordinates of the rectangle to be filled.</param>
            <param name="hbr">A handle to the brush used to fill the rectangle.</param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero.
            </returns>
            <seealso>https://msdn.microsoft.com/en-us/library/windows/desktop/dd162719%28v=vs.85%29.aspx</seealso>
        </member>
        <member name="M:Native.User32.MapWindowPoints(System.IntPtr,System.IntPtr,Native.POINT[],System.Int32)">
            <summary>
            The MapWindowPoints function converts (maps) a set of points from a coordinate
            space relative to one window to a coordinate space relative to another window.
            </summary>
            <param name="hWndFrom">
            A handle to the window from which points are converted.
            If this parameter is NULL or HWND_DESKTOP, the points are presumed
            to be in screen coordinates.
            </param>
            <param name="hWndTo">
            A handle to the window to which points are converted. If this parameter is NULL or HWND_DESKTOP,
            the points are converted to screen coordinates.
            </param>
            <param name="lpPoints">
            A pointer to an array of POINT structures that contain the set of points
            to be converted. The points are in device units. This parameter can also
            point to a RECT structure, in which case the cPoints parameter should be set to 2.
            </param>
            <param name="cPoints">
            The number of POINT structures in the array pointed to by the lpPoints parameter.
            </param>
            <returns>
            If the function succeeds, the low-order word of the return value is the number of
            pixels added to the horizontal coordinate of each source point in order to compute
            the horizontal coordinate of each destination point. (In addition to that,
            if precisely one of hWndFrom and hWndTo is mirrored, then each resulting horizontal
            coordinate is multiplied by -1.) The high-order word is the number of pixels added
            to the vertical coordinate of each source point in order to compute the vertical
            coordinate of each destination point.
            </returns>
        </member>
        <member name="M:Native.User32.MapWindowPoints(System.IntPtr,System.IntPtr,Native.POINT@,System.Int32)">
            <summary>
            The MapWindowPoints function converts (maps) a set of points from a coordinate
            space relative to one window to a coordinate space relative to another window.
            </summary>
            <param name="hWndFrom">
            A handle to the window from which points are converted.
            If this parameter is NULL or HWND_DESKTOP, the points are presumed
            to be in screen coordinates.
            </param>
            <param name="hWndTo">
            A handle to the window to which points are converted. If this parameter is NULL or HWND_DESKTOP,
            the points are converted to screen coordinates.
            </param>
            <param name="lpPoints">
            A pointer to an array of POINT structures that contain the set of points
            to be converted. The points are in device units. This parameter can also
            point to a RECT structure, in which case the cPoints parameter should be set to 2.
            </param>
            <param name="cPoints">
            The number of POINT structures in the array pointed to by the lpPoints parameter.
            </param>
            <returns>
            If the function succeeds, the low-order word of the return value is the number of
            pixels added to the horizontal coordinate of each source point in order to compute
            the horizontal coordinate of each destination point. (In addition to that,
            if precisely one of hWndFrom and hWndTo is mirrored, then each resulting horizontal
            coordinate is multiplied by -1.) The high-order word is the number of pixels added
            to the vertical coordinate of each source point in order to compute the vertical
            coordinate of each destination point.
            </returns>
        </member>
        <member name="T:Native.Dwmapi">
            <summary>Функции библиотеки dwmapi.dll.</summary>
        </member>
        <member name="F:Native.Dwmapi.LibName">
            <summary>Имя библиотеки.</summary>
        </member>
        <member name="M:Native.Dwmapi.DwmSetWindowAttribute(System.IntPtr,Native.DWMWA,System.IntPtr,System.Int32)">
            <summary>Sets the value of non-client rendering attributes for a window.</summary>
            <param name="hwnd">The handle to the window that will receive the attributes.</param>
            <param name="dwAttribute">
            A single <see cref="T:DWMWA"/> flag to apply to the window.
            This parameter specifies the attribute and the <paramref name="pvAttribute"/>
            parameter points to the value of that attribute.
            </param>
            <param name="pvAttribute">
            A pointer to the value of the attribute specified in the <paramref name="dwAttribute"/> parameter.
            Different <see cref="T:DWMWA"/> flags require different value types.
            </param>
            <param name="cbAttribute">
            The size, in bytes, of the value type pointed to by the <paramref name="pvAttribute"/> parameter.
            </param>
            <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <remarks>If Desktop Composition has been disabled, this function returns DWM_E_COMPOSITIONDISABLED.</remarks>
        </member>
        <member name="M:Native.Dwmapi.DwmSetWindowAttribute(System.IntPtr,Native.DWMWA,System.Int32@,System.Int32)">
            <summary>Sets the value of non-client rendering attributes for a window.</summary>
            <param name="hwnd">The handle to the window that will receive the attributes.</param>
            <param name="dwAttribute">
            A single <see cref="T:DWMWA"/> flag to apply to the window.
            This parameter specifies the attribute and the <paramref name="pvAttribute"/>
            parameter points to the value of that attribute.
            </param>
            <param name="pvAttribute">
            A pointer to the value of the attribute specified in the <paramref name="dwAttribute"/> parameter.
            Different <see cref="T:DWMWA"/> flags require different value types.
            </param>
            <param name="cbAttribute">
            The size, in bytes, of the value type pointed to by the <paramref name="pvAttribute"/> parameter.
            </param>
            <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <remarks>If Desktop Composition has been disabled, this function returns DWM_E_COMPOSITIONDISABLED.</remarks>
        </member>
        <member name="M:Native.Dwmapi.DwmSetWindowAttribute(System.IntPtr,Native.DWMWA,System.Boolean@,System.Int32)">
            <summary>Sets the value of non-client rendering attributes for a window.</summary>
            <param name="hwnd">The handle to the window that will receive the attributes.</param>
            <param name="dwAttribute">
            A single <see cref="T:DWMWA"/> flag to apply to the window.
            This parameter specifies the attribute and the <paramref name="pvAttribute"/>
            parameter points to the value of that attribute.
            </param>
            <param name="pvAttribute">
            A pointer to the value of the attribute specified in the <paramref name="dwAttribute"/> parameter.
            Different <see cref="T:DWMWA"/> flags require different value types.
            </param>
            <param name="cbAttribute">
            The size, in bytes, of the value type pointed to by the <paramref name="pvAttribute"/> parameter.
            </param>
            <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <remarks>If Desktop Composition has been disabled, this function returns DWM_E_COMPOSITIONDISABLED.</remarks>
        </member>
        <member name="M:Native.Dwmapi.DwmSetWindowAttribute(System.IntPtr,Native.DWMNCRP)">
            <summary>Sets non-client rendering policy.</summary>
            <param name="hwnd">The handle to the window that will receive the attributes.</param>
            <param name="renderingPolicy">Non-client rendering policy.</param>
            <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <remarks>If Desktop Composition has been disabled, this function returns DWM_E_COMPOSITIONDISABLED.</remarks>
        </member>
        <member name="M:Native.Dwmapi.DwmSetWindowAttribute(System.IntPtr,Native.DWMFLIP3D)">
            <summary>Sets Flip3D window behavior.</summary>
            <param name="hwnd">The handle to the window that will receive the attributes.</param>
            <param name="flip3DPolicy">Flip3D window behavior.</param>
            <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <remarks>If Desktop Composition has been disabled, this function returns DWM_E_COMPOSITIONDISABLED.</remarks>
        </member>
        <member name="M:Native.Dwmapi.DwmSetWindowAttribute(System.IntPtr,Native.DWMWA,System.Boolean)">
            <summary>Sets boolean window attribute.</summary>
            <param name="hwnd">The handle to the window that will receive the attributes.</param>
            <param name="dwAttribute">
            A single <see cref="T:DWMWA"/> flag to apply to the window.
            This parameter specifies the attribute and the <paramref name="value"/>
            parameter specifies the value of that attribute.
            </param>
            <param name="value">Attribute value.</param>
            <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <remarks>If Desktop Composition has been disabled, this function returns DWM_E_COMPOSITIONDISABLED.</remarks>
        </member>
        <member name="M:Native.Dwmapi.DwmGetWindowAttribute(System.IntPtr,Native.DWMWA,System.IntPtr,System.UInt32)">
            <summary>Retrieves the current value of a specified attribute applied to a window.</summary>
            <param name="hwnd">The handle to the window from which the attribute data is retrieved.</param>
            <param name="dwAttribute">The attribute to retrieve, specified as a <see cref="T:DWMWA"/> value.</param>
            <param name="pvAttribute">
            A pointer to a value that, when this function returns successfully, receives the current
            value of the attribute. The type of the retrieved value depends on the value of
            the <paramref name="dwAttribute"/> parameter.
            </param>
            <param name="cbAttribute">
            The size of the <see cref="T:DWMWA"/> value being retrieved.
            The size is dependent on the type of the <paramref name="pvAttribute"/> parameter.
            </param>
            <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:Native.Dwmapi.DwmGetWindowAttribute(System.IntPtr,Native.DWMWA,System.Int32@,System.UInt32)">
            <summary>Retrieves the current value of a specified attribute applied to a window.</summary>
            <param name="hwnd">The handle to the window from which the attribute data is retrieved.</param>
            <param name="dwAttribute">The attribute to retrieve, specified as a <see cref="T:DWMWA"/> value.</param>
            <param name="pvAttribute">
            A pointer to a value that, when this function returns successfully, receives the current
            value of the attribute. The type of the retrieved value depends on the value of
            the <paramref name="dwAttribute"/> parameter.
            </param>
            <param name="cbAttribute">
            The size of the <see cref="T:DWMWA"/> value being retrieved.
            The size is dependent on the type of the <paramref name="pvAttribute"/> parameter.
            </param>
            <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:Native.Dwmapi.DwmGetWindowAttribute(System.IntPtr,Native.DWMWA,System.Boolean@,System.UInt32)">
            <summary>Retrieves the current value of a specified attribute applied to a window.</summary>
            <param name="hwnd">The handle to the window from which the attribute data is retrieved.</param>
            <param name="dwAttribute">The attribute to retrieve, specified as a <see cref="T:DWMWA"/> value.</param>
            <param name="pvAttribute">
            A pointer to a value that, when this function returns successfully, receives the current
            value of the attribute. The type of the retrieved value depends on the value of
            the <paramref name="dwAttribute"/> parameter.
            </param>
            <param name="cbAttribute">
            The size of the <see cref="T:DWMWA"/> value being retrieved.
            The size is dependent on the type of the <paramref name="pvAttribute"/> parameter.
            </param>
            <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:Native.Dwmapi.DwmExtendFrameIntoClientArea(System.IntPtr,Native.MARGINS@)">
            <summary>Extends the window frame into the client area.</summary>
            <param name="hWnd">The handle to the window in which the frame will be extended into the client area.</param>
            <param name="pMarInset">
            A reference to a <see cref="T:MARGINS"/> structure that describes the margins to use
            when extending the frame into the client area.
            </param>
            <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <remarks>
            This function must be called whenever Desktop Window Manager (DWM) composition is toggled.
            Handle the <see cref="M:WM.DWMCOMPOSITIONCHANGED"/> message for composition change notification.
            Use negative margin values to create the "sheet of glass" effect where the client area is rendered as
            a solid surface with no window border.
            </remarks>
        </member>
        <member name="M:Native.Dwmapi.DwmEnableBlurBehindWindow(System.IntPtr,Native.DWM_BLURBEHIND@)">
            <summary>Enables the blur effect on a specified window.</summary>
            <param name="hWnd">The handle to the window on which the blur behind data is applied.</param>
            <param name="pBlurBehind">
            A reference to a <see cref="T:DWM_BLURBEHIND"/> structure that provides blur behind data.
            </param>
            <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:Native.Dwmapi.DwmEnableComposition(Native.DWM_EC)">
            <summary>Enables or disables Desktop Window Manager (DWM) composition.</summary>
            <param name="uCompositionAction">
            <see cref="M:DWM_EC.ENABLECOMPOSITION"/> to enable DWM composition;
            <see cref="M:DWM_EC.DISABLECOMPOSITION"/> to disable composition. 
            </param>
            <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <remarks>This function is deprecated as of Windows 8. DWM can no longer be programmatically disabled.</remarks>
        </member>
        <member name="M:Native.Dwmapi.DwmIsCompositionEnabled(System.Boolean@)">
            <summary>
            Obtains a value that indicates whether Desktop Window Manager (DWM) composition is enabled.
            Applications can listen for composition state changes by handling the <see cref="M:WM.DWMCOMPOSITIONCHANGED"/> notification.
            </summary>
            <param name="pfEnabled">
            A pointer to a value that, when this function returns successfully, receives <c>true</c> if DWM
            composition is enabled; otherwise, <c>false</c>.
            </param>
            <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="T:Native.RasterOperation">
            <summary>Растровые операции.</summary>
        </member>
        <member name="F:Native.RasterOperation.SRCCOPY">
            <summary>dest = source</summary>
        </member>
        <member name="F:Native.RasterOperation.SRCPAINT">
            <summary>dest = source OR dest</summary>
        </member>
        <member name="F:Native.RasterOperation.SRCAND">
            <summary>dest = source AND dest</summary>
        </member>
        <member name="F:Native.RasterOperation.SRCINVERT">
            <summary>dest = source XOR dest</summary>
        </member>
        <member name="F:Native.RasterOperation.SRCERASE">
            <summary>dest = source AND (NOT dest)</summary>
        </member>
        <member name="F:Native.RasterOperation.NOTSRCCOPY">
            <summary>dest = (NOT source)</summary>
        </member>
        <member name="F:Native.RasterOperation.NOTSRCERASE">
            <summary>dest = (NOT src) AND (NOT dest)</summary>
        </member>
        <member name="F:Native.RasterOperation.MERGECOPY">
            <summary>dest = (source AND pattern)</summary>
        </member>
        <member name="F:Native.RasterOperation.MERGEPAINT">
            <summary>dest = (NOT source) OR dest</summary>
        </member>
        <member name="F:Native.RasterOperation.PATCOPY">
            <summary>dest = pattern</summary>
        </member>
        <member name="F:Native.RasterOperation.PATPAINT">
            <summary>dest = DPSnoo</summary>
        </member>
        <member name="F:Native.RasterOperation.PATINVERT">
            <summary>dest = pattern XOR dest</summary>
        </member>
        <member name="F:Native.RasterOperation.DSTINVERT">
            <summary>dest = (NOT dest)</summary>
        </member>
        <member name="F:Native.RasterOperation.BLACKNESS">
            <summary>dest = BLACK</summary>
        </member>
        <member name="F:Native.RasterOperation.WHITENESS">
            <summary>dest = WHITE</summary>
        </member>
        <member name="T:Native.DibCompression">
            <summary>Тип сжатия DIB.</summary>
        </member>
        <member name="F:Native.DibCompression.RGB">
            <summary>An uncompressed format.</summary>
        </member>
        <member name="F:Native.DibCompression.RLE8">
            <summary>
            A run-length encoded (RLE) format for bitmaps with 8 bpp.
            The compression format is a 2-byte format consisting of a count byte followed by a byte containing a color index. 
            </summary>
        </member>
        <member name="F:Native.DibCompression.RLE4">
            <summary>
            An RLE format for bitmaps with 4 bpp. The compression format is a 2-byte format consisting of a count byte
            followed by two word-length color indexes. 
            </summary>
        </member>
        <member name="F:Native.DibCompression.BITFIELDS">
            <summary>
            Specifies that the bitmap is not compressed and that the color table consists of three DWORD color masks that specify the red, green,
            and blue components, respectively, of each pixel. This is valid when used with 16- and 32-bpp bitmaps.
            </summary>
        </member>
        <member name="F:Native.DibCompression.JPEG">
            <summary>Indicates that the image is a JPEG image.</summary>
        </member>
        <member name="F:Native.DibCompression.PNG">
            <summary>Indicates that the image is a PNG image.</summary>
        </member>
        <member name="T:Native.DibUsage">
            <summary>Определяет тип изображения (с палитрой/без).</summary>
        </member>
        <member name="F:Native.DibUsage.DIB_RGB_COLORS">
            <summary>Color table in RGBs.</summary>
        </member>
        <member name="F:Native.DibUsage.DIB_PAL_COLORS">
            <summary>Color table in palette indices.</summary>
        </member>
        <member name="T:Native.StretchBltMode">
            <summary>Определяет способ растяжения/сжатия изображения.</summary>
        </member>
        <member name="F:Native.StretchBltMode.INVALID">
            <summary>Invalid value.</summary>
        </member>
        <member name="F:Native.StretchBltMode.INVALID_PARAMETER">
            <summary>One or more of the input parameters is invalid.</summary>
        </member>
        <member name="F:Native.StretchBltMode.BLACKONWHITE">
            <summary>
            Performs a Boolean AND operation using the color values for the eliminated and existing pixels.
            If the bitmap is a monochrome bitmap, this mode preserves black pixels at the expense of white pixels.
            </summary>
        </member>
        <member name="F:Native.StretchBltMode.WHITEONBLACK">
            <summary>
            Performs a Boolean OR operation using the color values for the eliminated and existing pixels.
            If the bitmap is a monochrome bitmap, this mode preserves white pixels at the expense of black pixels.
            </summary>
        </member>
        <member name="F:Native.StretchBltMode.COLORONCOLOR">
            <summary>
            Deletes the pixels. This mode deletes all eliminated lines of pixels without trying to preserve their information.
            </summary>
        </member>
        <member name="F:Native.StretchBltMode.HALFTONE">
            <summary>
            Maps pixels from the source rectangle into blocks of pixels in the destination rectangle.
            The average color over the destination block of pixels approximates the color of the source pixels.
            After setting the HALFTONE stretching mode, an application must call the SetBrushOrgEx function to set the brush origin.
            If it fails to do so, brush misalignment occurs.
            </summary>
        </member>
        <member name="T:Native.ScrollWindowFlags">
            <summary>Флаги для функции ScrollWindowEx.</summary>
        </member>
        <member name="F:Native.ScrollWindowFlags.SCROLLCHILDREN">
            <summary>
            Scroll children within *lprcScroll.
            </summary>
        </member>
        <member name="F:Native.ScrollWindowFlags.INVALIDATE">
            <summary>
            Invalidate after scrolling.
            </summary>
        </member>
        <member name="F:Native.ScrollWindowFlags.ERASE">
            <summary>
            If SW_INVALIDATE, don't send <see cref="M:WM.ERASEBACKGROUND"/>.
            </summary>
        </member>
        <member name="F:Native.ScrollWindowFlags.SMOOTHSCROLL">
            <summary>
            Use smooth scrolling.
            </summary>
        </member>
        <member name="T:Native.SW">
            <summary>Опции для <see cref="M:Native.User32.ShowWindow(System.IntPtr,Native.SW)"/>.</summary>
        </member>
        <member name="F:Native.SW.FORCEMINIMIZE">
            <summary>
            Minimizes a window, even if the thread that owns the window is not responding.
            This flag should only be used when minimizing windows from a different thread.
            </summary>
        </member>
        <member name="F:Native.SW.HIDE">
            <summary>Hides the window and activates another window.</summary>
        </member>
        <member name="F:Native.SW.MAXIMIZE">
            <summary>Maximizes the specified window.</summary>
        </member>
        <member name="F:Native.SW.MINIMIZE">
            <summary>Minimizes the specified window and activates the next top-level window in the Z order.</summary>
        </member>
        <member name="F:Native.SW.RESTORE">
            <summary>
            Activates and displays the window.
            If the window is minimized or maximized, the system restores it to its original size and position.
            An application should specify this flag when restoring a minimized window.
            </summary>
        </member>
        <member name="F:Native.SW.SHOW">
            <summary>
            Activates the window and displays it in its current size and position.
            </summary>
        </member>
        <member name="F:Native.SW.SHOWDEFAULT">
            <summary>
            Sets the show state based on the SW_ value specified in the STARTUPINFO structure passed to the CreateProcess
            function by the program that started the application. 
            </summary>
        </member>
        <member name="F:Native.SW.SHOWMAXIMIZED">
            <summary>
            Activates the window and displays it as a maximized window.
            </summary>
        </member>
        <member name="F:Native.SW.SHOWMINIMIZED">
            <summary>
            Activates the window and displays it as a minimized window.
            </summary>
        </member>
        <member name="F:Native.SW.SHOWMINNOACTIVE">
            <summary>
            Displays the window as a minimized window.
            This value is similar to <see cref="F:Native.SW.SHOWMINIMIZED"/>, except the window is not activated.
            </summary>
        </member>
        <member name="F:Native.SW.SHOWNA">
            <summary>
            Displays the window in its current size and position.
            This value is similar to <see cref="F:Native.SW.SHOW"/>, except that the window is not activated.
            </summary>
        </member>
        <member name="F:Native.SW.SHOWNOACTIVATE">
            <summary>
            Displays a window in its most recent size and position.
            This value is similar to <see cref="F:Native.SW.SHOWNORMAL"/>, except that the window is not activated.
            </summary>
        </member>
        <member name="F:Native.SW.SHOWNORMAL">
            <summary>
            Activates and displays a window.
            If the window is minimized or maximized, the system restores it to its original size and position.
            An application should specify this flag when displaying the window for the first time.
            </summary>
        </member>
        <member name="T:Native.WM">
            <summary>Windows message.</summary>
        </member>
        <member name="T:Native.CS">
            <summary>Window class styles.</summary>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/ff729176.aspx</seealso>
        </member>
        <member name="F:Native.CS.BYTEALIGNCLIENT">
            <summary>
            Aligns the window's client area on a byte boundary (in the x direction).
            This style affects the width of the window and its horizontal placement on the display.
            </summary>
        </member>
        <member name="F:Native.CS.BYTEALIGNWINDOW">
            <summary>
            Aligns the window on a byte boundary (in the x direction).
            This style affects the width of the window and its horizontal placement on the display.
            </summary>
        </member>
        <member name="F:Native.CS.CLASSDC">
            <summary>
            Allocates one device context to be shared by all windows in the class.
            Because window classes are process specific, it is possible for multiple threads of an application to create a window of the same class.
            It is also possible for the threads to attempt to use the device context simultaneously.
            When this happens, the system allows only one thread to successfully finish its drawing operation. 
            </summary>
        </member>
        <member name="F:Native.CS.DBLCLKS">
            <summary>
            Sends a double-click message to the window procedure when the user double-clicks the mouse while the cursor is within a window belonging to the class.
            </summary>
        </member>
        <member name="F:Native.CS.DROPSHADOW">
            <summary>
            Enables the drop shadow effect on a window. The effect is turned on and off through SPI_SETDROPSHADOW.
            Typically, this is enabled for small, short-lived windows such as menus to emphasize their Z order relationship to other windows.
            </summary>
        </member>
        <member name="F:Native.CS.GLOBALCLASS">
            <summary>
            Indicates that the window class is an application global class.
            For more information, see the "Application Global Classes" section of About Window Classes.
            </summary>
        </member>
        <member name="F:Native.CS.HREDRAW">
            <summary>
            Redraws the entire window if a movement or size adjustment changes the width of the client area.
            </summary>
        </member>
        <member name="F:Native.CS.NOCLOSE">
            <summary>
            Disables Close on the window menu.
            </summary>
        </member>
        <member name="F:Native.CS.OWNDC">
            <summary>
            Allocates a unique device context for each window in the class.
            </summary>
        </member>
        <member name="F:Native.CS.PARENTDC">
            <summary>
            Sets the clipping rectangle of the child window to that of the parent window so that the child can draw on the parent.
            A window with the <see cref="F:Native.CS.PARENTDC"/> style bit receives a regular device context from the system's cache of device contexts.
            It does not give the child the parent's device context or device context settings.
            Specifying <see cref="F:Native.CS.PARENTDC"/> enhances an application's performance. 
            </summary>
        </member>
        <member name="F:Native.CS.SAVEBITS">
            <summary>
            Saves, as a bitmap, the portion of the screen image obscured by a window of this class.
            When the window is removed, the system uses the saved bitmap to restore the screen image, including other windows that were obscured.
            Therefore, the system does not send <see cref="M:WM.PAINT"/> messages to windows that were obscured if the memory used by the bitmap
            has not been discarded and if other screen actions have not invalidated the stored image. 
            </summary>
        </member>
        <member name="F:Native.CS.VREDRAW">
            <summary>
            Redraws the entire window if a movement or size adjustment changes the height of the client area.
            </summary>
        </member>
        <member name="T:Native.WS">
            <summary>Window styles.</summary>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/ms632600.aspx</seealso>
        </member>
        <member name="F:Native.WS.BORDER">
            <summary>The window has a thin-line border.</summary>
        </member>
        <member name="F:Native.WS.CAPTION">
            <summary>The window has a title bar (includes the <see cref="F:Native.WS.BORDER"/> style).</summary>
        </member>
        <member name="F:Native.WS.CHILD">
            <summary>
            The window is a child window. A window with this style cannot have a menu bar.
            This style cannot be used with the <see cref="F:Native.WS.POPUP"/> style.
            </summary>
        </member>
        <member name="F:Native.WS.CHILDWINDOW">
            <summary>Same as <see cref="F:Native.WS.CHILD"/> style.</summary>
        </member>
        <member name="F:Native.WS.CLIPCHILDREN">
            <summary>
            Excludes the area occupied by child windows when drawing occurs within the parent window.
            This style is used when creating the parent window.
            </summary>
        </member>
        <member name="F:Native.WS.CLIPSIBLINGS">
            <summary>
            Clips child windows relative to each other; that is, when a particular child window receives a
            <see cref="M:WM.PAINT"/> message, the <see cref="F:Native.WS.CLIPSIBLINGS"/> style clips all other overlapping child
            windows out of the region of the child window to be updated.
            If <see cref="F:Native.WS.CLIPSIBLINGS"/> is not specified and child windows overlap, it is possible, when drawing within
            the client area of a child window, to draw within the client area of a neighboring child window.
            </summary>
        </member>
        <member name="F:Native.WS.DISABLED">
            <summary>
            The window is initially disabled. A disabled window cannot receive input from the user.
            To change this after a window has been created, use the EnableWindow function.
            </summary>
        </member>
        <member name="F:Native.WS.DLGFRAME">
            <summary>
            The window has a border of a style typically used with dialog boxes. A window with this style cannot have a title bar.
            </summary>
        </member>
        <member name="F:Native.WS.GROUP">
            <summary>
            The window is the first control of a group of controls. The group consists of this first control and all controls defined after it,
            up to the next control with the <see cref="F:Native.WS.GROUP"/> style. The first control in each group usually has the <see cref="F:Native.WS.TABSTOP"/> style
            so that the user can move from group to group.
            The user can subsequently change the keyboard focus from one control in the group to the next control in the group by using the direction keys.
            </summary>
        </member>
        <member name="F:Native.WS.HSCROLL">
            <summary>The window has a horizontal scroll bar.</summary>
        </member>
        <member name="F:Native.WS.ICONIC">
            <summary>The window is initially minimized. Same as the <see cref="F:Native.WS.MINIMIZE"/> style.</summary>
        </member>
        <member name="F:Native.WS.MAXIMIZE">
            <summary>The window is initially maximized.</summary>
        </member>
        <member name="F:Native.WS.MAXIMIZEBOX">
            <summary>
            The window has a maximize button. Cannot be combined with the <see cref="M:WS_EX.CONTEXTHELP"/> style.
            The <see cref="F:Native.WS.SYSMENU"/> style must also be specified. 
            </summary>
        </member>
        <member name="F:Native.WS.MINIMIZE">
            <summary>
            The window is initially minimized. Same as the <see cref="F:Native.WS.ICONIC"/> style.
            </summary>
        </member>
        <member name="F:Native.WS.MINIMIZEBOX">
            <summary>
            The window has a minimize button. Cannot be combined with the <see cref="M:WS_EX.CONTEXTHELP"/> style.
            The <see cref="F:Native.WS.SYSMENU"/> style must also be specified. 
            </summary>
        </member>
        <member name="F:Native.WS.OVERLAPPED">
            <summary>
            The window is an overlapped window. An overlapped window has a title bar and a border.
            Same as the <see cref="F:Native.WS.TILED"/> style.
            </summary>
        </member>
        <member name="F:Native.WS.OVERLAPPEDWINDOW">
            <summary>
            The window is an overlapped window. Same as the <see cref="F:Native.WS.TILEDWINDOW"/> style.
            </summary>
        </member>
        <member name="F:Native.WS.POPUP">
            <summary>
            The windows is a pop-up window. This style cannot be used with the <see cref="F:Native.WS.CHILD"/> style.
            </summary>
        </member>
        <member name="F:Native.WS.POPUPWINDOW">
            <summary>
            The window is a pop-up window. The <see cref="F:Native.WS.CAPTION"/> and <see cref="F:Native.WS.POPUPWINDOW"/> styles
            must be combined to make the window menu visible.
            </summary>
        </member>
        <member name="F:Native.WS.SIZEBOX">
            <summary>
            The window has a sizing border. Same as the <see cref="F:Native.WS.THICKFRAME"/> style.
            </summary>
        </member>
        <member name="F:Native.WS.SYSMENU">
            <summary>
            The window has a window menu on its title bar. The <see cref="F:Native.WS.CAPTION"/> style must also be specified.
            </summary>
        </member>
        <member name="F:Native.WS.TABSTOP">
            <summary>
            The window is a control that can receive the keyboard focus when the user presses the TAB key.
            Pressing the TAB key changes the keyboard focus to the next control with the <see cref="F:Native.WS.TABSTOP"/> style.
            </summary>
        </member>
        <member name="F:Native.WS.THICKFRAME">
            <summary>
            The window has a sizing border. Same as the <see cref="F:Native.WS.SIZEBOX"/> style.
            </summary>
        </member>
        <member name="F:Native.WS.TILED">
            <summary>
            The window is an overlapped window. An overlapped window has a title bar and a border.
            Same as the <see cref="F:Native.WS.OVERLAPPED"/> style. 
            </summary>
        </member>
        <member name="F:Native.WS.TILEDWINDOW">
            <summary>
            The window is an overlapped window. Same as the <see cref="F:Native.WS.OVERLAPPEDWINDOW"/> style.
            </summary>
        </member>
        <member name="F:Native.WS.VISIBLE">
            <summary>
            The window is initially visible.
            This style can be turned on and off by using the ShowWindow or SetWindowPos function.
            </summary>
        </member>
        <member name="F:Native.WS.VSCROLL">
            <summary>The window has a vertical scroll bar.</summary>
        </member>
        <member name="T:Native.WS_EX">
            <summary>Extended window styles.</summary>
        </member>
        <member name="F:Native.WS_EX.ACCEPTFILES">
            <summary>The window accepts drag-drop files.</summary>
        </member>
        <member name="F:Native.WS_EX.APPWINDOW">
            <summary>Forces a top-level window onto the taskbar when the window is visible.</summary>
        </member>
        <member name="F:Native.WS_EX.CLIENTEDGE">
            <summary>The window has a border with a sunken edge.</summary>
        </member>
        <member name="F:Native.WS_EX.COMPOSITED">
            <summary>
            Paints all descendants of a window in bottom-to-top painting order using double-buffering.
            This cannot be used if the window has a class style of either CS_OWNDC or CS_CLASSDC.
            </summary>
            <remarks>Windows 2000:  This style is not supported.</remarks>
        </member>
        <member name="F:Native.WS_EX.CONTEXTHELP">
            <summary>
            The title bar of the window includes a question mark.
            When the user clicks the question mark, the cursor changes to a question mark with a pointer.
            If the user then clicks a child window, the child receives a <see cref="M:WM.HELP"/> message.
            The child window should pass the message to the parent window procedure, which should call the WinHelp function using the HELP_WM_HELP command.
            The Help application displays a pop-up window that typically contains help for the child window.
            <see cref="F:Native.WS_EX.CONTEXTHELP"/> cannot be used with the <see cref="M:WS.MAXIMIZEBOX"/> or  <see cref="M:WS.MINIMIZEBOX"/> styles.
            </summary>
        </member>
        <member name="F:Native.WS_EX.CONTROLPARENT">
            <summary>
            The window itself contains child windows that should take part in dialog box navigation.
            If this style is specified, the dialog manager recurses into children of this window when performing
            navigation operations such as handling the TAB key, an arrow key, or a keyboard mnemonic.
            </summary>
        </member>
        <member name="F:Native.WS_EX.DLGMODALFRAME">
            <summary>
            The window has a double border; the window can, optionally, be created with a title bar
            by specifying the <see cref="M:WS.CAPTION"/> style in the dwStyle parameter.
            </summary>
        </member>
        <member name="F:Native.WS_EX.LAYERED">
            <summary>
            The window is a layered window.
            This style cannot be used if the window has a class style of either <see cref="M:CS.OWNDC"/> or <see cref="M:CS.CLASSDC"/>.
            </summary>
        </member>
        <member name="F:Native.WS_EX.LAYOUTRTL">
            <summary>
            If the shell language is Hebrew, Arabic, or another language that supports reading order alignment,
            the horizontal origin of the window is on the right edge.
            Increasing horizontal values advance to the left. 
            </summary>
        </member>
        <member name="F:Native.WS_EX.LEFT">
            <summary>The window has generic left-aligned properties. This is the default.</summary>
        </member>
        <member name="F:Native.WS_EX.LEFTSCROLLBAR">
            <summary>
            If the shell language is Hebrew, Arabic, or another language that supports reading order alignment,
            the vertical scroll bar (if present) is to the left of the client area.
            For other languages, the style is ignored.
            </summary>
        </member>
        <member name="F:Native.WS_EX.LTRREADING">
            <summary>The window text is displayed using left-to-right reading-order properties. This is the default.</summary>
        </member>
        <member name="F:Native.WS_EX.MDICHILD">
            <summary>The window is a MDI child window.</summary>
        </member>
        <member name="F:Native.WS_EX.NOACTIVATE">
            <summary>
            A top-level window created with this style does not become the foreground window when the user clicks it.
            The system does not bring this window to the foreground when the user minimizes or closes the foreground window.
            </summary>
        </member>
        <member name="F:Native.WS_EX.NOINHERITLAYOUT">
            <summary>The window does not pass its window layout to its child windows.</summary>
        </member>
        <member name="F:Native.WS_EX.NOPARENTNOTIFY">
            <summary>
            The child window created with this style does not send the <see cref="F:Native.WM.PARENTNOTIFY"/> message
            to its parent window when it is created or destroyed.
            </summary>
        </member>
        <member name="F:Native.WS_EX.NOREDIRECTIONBITMAP">
            <summary>
            The window does not render to a redirection surface. This is for windows that do not have visible content
            or that use mechanisms other than surfaces to provide their visual.
            </summary>
        </member>
        <member name="F:Native.WS_EX.OVERLAPPEDWINDOW">
            <summary>The window is an overlapped window.</summary>
        </member>
        <member name="F:Native.WS_EX.PALETTEWINDOW">
            <summary>The window is palette window, which is a modeless dialog box that presents an array of commands.</summary>
        </member>
        <member name="F:Native.WS_EX.RIGHT">
            <summary>
            The window has generic "right-aligned" properties. This depends on the window class.
            This style has an effect only if the shell language is Hebrew, Arabic, or another language that supports
            reading-order alignment; otherwise, the style is ignored.
            </summary>
        </member>
        <member name="F:Native.WS_EX.RIGHTSCROLLBAR">
            <summary>The vertical scroll bar (if present) is to the right of the client area. This is the default.</summary>
        </member>
        <member name="F:Native.WS_EX.RTLREADING">
            <summary>
            If the shell language is Hebrew, Arabic, or another language that supports reading-order alignment,
            the window text is displayed using right-to-left reading-order properties.
            For other languages, the style is ignored.
            </summary>
        </member>
        <member name="F:Native.WS_EX.STATICEDGE">
            <summary>
            The window has a three-dimensional border style intended to be used for items that do not accept user input.
            </summary>
        </member>
        <member name="F:Native.WS_EX.TOOLWINDOW">
            <summary>
            The window is intended to be used as a floating toolbar. A tool window has a title bar that is shorter than
            a normal title bar, and the window title is drawn using a smaller font. A tool window does not appear
            in the taskbar or in the dialog that appears when the user presses ALT+TAB. If a tool window has a system menu,
            its icon is not displayed on the title bar. However, you can display the system menu by right-clicking or by typing ALT+SPACE. 
            </summary>
        </member>
        <member name="F:Native.WS_EX.TOPMOST">
            <summary>
            The window should be placed above all non-topmost windows and should stay above them, even when the window is deactivated.
            To add or remove this style, use the SetWindowPos function.
            </summary>
        </member>
        <member name="F:Native.WS_EX.TRANSPARENT">
            <summary>
            The window should not be painted until siblings beneath the window (that were created by the same thread) have been painted.
            The window appears transparent because the bits of underlying sibling windows have already been painted.
            To achieve transparency without these restrictions, use the SetWindowRgn function.
            </summary>
        </member>
        <member name="F:Native.WS_EX.WINDOWEDGE">
            <summary>The window has a border with a raised edge.</summary>
        </member>
        <member name="T:Native.CWP">
            <summary>Флаги для функции <see cref="M:Native.User32.ChildWindowFromPointEx(System.IntPtr,Native.POINT,Native.CWP)"/>.</summary>
        </member>
        <member name="F:Native.CWP.ALL">
            <summary>Does not skip any child windows.</summary>
        </member>
        <member name="F:Native.CWP.SKIPDISABLED">
            <summary>Skips disabled child windows.</summary>
        </member>
        <member name="F:Native.CWP.SKIPINVISIBLE">
            <summary>Skips invisible child windows.</summary>
        </member>
        <member name="F:Native.CWP.SKIPTRANSPARENT">
            <summary>Skips transparent child windows.</summary>
        </member>
        <member name="T:Native.SM">
            <summary>System metric.</summary>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/ms724385.aspx</seealso>
        </member>
        <member name="F:Native.SM.ARRANGE">
            <summary>The flags that specify how the system arranged minimized windows. </summary>
        </member>
        <member name="F:Native.SM.CLEANBOOT">
            <summary>
            The value that specifies how the system is started:
            	0 = Normal boot
            	1 = Fail-safe boot
            	2 = Fail-safe with network boot
            A fail-safe boot (also called SafeBoot, Safe Mode, or Clean Boot) bypasses the user startup files.
            </summary>
        </member>
        <member name="F:Native.SM.CMONITORS">
            <summary>The number of display monitors on a desktop.</summary>
        </member>
        <member name="F:Native.SM.CMOUSEBUTTONS">
            <summary>The number of buttons on a mouse, or zero if no mouse is installed.</summary>
        </member>
        <member name="F:Native.SM.CXBORDER">
            <summary>
            The width of a window border, in pixels.
            This is equivalent to the <see cref="F:Native.SM.CXEDGE"/> value for windows with the 3-D look.
            </summary>
        </member>
        <member name="F:Native.SM.CXCURSOR">
            <summary>The width of a cursor, in pixels. The system cannot create cursors of other sizes.</summary>
        </member>
        <member name="F:Native.SM.CXDLGFRAME">
            <summary>This value is the same as <see cref="F:Native.SM.CXFIXEDFRAME"/>.</summary>
        </member>
        <member name="F:Native.SM.CXDOUBLECLK">
            <summary>
            The width of the rectangle around the location of a first click in a double-click sequence, in pixels.
            The second click must occur within the rectangle that is defined by <see cref="F:Native.SM.CXDOUBLECLK"/> and <see cref="F:Native.SM.CYDOUBLECLK"/>
            for the system to consider the two clicks a double-click.
            The two clicks must also occur within a specified time. 
            </summary>
        </member>
        <member name="F:Native.SM.CXPADDEDBORDER">
            <summary>
            The amount of border padding for captioned windows, in pixels. Windows XP/2000:  This value is not supported.
            </summary>
        </member>
        <member name="F:Native.SM.CXDRAG">
            <summary>
            The number of pixels on either side of a mouse-down point that the mouse pointer can move before a drag operation begins.
            This allows the user to click and release the mouse button easily without unintentionally starting a drag operation.
            If this value is negative, it is subtracted from the left of the mouse-down point and added to the right of it.
            </summary>
        </member>
        <member name="F:Native.SM.CXEDGE">
            <summary>
            The width of a 3-D border, in pixels. This metric is the 3-D counterpart of <see cref="F:Native.SM.CXBORDER"/>.
            </summary>
        </member>
        <member name="F:Native.SM.CXFIXEDFRAME">
            <summary>
            The thickness of the frame around the perimeter of a window that has a caption but is not sizable, in pixels.
            <see cref="F:Native.SM.CXFIXEDFRAME"/> is the height of the horizontal border, and <see cref="F:Native.SM.CYFIXEDFRAME"/> is the width of the vertical border.
            This value is the same as SM_CXDLGFRAME.
            </summary>
        </member>
        <member name="F:Native.SM.CXFOCUSBORDER">
            <summary>
            The width of the left and right edges of the focus rectangle that the DrawFocusRect draws. This value is in pixels. 
            </summary>
        </member>
        <member name="F:Native.SM.CXFRAME">
            <summary>
            This value is the same as <see cref="F:Native.SM.CXSIZEFRAME"/>.
            </summary>
        </member>
        <member name="F:Native.SM.CXFULLSCREEN">
            <summary>
            The width of the client area for a full-screen window on the primary display monitor, in pixels.
            To get the coordinates of the portion of the screen that is not obscured by the system taskbar or by application desktop toolbars,
            call the SystemParametersInfo function with the SPI_GETWORKAREA value.
            </summary>
        </member>
        <member name="F:Native.SM.CXHSCROLL">
            <summary>The width of the arrow bitmap on a horizontal scroll bar, in pixels.</summary>
        </member>
        <member name="F:Native.SM.CXHTHUMB">
            <summary>
            The width of the thumb box in a horizontal scroll bar, in pixels.
            </summary>
        </member>
        <member name="F:Native.SM.CXICON">
            <summary>
            The default width of an icon, in pixels. The LoadIcon function can load only icons with the dimensions that
            <see cref="F:Native.SM.CXICON"/> and <see cref="F:Native.SM.CYICON"/> specifies.
            </summary>
        </member>
        <member name="F:Native.SM.CXICONSPACING">
            <summary>
            The width of a grid cell for items in large icon view, in pixels.
            Each item fits into a rectangle of size <see cref="F:Native.SM.CXICONSPACING"/> by <see cref="F:Native.SM.CYICONSPACING"/> when arranged.
            This value is always greater than or equal to <see cref="F:Native.SM.CXICON"/>.
            </summary>
        </member>
        <member name="F:Native.SM.CXMAXIMIZED">
            <summary>The default width, in pixels, of a maximized top-level window on the primary display monitor.</summary>
        </member>
        <member name="F:Native.SM.CXMAXTRACK">
            <summary>
            The default maximum width of a window that has a caption and sizing borders, in pixels.
            This metric refers to the entire desktop. The user cannot drag the window frame to a size larger than these dimensions.
            A window can override this value by processing the <see cref="M:WM.GETMINMAXINFO"/> message.
            </summary>
        </member>
        <member name="F:Native.SM.CXMENUCHECK">
            <summary>The width of the default menu check-mark bitmap, in pixels.</summary>
        </member>
        <member name="F:Native.SM.CXMENUSIZE">
            <summary>
            The width of menu bar buttons, such as the child window close button that is used in the multiple document interface, in pixels.
            </summary>
        </member>
        <member name="F:Native.SM.CXMIN">
            <summary>The minimum width of a window, in pixels.</summary>
        </member>
        <member name="F:Native.SM.CXMINIMIZED">
            <summary>The width of a minimized window, in pixels.</summary>
        </member>
        <member name="F:Native.SM.CXMINSPACING">
            <summary>
            The width of a grid cell for a minimized window, in pixels. Each minimized window fits into a rectangle this size when arranged.
            This value is always greater than or equal to <see cref="F:Native.SM.CXMINIMIZED"/>.
            </summary>
        </member>
        <member name="F:Native.SM.CXMINTRACK">
            <summary>
            The minimum tracking width of a window, in pixels. The user cannot drag the window frame to a size smaller than these dimensions.
            A window can override this value by processing the <see cref="M:WM.GETMINMAXINFO"/> message.
            </summary>
        </member>
        <member name="F:Native.SM.CXSCREEN">
            <summary>
            The width of the screen of the primary display monitor, in pixels. This is the same value obtained by calling GetDeviceCaps
            as follows: GetDeviceCaps( hdcPrimaryMonitor, HORZRES).
            </summary>
        </member>
        <member name="F:Native.SM.CXSIZE">
            <summary>The width of a button in a window caption or title bar, in pixels.</summary>
        </member>
        <member name="F:Native.SM.CXSIZEFRAME">
            <summary>
            The thickness of the sizing border around the perimeter of a window that can be resized, in pixels.
            <see cref="F:Native.SM.CXSIZEFRAME"/> is the width of the horizontal border, and <see cref="F:Native.SM.CYSIZEFRAME"/> is the height of the vertical border.
            This value is the same as SM_CXFRAME.
            </summary>
        </member>
        <member name="F:Native.SM.CXSMICON">
            <summary>
            The recommended width of a small icon, in pixels. Small icons typically appear in window captions and in small icon view.
            </summary>
        </member>
        <member name="F:Native.SM.CXSMSIZE">
            <summary>The width of small caption buttons, in pixels.</summary>
        </member>
        <member name="F:Native.SM.CXVIRTUALSCREEN">
            <summary>
            The width of the virtual screen, in pixels. The virtual screen is the bounding rectangle of all display monitors.
            The <see cref="F:Native.SM.CXVIRTUALSCREEN"/> metric is the coordinates for the left side of the virtual screen. 
            </summary>
        </member>
        <member name="F:Native.SM.CXVSCROLL">
            <summary>The width of a vertical scroll bar, in pixels.</summary>
        </member>
        <member name="F:Native.SM.CYBORDER">
            <summary>
            The height of a window border, in pixels. This is equivalent to the <see cref="F:Native.SM.CYEDGE"/> value for windows with the 3-D look.
            </summary>
        </member>
        <member name="F:Native.SM.CYCAPTION">
            <summary>The height of a caption area, in pixels.</summary>
        </member>
        <member name="F:Native.SM.CYCURSOR">
            <summary>The height of a cursor, in pixels. The system cannot create cursors of other sizes.</summary>
        </member>
        <member name="F:Native.SM.CYDLGFRAME">
            <summary>This value is the same as <see cref="F:Native.SM.CYFIXEDFRAME"/>.</summary>
        </member>
        <member name="F:Native.SM.CYDOUBLECLK">
            <summary>
            The height of the rectangle around the location of a first click in a double-click sequence, in pixels.
            The second click must occur within the rectangle defined by <see cref="F:Native.SM.CXDOUBLECLK"/> and <see cref="F:Native.SM.CYDOUBLECLK"/>
            for the system to consider the two clicks a double-click. The two clicks must also occur within a specified time. 
            </summary>
        </member>
        <member name="F:Native.SM.CYDRAG">
            <summary>
            The number of pixels above and below a mouse-down point that the mouse pointer can move before a drag operation begins.
            This allows the user to click and release the mouse button easily without unintentionally starting a drag operation.
            If this value is negative, it is subtracted from above the mouse-down point and added below it. 
            </summary>
        </member>
        <member name="F:Native.SM.CYEDGE">
            <summary>
            The height of a 3-D border, in pixels. This is the 3-D counterpart of <see cref="F:Native.SM.CYBORDER"/>.
            </summary>
        </member>
        <member name="F:Native.SM.CYFIXEDFRAME">
            <summary>
            The thickness of the frame around the perimeter of a window that has a caption but is not sizable, in pixels.
            <see cref="F:Native.SM.CXFIXEDFRAME"/> is the height of the horizontal border, and <see cref="F:Native.SM.CYFIXEDFRAME"/> is the width of the vertical border.
            This value is the same as <see cref="F:Native.SM.CYDLGFRAME"/>.
            </summary>
        </member>
        <member name="F:Native.SM.CYFOCUSBORDER">
            <summary>The height of the top and bottom edges of the focus rectangle drawn by DrawFocusRect. This value is in pixels.</summary>
        </member>
        <member name="F:Native.SM.CYFRAME">
            <summary>
            This value is the same as <see cref="F:Native.SM.CYSIZEFRAME"/>.
            </summary>
        </member>
        <member name="F:Native.SM.CYFULLSCREEN">
            <summary>
            The height of the client area for a full-screen window on the primary display monitor, in pixels.
            To get the coordinates of the portion of the screen not obscured by the system taskbar or by application desktop toolbars,
            call the SystemParametersInfo function with the SPI_GETWORKAREA value.
            </summary>
        </member>
        <member name="F:Native.SM.CYHSCROLL">
            <summary>The height of a horizontal scroll bar, in pixels.</summary>
        </member>
        <member name="F:Native.SM.CYICON">
            <summary>
            The default height of an icon, in pixels.
            The LoadIcon function can load only icons with the dimensions <see cref="F:Native.SM.CXICON"/> and <see cref="F:Native.SM.CYICON"/>.
            </summary>
        </member>
        <member name="F:Native.SM.CYICONSPACING">
            <summary>
            The height of a grid cell for items in large icon view, in pixels.
            Each item fits into a rectangle of size <see cref="F:Native.SM.CXICONSPACING"/> by <see cref="F:Native.SM.CYICONSPACING"/> when arranged.
            This value is always greater than or equal to <see cref="F:Native.SM.CYICON"/>.
            </summary>
        </member>
        <member name="F:Native.SM.CYKANJIWINDOW">
            <summary>
            For double byte character set versions of the system, this is the height of the Kanji window at the bottom of the screen, in pixels.
            </summary>
        </member>
        <member name="F:Native.SM.CYMAXIMIZED">
            <summary>
            The default height, in pixels, of a maximized top-level window on the primary display monitor.
            </summary>
        </member>
        <member name="F:Native.SM.CYMAXTRACK">
            <summary>
            The default maximum height of a window that has a caption and sizing borders, in pixels.
            This metric refers to the entire desktop. The user cannot drag the window frame to a size larger than these dimensions.
            A window can override this value by processing the <see cref="M:WM.GETMINMAXINFO"/> message.
            </summary>
        </member>
        <member name="F:Native.SM.CYMENU">
            <summary>The height of a single-line menu bar, in pixels.</summary>
        </member>
        <member name="F:Native.SM.CYMENUCHECK">
            <summary>The height of the default menu check-mark bitmap, in pixels.</summary>
        </member>
        <member name="F:Native.SM.CYMENUSIZE">
            <summary>
            The height of menu bar buttons, such as the child window close button that is used in the multiple document interface, in pixels.
            </summary>
        </member>
        <member name="F:Native.SM.CYMIN">
            <summary>The minimum height of a window, in pixels.</summary>
        </member>
        <member name="F:Native.SM.CYMINIMIZED">
            <summary>The height of a minimized window, in pixels.</summary>
        </member>
        <member name="F:Native.SM.CYMINSPACING">
            <summary>
            The height of a grid cell for a minimized window, in pixels.
            Each minimized window fits into a rectangle this size when arranged.
            This value is always greater than or equal to <see cref="F:Native.SM.CYMINIMIZED"/>.
            </summary>
        </member>
        <member name="F:Native.SM.CYMINTRACK">
            <summary>
            The minimum tracking height of a window, in pixels.
            The user cannot drag the window frame to a size smaller than these dimensions.
            A window can override this value by processing the <see cref="M:WM.GETMINMAXINFO"/> message.
            </summary>
        </member>
        <member name="F:Native.SM.CYSCREEN">
            <summary>
            The height of the screen of the primary display monitor, in pixels.
            This is the same value obtained by calling GetDeviceCaps as follows: GetDeviceCaps( hdcPrimaryMonitor, VERTRES).
            </summary>
        </member>
        <member name="F:Native.SM.CYSIZE">
            <summary>The height of a button in a window caption or title bar, in pixels.</summary>
        </member>
        <member name="F:Native.SM.CYSIZEFRAME">
            <summary>
            The thickness of the sizing border around the perimeter of a window that can be resized, in pixels.
            <see cref="F:Native.SM.CXSIZEFRAME"/> is the width of the horizontal border, and <see cref="F:Native.SM.CYSIZEFRAME"/> is the height of the vertical border.
            This value is the same as <see cref="F:Native.SM.CYFRAME"/>.
            </summary>
        </member>
        <member name="F:Native.SM.CYSMCAPTION">
            <summary>The height of a small caption, in pixels.</summary>
        </member>
        <member name="F:Native.SM.CYSMICON">
            <summary>The recommended height of a small icon, in pixels. Small icons typically appear in window captions and in small icon view.</summary>
        </member>
        <member name="F:Native.SM.CYSMSIZE">
            <summary>The height of small caption buttons, in pixels.</summary>
        </member>
        <member name="F:Native.SM.CYVIRTUALSCREEN">
            <summary>
            The height of the virtual screen, in pixels. The virtual screen is the bounding rectangle of all display monitors.
            The <see cref="F:Native.SM.YVIRTUALSCREEN"/> metric is the coordinates for the top of the virtual screen.
            </summary>
        </member>
        <member name="F:Native.SM.CYVSCROLL">
            <summary>The height of the arrow bitmap on a vertical scroll bar, in pixels.</summary>
        </member>
        <member name="F:Native.SM.CYVTHUMB">
            <summary>The height of the thumb box in a vertical scroll bar, in pixels.</summary>
        </member>
        <member name="F:Native.SM.DBCSENABLED">
            <summary>Nonzero if User32.dll supports DBCS; otherwise, 0.</summary>
        </member>
        <member name="F:Native.SM.DEBUG">
            <summary>Nonzero if the debug version of User.exe is installed; otherwise, 0.</summary>
        </member>
        <member name="F:Native.SM.DIGITIZER">
            <summary>
            Nonzero if the current operating system is Windows 7 or Windows Server 2008 R2 and the Tablet PC Input service is started; otherwise, 0.
            The return value is a bitmask that specifies the type of digitizer input supported by the device.
            </summary>
        </member>
        <member name="F:Native.SM.IMMENABLED">
            <summary>Nonzero if Input Method Manager/Input Method Editor features are enabled; otherwise, 0.</summary>
        </member>
        <member name="F:Native.SM.MAXIMUMTOUCHES">
            <summary>Nonzero if there are digitizers in the system; otherwise, 0.</summary>
        </member>
        <member name="F:Native.SM.MEDIACENTER">
            <summary>Nonzero if the current operating system is the Windows XP, Media Center Edition, 0 if not.</summary>
        </member>
        <member name="F:Native.SM.MENUDROPALIGNMENT">
            <summary>Nonzero if drop-down menus are right-aligned with the corresponding menu-bar item; 0 if the menus are left-aligned.</summary>
        </member>
        <member name="F:Native.SM.MIDEASTENABLED">
            <summary>Nonzero if the system is enabled for Hebrew and Arabic languages, 0 if not.</summary>
        </member>
        <member name="F:Native.SM.MOUSEPRESENT">
            <summary>
            Nonzero if a mouse is installed; otherwise, 0. This value is rarely zero, because of support for virtual mice
            and because some systems detect the presence of the port instead of the presence of a mouse.
            </summary>
        </member>
        <member name="F:Native.SM.MOUSEHORIZONTALWHEELPRESENT">
            <summary>Nonzero if a mouse with a horizontal scroll wheel is installed; otherwise 0.</summary>
        </member>
        <member name="F:Native.SM.MOUSEWHEELPRESENT">
            <summary>Nonzero if a mouse with a vertical scroll wheel is installed; otherwise 0.</summary>
        </member>
        <member name="F:Native.SM.NETWORK">
            <summary>
            The least significant bit is set if a network is present; otherwise, it is cleared.
            The other bits are reserved for future use.
            </summary>
        </member>
        <member name="F:Native.SM.PENWINDOWS">
            <summary>
            Nonzero if the Microsoft Windows for Pen computing extensions are installed; zero otherwise.
            </summary>
        </member>
        <member name="F:Native.SM.REMOTECONTROL">
            <summary>
            This system metric is used in a Terminal Services environment to determine if the current
            Terminal Server session is being remotely controlled.
            Its value is nonzero if the current session is remotely controlled; otherwise, 0.
            </summary>
        </member>
        <member name="F:Native.SM.REMOTESESSION">
            <summary>
            This system metric is used in a Terminal Services environment.
            If the calling process is associated with a Terminal Services client session, the return value is nonzero.
            If the calling process is associated with the Terminal Services console session, the return value is 0. 
            </summary>
        </member>
        <member name="F:Native.SM.SAMEDISPLAYFORMAT">
            <summary>
            Nonzero if all the display monitors have the same color format, otherwise, 0.
            Two displays can have the same bit depth, but different color formats.
            For example, the red, green, and blue pixels can be encoded with different numbers of bits,
            or those bits can be located in different places in a pixel color value.
            </summary>
        </member>
        <member name="F:Native.SM.SECURE">
            <summary>This system metric should be ignored; it always returns 0.</summary>
        </member>
        <member name="F:Native.SM.SERVERR2">
            <summary>
            The build number if the system is Windows Server 2003 R2; otherwise, 0.
            </summary>
        </member>
        <member name="F:Native.SM.SHOWSOUNDS">
            <summary>
            Nonzero if the user requires an application to present information visually in
            situations where it would otherwise present the information only in audible form; otherwise, 0.
            </summary>
        </member>
        <member name="F:Native.SM.SHUTTINGDOWN">
            <summary>Nonzero if the current session is shutting down; otherwise, 0.</summary>
            <remarks>Windows 2000:  This value is not supported.</remarks>
        </member>
        <member name="F:Native.SM.SLOWMACHINE">
            <summary>
            Nonzero if the computer has a low-end (slow) processor; otherwise, 0.
            </summary>
        </member>
        <member name="F:Native.SM.SWAPBUTTON">
            <summary>
            Nonzero if the meanings of the left and right mouse buttons are swapped; otherwise, 0.
            </summary>
        </member>
        <member name="F:Native.SM.STARTER">
            <summary>
            Nonzero if the current operating system is Windows 7 Starter Edition, Windows Vista Starter,
            or Windows XP Starter Edition; otherwise, 0.
            </summary>
        </member>
        <member name="F:Native.SM.TABLETPC">
            <summary>
            Nonzero if the current operating system is the Windows XP Tablet PC edition or if the current
            operating system is Windows Vista or Windows 7 and the Tablet PC Input service is started; otherwise, 0.
            The <see cref="F:Native.SM.DIGITIZER"/> setting indicates the type of digitizer input supported by a device running Windows 7
            or Windows Server 2008 R2.
            </summary>
        </member>
        <member name="F:Native.SM.XVIRTUALSCREEN">
            <summary>
            The coordinates for the left side of the virtual screen.
            The virtual screen is the bounding rectangle of all display monitors.
            The <see cref="F:Native.SM.CXVIRTUALSCREEN"/> metric is the width of the virtual screen.
            </summary>
        </member>
        <member name="F:Native.SM.YVIRTUALSCREEN">
            <summary>
            The coordinates for the top of the virtual screen.
            The virtual screen is the bounding rectangle of all display monitors.
            The <see cref="F:Native.SM.CYVIRTUALSCREEN"/> metric is the height of the virtual screen.
            </summary>
        </member>
        <member name="T:Native.DeviceCaps">
            <summary>Device caps.</summary>
            <seealso>http://msdn.microsoft.com/en-us/library/windows/desktop/dd144877.aspx</seealso>
        </member>
        <member name="F:Native.DeviceCaps.DRIVERVERSION">
            <summary>Device driver version.</summary>
        </member>
        <member name="F:Native.DeviceCaps.TECHNOLOGY">
            <summary>Device classification.</summary>
        </member>
        <member name="F:Native.DeviceCaps.HORZSIZE">
            <summary>Horizontal size in millimeters.</summary>
        </member>
        <member name="F:Native.DeviceCaps.VERTSIZE">
            <summary>Vertical size in millimeters.</summary>
        </member>
        <member name="F:Native.DeviceCaps.HORZRES">
            <summary>Horizontal width in pixels.</summary>
        </member>
        <member name="F:Native.DeviceCaps.VERTRES">
            <summary>Vertical height in pixels.</summary>
        </member>
        <member name="F:Native.DeviceCaps.BITSPIXEL">
            <summary>Number of bits per pixel.</summary>
        </member>
        <member name="F:Native.DeviceCaps.PLANES">
            <summary>Number of planes.</summary>
        </member>
        <member name="F:Native.DeviceCaps.NUMBRUSHES">
            <summary>Number of brushes the device has.</summary>
        </member>
        <member name="F:Native.DeviceCaps.NUMPENS">
            <summary>Number of pens the device has.</summary>
        </member>
        <member name="F:Native.DeviceCaps.NUMMARKERS">
            <summary>Number of markers the device has.</summary>
        </member>
        <member name="F:Native.DeviceCaps.NUMFONTS">
            <summary>Number of fonts the device has.</summary>
        </member>
        <member name="F:Native.DeviceCaps.NUMCOLORS">
            <summary>Number of colors the device supports.</summary>
        </member>
        <member name="F:Native.DeviceCaps.PDEVICESIZE">
            <summary>Size required for device descriptor.</summary>
        </member>
        <member name="F:Native.DeviceCaps.CURVECAPS">
            <summary>Curve capabilities.</summary>
        </member>
        <member name="F:Native.DeviceCaps.LINECAPS">
            <summary>Line capabilities.</summary>
        </member>
        <member name="F:Native.DeviceCaps.POLYGONALCAPS">
            <summary>Polygonal capabilities.</summary>
        </member>
        <member name="F:Native.DeviceCaps.TEXTCAPS">
            <summary>Text capabilities.</summary>
        </member>
        <member name="F:Native.DeviceCaps.CLIPCAPS">
            <summary>Clipping capabilities.</summary>
        </member>
        <member name="F:Native.DeviceCaps.RASTERCAPS">
            <summary>Bitblt capabilities.</summary>
        </member>
        <member name="F:Native.DeviceCaps.ASPECTX">
            <summary>Length of the X leg.</summary>
        </member>
        <member name="F:Native.DeviceCaps.ASPECTY">
            <summary>Length of the Y leg.</summary>
        </member>
        <member name="F:Native.DeviceCaps.ASPECTXY">
            <summary>Length of the hypotenuse.</summary>
        </member>
        <member name="F:Native.DeviceCaps.SHADEBLENDCAPS">
            <summary>Shading and Blending caps.</summary>
        </member>
        <member name="F:Native.DeviceCaps.LOGPIXELSX">
            <summary>Logical pixels inch in X.</summary>
        </member>
        <member name="F:Native.DeviceCaps.LOGPIXELSY">
            <summary>Logical pixels inch in Y.</summary>
        </member>
        <member name="F:Native.DeviceCaps.SIZEPALETTE">
            <summary>Number of entries in physical palette.</summary>
        </member>
        <member name="F:Native.DeviceCaps.NUMRESERVED">
            <summary>Number of reserved entries in palette.</summary>
        </member>
        <member name="F:Native.DeviceCaps.COLORRES">
            <summary>Actual color resolution.</summary>
        </member>
        <member name="F:Native.DeviceCaps.PHYSICALWIDTH">
            <summary>Physical Width in device units.</summary>
        </member>
        <member name="F:Native.DeviceCaps.PHYSICALHEIGHT">
            <summary>Physical Height in device units.</summary>
        </member>
        <member name="F:Native.DeviceCaps.PHYSICALOFFSETX">
            <summary>Physical Printable Area x margin.</summary>
        </member>
        <member name="F:Native.DeviceCaps.PHYSICALOFFSETY">
            <summary>Physical Printable Area y margin.</summary>
        </member>
        <member name="F:Native.DeviceCaps.SCALINGFACTORX">
            <summary>Scaling factor x.</summary>
        </member>
        <member name="F:Native.DeviceCaps.SCALINGFACTORY">
            <summary>Scaling factor y.</summary>
        </member>
        <member name="F:Native.DeviceCaps.VREFRESH">
            <summary>Current vertical refresh rate of the display device (for displays only) in Hz.</summary>
        </member>
        <member name="F:Native.DeviceCaps.DESKTOPVERTRES">
            <summary>Horizontal width of entire desktop in pixels.</summary>
        </member>
        <member name="F:Native.DeviceCaps.DESKTOPHORZRES">
            <summary>Vertical height of entire desktop in pixels.</summary>
        </member>
        <member name="F:Native.DeviceCaps.BLTALIGNMENT">
            <summary>Preferred blt alignment.</summary>
        </member>
        <member name="T:Native.SWP">
            <summary>Flags for <see cref="M:Native.User32.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,Native.SWP)"/>.</summary>
        </member>
        <member name="F:Native.SWP.NOSIZE">
            <summary>Retains the current size (ignores the cx and cy parameters).</summary>
        </member>
        <member name="F:Native.SWP.NOMOVE">
            <summary>Retains the current position (ignores x and y parameters).</summary>
        </member>
        <member name="F:Native.SWP.NOZORDER">
            <summary>Retains the current Z order (ignores the hWndInsertAfter parameter).</summary>
        </member>
        <member name="F:Native.SWP.NOREDRAW">
            <summary>
            Does not redraw changes. If this flag is set, no repainting of any kind occurs.
            This applies to the client area, the nonclient area (including the title bar and scroll bars),
            and any part of the parent window uncovered as a result of the window being moved. When this flag is set,
            the application must explicitly invalidate or redraw any parts of the window and parent window that need redrawing.
            </summary>
        </member>
        <member name="F:Native.SWP.NOACTIVATE">
            <summary>
            Does not activate the window. If this flag is not set, the window is activated and moved to the
            top of either the topmost or non-topmost group (depending on the setting of the hWndInsertAfter parameter).
            </summary>
        </member>
        <member name="F:Native.SWP.DRAWFRAME">
            <summary>Draws a frame (defined in the window's class description) around the window.</summary>
        </member>
        <member name="F:Native.SWP.FRAMECHANGED">
            <summary>
            Applies new frame styles set using the <see cref="M:Native.User32.SetWindowLongPtr(System.IntPtr,System.Int32,System.IntPtr)"/> function.
            Sends a <see cref="M:WM.NCCALCSIZE"/> message to the window, even if the window's size is not being changed.
            If this flag is not specified, <see cref="M:WM.NCCALCSIZE"/> is sent only when the window's size is being changed.
            </summary>
        </member>
        <member name="F:Native.SWP.SHOWWINDOW">
            <summary>Displays the window.</summary>
        </member>
        <member name="F:Native.SWP.HIDEWINDOW">
            <summary>Hides the window.</summary>
        </member>
        <member name="F:Native.SWP.NOCOPYBITS">
            <summary>
            Discards the entire contents of the client area.
            If this flag is not specified, the valid contents of the client area are saved and copied back
            into the client area after the window is sized or repositioned.
            </summary>
        </member>
        <member name="F:Native.SWP.NOOWNERZORDER">
            <summary>Does not change the owner window's position in the Z order.</summary>
        </member>
        <member name="F:Native.SWP.NOREPOSITION">
            <summary>Same as the <see cref="F:Native.SWP.NOOWNERZORDER"/> flag.</summary>
        </member>
        <member name="F:Native.SWP.NOSENDCHANGING">
            <summary>Prevents the window from receiving the <see cref="M:WM.WINDOWPOSCHANGING"/> message.</summary>
        </member>
        <member name="F:Native.SWP.DEFERERASE">
            <summary>Prevents generation of the <see cref="M:WM.SYNCPAINT"/> message.</summary>
        </member>
        <member name="F:Native.SWP.ASYNCWINDOWPOS">
            <summary>
            If the calling thread and the thread that owns the window are attached to different input queues,
            the system posts the request to the thread that owns the window.
            This prevents the calling thread from blocking its execution while other threads process the request. 
            </summary>
        </member>
        <member name="T:Native.DWMWA">
            <summary>DWM Window Attributes.</summary>
        </member>
        <member name="F:Native.DWMWA.NCRENDERING_ENABLED">
            <summary>[get] Is non-client rendering enabled/disabled.</summary>
        </member>
        <member name="F:Native.DWMWA.NCRENDERING_POLICY">
            <summary>[set] Non-client rendering policy.</summary>
        </member>
        <member name="F:Native.DWMWA.TRANSITIONS_FORCEDISABLED">
            <summary>[set] Potentially enable/forcibly disable transitions.</summary>
        </member>
        <member name="F:Native.DWMWA.ALLOW_NCPAINT">
            <summary>[set] Allow contents rendered in the non-client area to be visible on the DWM-drawn frame.</summary>
        </member>
        <member name="F:Native.DWMWA.CAPTION_BUTTON_BOUNDS">
            <summary>[get] Bounds of the caption button area in window-relative space.</summary>
        </member>
        <member name="F:Native.DWMWA.NONCLIENT_RTL_LAYOUT">
            <summary>[set] Is non-client content RTL mirrored.</summary>
        </member>
        <member name="F:Native.DWMWA.FORCE_ICONIC_REPRESENTATION">
            <summary>[set] Force this window to display iconic thumbnails.</summary>
        </member>
        <member name="F:Native.DWMWA.FLIP3D_POLICY">
            <summary>[set] Designates how Flip3D will treat the window.</summary>
        </member>
        <member name="F:Native.DWMWA.EXTENDED_FRAME_BOUNDS">
            <summary>[get] Gets the extended frame bounds rectangle in screen space.</summary>
        </member>
        <member name="F:Native.DWMWA.HAS_ICONIC_BITMAP">
            <summary>[set] Indicates an available bitmap when there is no better thumbnail representation.</summary>
            <remarks>Windows Vista and earlier:  This value is not supported.</remarks>
        </member>
        <member name="F:Native.DWMWA.DISALLOW_PEEK">
            <summary>[set] Don't invoke Peek on the window.</summary>
            <remarks>Windows Vista and earlier:  This value is not supported.</remarks>
        </member>
        <member name="F:Native.DWMWA.EXCLUDED_FROM_PEEK">
            <summary>[set] LivePreview exclusion information.</summary>
            <remarks>Windows Vista and earlier:  This value is not supported.</remarks>
        </member>
        <member name="F:Native.DWMWA.CLOAK">
            <summary>[set] Cloak or uncloak the window.</summary>
            <remarks>Do not use.</remarks>
        </member>
        <member name="F:Native.DWMWA.CLOAKED">
            <summary>[get] Gets the cloaked state of the window.</summary>
            <remarks>Windows 7 and earlier:  This value is not supported.</remarks>
        </member>
        <member name="F:Native.DWMWA.FREEZE_REPRESENTATION">
            <summary>[set] Force this window to freeze the thumbnail without live update.</summary>
            <remarks>Windows 7 and earlier:  This value is not supported.</remarks>
        </member>
        <member name="T:Native.DWMNCRP">
            <summary>Non-client rendering policy attribute values.</summary>
        </member>
        <member name="F:Native.DWMNCRP.USEWINDOWSTYLE">
            <summary>Enable/disable non-client rendering based on window style.</summary>
        </member>
        <member name="F:Native.DWMNCRP.DISABLED">
            <summary>Disabled non-client rendering; window style is ignored.</summary>
        </member>
        <member name="F:Native.DWMNCRP.ENABLED">
            <summary>Enabled non-client rendering; window style is ignored.</summary>
        </member>
        <member name="T:Native.DWMFLIP3D">
            <summary>Values designating how Flip3D treats a given window.</summary>
        </member>
        <member name="F:Native.DWMFLIP3D.DEFAULT">
            <summary>Hide or include the window in Flip3D based on window style and visibility.</summary>
        </member>
        <member name="F:Native.DWMFLIP3D.EXCLUDEBELOW">
            <summary>Display the window under Flip3D and disabled.</summary>
        </member>
        <member name="F:Native.DWMFLIP3D.EXCLUDEABOVE">
            <summary>Display the window above Flip3D and enabled.</summary>
        </member>
        <member name="T:Native.DWM_CLOAKED">
            <summary>Cloaked flags describing why a window is cloaked.</summary>
        </member>
        <member name="F:Native.DWM_CLOAKED.APP">
            <summary>The window was cloaked by its owner application.</summary>
        </member>
        <member name="F:Native.DWM_CLOAKED.SHELL">
            <summary>The window was cloaked by the Shell.</summary>
        </member>
        <member name="F:Native.DWM_CLOAKED.INHERITED">
            <summary>The cloak value was inherited from its owner window.</summary>
        </member>
        <member name="F:Native.DWM_BB.ENABLE">
            <summary>A value for the fEnable member has been specified.</summary>
        </member>
        <member name="F:Native.DWM_BB.BLURREGION">
            <summary>A value for the hRgnBlur member has been specified.</summary>
        </member>
        <member name="F:Native.DWM_BB.TRANSITIONONMAXIMIZED">
            <summary>A value for the fTransitionOnMaximized member has been specified.</summary>
        </member>
        <member name="T:Native.FLASHW">
            <summary>Flags for <see cref="T:FLASHWINFO"/>.</summary>
        </member>
        <member name="F:Native.FLASHW.ALL">
            <summary>
            Flash both the window caption and taskbar button.
            This is equivalent to setting the CAPTION | TRAY flags.
            </summary>
        </member>
        <member name="F:Native.FLASHW.CAPTION">
            <summary>Flash the window caption.</summary>
        </member>
        <member name="F:Native.FLASHW.STOP">
            <summary>Stop flashing. The system restores the window to its original state.</summary>
        </member>
        <member name="F:Native.FLASHW.TIMER">
            <summary>Flash continuously, until the STOP flag is set.</summary>
        </member>
        <member name="F:Native.FLASHW.TIMERNOFG">
            <summary>Flash continuously until the window comes to the foreground.</summary>
        </member>
        <member name="F:Native.FLASHW.TRAY">
            <summary>Flash the taskbar button.</summary>
        </member>
        <member name="T:Native.MONITOR">
            <summary>
            Flags for <see cref="M:User32.MonitorFromWindow()"/>.
            Determines the function's return value if the window does not intersect any display monitor.
            </summary>
        </member>
        <member name="F:Native.MONITOR.DEFAULTTONULL">
            <summary>
            Returns IntPtr.Zero.
            </summary>
        </member>
        <member name="F:Native.MONITOR.DEFAULTTOPRIMARY">
            <summary>
            Returns a handle to the primary display monitor.
            </summary>
        </member>
        <member name="F:Native.MONITOR.DEFAULTTONEAREST">
            <summary>
            Returns a handle to the display monitor that is nearest to the window.
            </summary>
        </member>
        <member name="F:Native.ULW.ALPHA">
            <summary>
            Use pblend as the blend function.
            If the display mode is 256 colors or less, the effect of this value is the same as the effect of ULW_OPAQUE.
            </summary>
        </member>
        <member name="F:Native.ULW.COLORKEY">
            <summary>Use crKey as the transparency color.</summary>
        </member>
        <member name="F:Native.ULW.ULW_OPAQUE">
            <summary>Draw an opaque layered window.</summary>
        </member>
        <member name="T:Native.AW">
            <summary>Flags for <see cref="M:User32.AnimateWindow"/>.</summary>
        </member>
        <member name="F:Native.AW.ACTIVATE">
            <summary>Activates the window. Do not use this value with <see cref="M:HIDE"/>.</summary>
        </member>
        <member name="F:Native.AW.BLEND">
            <summary>Uses a fade effect. This flag can be used only if hwnd is a top-level window.</summary>
        </member>
        <member name="F:Native.AW.CENTER">
            <summary>
            Makes the window appear to collapse inward if <see cref="M:HIDE"/> is used or expand outward
            if the <see cref="M:HIDE"/> is not used. The various direction flags have no effect.
            </summary>
        </member>
        <member name="F:Native.AW.HIDE">
            <summary>Hides the window. By default, the window is shown.</summary>
        </member>
        <member name="F:Native.AW.HOR_POSITIVE">
            <summary>
            Animates the window from left to right.
            This flag can be used with roll or slide animation.
            It is ignored when used with <see cref="M:CENTER"/> or <see cref="M:BLEND"/>.
            </summary>
        </member>
        <member name="F:Native.AW.HOR_NEGATIVE">
            <summary>
            Animates the window from right to left.
            This flag can be used with roll or slide animation.
            It is ignored when used with <see cref="M:CENTER"/> or <see cref="M:BLEND"/>.
            </summary>
        </member>
        <member name="F:Native.AW.SLIDE">
            <summary>
            Uses slide animation. By default, roll animation is used.
            This flag is ignored when used with <see cref="M:CENTER"/>.
            </summary>
        </member>
        <member name="F:Native.AW.VER_POSITIVE">
            <summary>
            Animates the window from top to bottom.
            This flag can be used with roll or slide animation.
            It is ignored when used with <see cref="M:CENTER"/> or <see cref="M:BLEND"/>.
            </summary>
        </member>
        <member name="F:Native.AW.VER_NEGATIVE">
            <summary>
            Animates the window from bottom to top.
            This flag can be used with roll or slide animation.
            It is ignored when used with <see cref="M:CENTER"/> or <see cref="M:BLEND"/>.
            </summary>
        </member>
        <member name="T:Native.RDW">
            <summary>Flags for <see cref="M:User32.RedrawWindow"/>.</summary>
        </member>
        <member name="F:Native.RDW.INVALIDATE">
            <summary>
            Invalidates the rectangle or region that you specify in lprcUpdate or hrgnUpdate.
            You can set only one of these parameters to a non-NULL value. If both are NULL,
            RDW_INVALIDATE invalidates the entire window.
            </summary>
        </member>
        <member name="F:Native.RDW.INTERNALPAINT">
            <summary>
            Causes the OS to post a WM_PAINT message to the window regardless of whether a portion of the window is invalid.
            </summary>
        </member>
        <member name="F:Native.RDW.ERASE">
            <summary>
            Causes the window to receive a WM_ERASEBKGND message when the window is repainted.
            Specify this value in combination with the RDW_INVALIDATE value; otherwise, RDW_ERASE has no effect.
            </summary>
        </member>
        <member name="F:Native.RDW.VALIDATE">
            <summary>
            Validates the rectangle or region that you specify in lprcUpdate or hrgnUpdate.
            You can set only one of these parameters to a non-NULL value. If both are NULL, RDW_VALIDATE validates the entire window.
            This value does not affect internal WM_PAINT messages.
            </summary>
        </member>
        <member name="F:Native.RDW.NOINTERNALPAINT">
            <summary>
            Suppresses any pending internal WM_PAINT messages. This flag does not affect WM_PAINT
            messages resulting from a non-NULL update area.
            </summary>
        </member>
        <member name="F:Native.RDW.NOERASE">
            <summary>Suppresses any pending WM_ERASEBKGND messages.</summary>
        </member>
        <member name="F:Native.RDW.NOCHILDREN">
            <summary>Excludes child windows, if any, from the repainting operation.</summary>
        </member>
        <member name="F:Native.RDW.ALLCHILDREN">
            <summary>Includes child windows, if any, in the repainting operation.</summary>
        </member>
        <member name="F:Native.RDW.UPDATENOW">
            <summary>
            Causes the affected windows, which you specify by setting the RDW_ALLCHILDREN and RDW_NOCHILDREN values,
            to receive WM_ERASEBKGND and WM_PAINT messages before the RedrawWindow returns, if necessary.
            </summary>
        </member>
        <member name="F:Native.RDW.ERASENOW">
            <summary>
            Causes the affected windows, which you specify by setting the RDW_ALLCHILDREN and RDW_NOCHILDREN values,
            to receive WM_ERASEBKGND messages before RedrawWindow returns, if necessary.
            The affected windows receive WM_PAINT messages at the ordinary time.
            </summary>
        </member>
        <member name="F:Native.RDW.FRAME">
            <summary>
            Causes any part of the nonclient area of the window that intersects the update region to receive a WM_NCPAINT message.
            The RDW_INVALIDATE flag must also be specified; otherwise, RDW_FRAME has no effect. The WM_NCPAINT message is typically
            not sent during the execution of RedrawWindow unless either RDW_UPDATENOW or RDW_ERASENOW is specified.
            </summary>
        </member>
        <member name="F:Native.RDW.NOFRAME">
            <summary>
            Suppresses any pending WM_NCPAINT messages. This flag must be used with RDW_VALIDATE and is typically
            used with RDW_NOCHILDREN. RDW_NOFRAME should be used with care, as it could cause parts of a window to be painted improperly.
            </summary>
        </member>
        <member name="T:Native.StockObject">
            <summary>Stock objects.</summary>
        </member>
        <member name="F:Native.StockObject.WHITE_BRUSH">
            <summary>White brush.</summary>
        </member>
        <member name="F:Native.StockObject.LTGRAY_BRUSH">
            <summary>Light gray brush.</summary>
        </member>
        <member name="F:Native.StockObject.GRAY_BRUSH">
            <summary>Gray brush.</summary>
        </member>
        <member name="F:Native.StockObject.DKGRAY_BRUSH">
            <summary>Dark gray brush.</summary>
        </member>
        <member name="F:Native.StockObject.BLACK_BRUSH">
            <summary>Black brush.</summary>
        </member>
        <member name="F:Native.StockObject.NULL_BRUSH">
            <summary>Null brush (equivalent to HOLLOW_BRUSH).</summary>
        </member>
        <member name="F:Native.StockObject.HOLLOW_BRUSH">
            <summary>Hollow brush (equivalent to NULL_BRUSH).</summary>
        </member>
        <member name="F:Native.StockObject.WHITE_PEN">
            <summary>White pen.</summary>
        </member>
        <member name="F:Native.StockObject.BLACK_PEN">
            <summary>Black pen.</summary>
        </member>
        <member name="F:Native.StockObject.NULL_PEN">
            <summary>Null pen. The null pen draws nothing.</summary>
        </member>
        <member name="F:Native.StockObject.OEM_FIXED_FONT">
            <summary>Original equipment manufacturer (OEM) dependent fixed-pitch (monospace) font.</summary>
        </member>
        <member name="F:Native.StockObject.ANSI_FIXED_FONT">
            <summary>Windows fixed-pitch (monospace) system font.</summary>
        </member>
        <member name="F:Native.StockObject.ANSI_VAR_FONT">
            <summary>Windows variable-pitch (proportional space) system font.</summary>
        </member>
        <member name="F:Native.StockObject.SYSTEM_FONT">
            <summary>
            System font. By default, the system uses the system font to draw menus, dialog box controls, and text.
            It is not recommended that you use DEFAULT_GUI_FONT or SYSTEM_FONT to obtain the font used by dialogs and windows.
            The default system font is Tahoma.
            </summary>
        </member>
        <member name="F:Native.StockObject.DEVICE_DEFAULT_FONT">
            <summary> Device-dependent font.</summary>
        </member>
        <member name="F:Native.StockObject.DEFAULT_PALETTE">
            <summary>Default palette. This palette consists of the static colors in the system palette.</summary>
        </member>
        <member name="F:Native.StockObject.SYSTEM_FIXED_FONT">
            <summary></summary>
        </member>
        <member name="F:Native.StockObject.DEFAULT_GUI_FONT">
            <summary>
            Default font for user interface objects such as menus and dialog boxes.
            It is not recommended that you use DEFAULT_GUI_FONT or SYSTEM_FONT to obtain the font used by dialogs and windows.
            The default font is Tahoma.
            </summary>
        </member>
        <member name="F:Native.StockObject.DC_BRUSH">
            <summary>
            Solid color brush. The default color is white.
            The color can be changed by using the SetDCBrushColor function.
            For more information, see the Remarks section.
            </summary>
        </member>
        <member name="F:Native.StockObject.DC_PEN">
            <summary>
            Solid pen color. The default color is white.
            The color can be changed by using the SetDCPenColor function.
            For more information, see the Remarks section.
            </summary>
        </member>
        <member name="T:Native.TABLET">
            <summary>Flags for <see cref="M:WM.TABLET_QUERYSYSTEMGESTURESTATUS"/>.</summary>
            <seealso>https://msdn.microsoft.com/en-us/library/bb969148%28v=vs.85%29.aspx</seealso>
        </member>
        <member name="T:Native.POINTER_MESSAGE_FLAG">
            <summary>Pointer message flags.</summary>
        </member>
        <member name="F:Native.POINTER_MESSAGE_FLAG.NEW">
            <summary>New pointer.</summary>
        </member>
        <member name="F:Native.POINTER_MESSAGE_FLAG.INRANGE">
            <summary>Pointer has not departed.</summary>
        </member>
        <member name="F:Native.POINTER_MESSAGE_FLAG.INCONTACT">
            <summary>Pointer is in contact.</summary>
        </member>
        <member name="F:Native.POINTER_MESSAGE_FLAG.FIRSTBUTTON">
            <summary>Primary action.</summary>
        </member>
        <member name="F:Native.POINTER_MESSAGE_FLAG.SECONDBUTTON">
            <summary>Secondary action.</summary>
        </member>
        <member name="F:Native.POINTER_MESSAGE_FLAG.THIRDBUTTON">
            <summary>Third button</summary>
        </member>
        <member name="F:Native.POINTER_MESSAGE_FLAG.FOURTHBUTTON">
            <summary>Fourth button</summary>
        </member>
        <member name="F:Native.POINTER_MESSAGE_FLAG.FIFTHBUTTON">
            <summary>Fifth button.</summary>
        </member>
        <member name="F:Native.POINTER_MESSAGE_FLAG.PRIMARY">
            <summary>Pointer is primary.</summary>
        </member>
        <member name="F:Native.POINTER_MESSAGE_FLAG.CONFIDENCE">
            <summary>Pointer is considered unlikely to be accidental.</summary>
        </member>
        <member name="F:Native.POINTER_MESSAGE_FLAG.CANCELED">
            <summary>Pointer is departing in an abnormal manner.</summary>
        </member>
        <member name="T:Native.BITMAPINFOHEADER">
            <summary>
            The BITMAPINFOHEADER structure contains information about the dimensions and color format of a DIB.
            </summary>
            <seealso>http://msdn.microsoft.com/en-us/library/dd183376.aspx</seealso>
        </member>
        <member name="F:Native.BITMAPINFOHEADER.biSize">
            <summary>The number of bytes required by the structure.</summary>
        </member>
        <member name="F:Native.BITMAPINFOHEADER.biWidth">
            <summary>The width of the bitmap, in pixels.</summary>
            <remarks>
            If biCompression is BI_JPEG or BI_PNG, the biWidth member specifies the width of the
            decompressed JPEG or PNG image file, respectively.
            </remarks>
        </member>
        <member name="F:Native.BITMAPINFOHEADER.biHeight">
            <summary>
            The height of the bitmap, in pixels.
            If biHeight is positive, the bitmap is a bottom-up DIB and its origin is the lower-left corner.
            If biHeight is negative, the bitmap is a top-down DIB and its origin is the upper-left corner.
            </summary>
            <remarks>
            If biHeight is negative, indicating a top-down DIB, biCompression must be either BI_RGB or BI_BITFIELDS. Top-down DIBs cannot be compressed.
             If biCompression is BI_JPEG or BI_PNG, the biHeight member specifies the height of the decompressed JPEG or PNG image file, respectively.
            </remarks>
        </member>
        <member name="F:Native.BITMAPINFOHEADER.biPlanes">
            <summary>The number of planes for the target device. This value must be set to 1.</summary>
        </member>
        <member name="F:Native.BITMAPINFOHEADER.biBitCount">
            <summary>
            The number of bits-per-pixel. The biBitCount member of the BITMAPINFOHEADER structure determines the number of bits
            that define each pixel and the maximum number of colors in the bitmap. This member must be one of the following values:
            0, 1, 4, 8, 16, 24, 32
            </summary>
        </member>
        <member name="F:Native.BITMAPINFOHEADER.biCompression">
            <summary>
            The type of compression for a compressed bottom-up bitmap (top-down DIBs cannot be compressed).
            </summary>
        </member>
        <member name="F:Native.BITMAPINFOHEADER.biSizeImage">
            <summary>
            The size, in bytes, of the image. This may be set to zero for BI_RGB bitmaps.
            </summary>
        </member>
        <member name="F:Native.BITMAPINFOHEADER.biXPelsPerMeter">
            <summary>
            The horizontal resolution, in pixels-per-meter, of the target device for the bitmap. An application
            can use this value to select a bitmap from a resource group that best matches the characteristics of the current device.
            </summary>
        </member>
        <member name="F:Native.BITMAPINFOHEADER.biYPelsPerMeter">
            <summary>The vertical resolution, in pixels-per-meter, of the target device for the bitmap.</summary>
        </member>
        <member name="F:Native.BITMAPINFOHEADER.biClrUsed">
            <summary>
            The number of color indexes in the color table that are actually used by the bitmap.
            If this value is zero, the bitmap uses the maximum number of colors corresponding to the value
            of the biBitCount member for the compression mode specified by biCompression.
            </summary>
        </member>
        <member name="F:Native.BITMAPINFOHEADER.biClrImportant">
            <summary>
            The number of color indexes that are required for displaying the bitmap. If this value is zero, all colors are required.
            </summary>
        </member>
        <member name="M:Native.BITMAPINFOHEADER.#ctor(System.IO.BinaryReader)">
            <summary>Creates <see cref="T:Native.BITMAPINFOHEADER"/>.</summary>
            <param name="binaryReader">Reader to read from.</param>
        </member>
        <member name="M:Native.BITMAPINFOHEADER.Write(System.IO.BinaryWriter)">
            <summary>Writes this <see cref="T:Native.BITMAPINFOHEADER"/> to a stream.</summary>
            <param name="binaryWriter">Writer to write to.</param>
        </member>
        <member name="T:Native.BITMAPFILEHEADER">
            <summary>
            The BITMAPFILEHEADER structure contains information about the type, size, and layout of a file that contains a DIB.
            </summary>
            <seealso>http://msdn.microsoft.com/en-us/library/dd183374.aspx</seealso>
        </member>
        <member name="F:Native.BITMAPFILEHEADER.BMP_MAGIC_COOKIE">
            <summary>"BM".</summary>
        </member>
        <member name="F:Native.BITMAPFILEHEADER.bfType">
            <summary>The file type; must be <see cref="F:Native.BITMAPFILEHEADER.BMP_MAGIC_COOKIE"/>.</summary>
        </member>
        <member name="F:Native.BITMAPFILEHEADER.bfSize">
            <summary>The size, in bytes, of the bitmap file.</summary>
        </member>
        <member name="F:Native.BITMAPFILEHEADER.bfReserved1">
            <summary>Reserved; must be zero.</summary>
        </member>
        <member name="F:Native.BITMAPFILEHEADER.bfReserved2">
            <summary>Reserved; must be zero.</summary>
        </member>
        <member name="F:Native.BITMAPFILEHEADER.bfOffBits">
            <summary>
            The offset, in bytes, from the beginning of the BITMAPFILEHEADER structure to the bitmap bits.
            </summary>
        </member>
        <member name="M:Native.BITMAPFILEHEADER.#ctor(System.IO.BinaryReader)">
            <summary>Creates <see cref="T:Native.BITMAPFILEHEADER"/>.</summary>
            <param name="binaryReader">Reader to read from.</param>
        </member>
        <member name="M:Native.BITMAPFILEHEADER.Write(System.IO.BinaryWriter)">
            <summary>Writes this <see cref="T:Native.BITMAPFILEHEADER"/> to a stream.</summary>
            <param name="binaryWriter">Writer to write to.</param>
        </member>
        <member name="T:Native.RGBQUAD">
            <summary>
            The RGBQUAD structure describes a color consisting of relative intensities of red, green, and blue.
            </summary>
            <seealso>http://msdn.microsoft.com/en-us/library/vstudio/dd162938.aspx</seealso>
        </member>
        <member name="F:Native.RGBQUAD.rgbBlue">
            <summary>The intensity of blue in the color.</summary>
        </member>
        <member name="F:Native.RGBQUAD.rgbGreen">
            <summary>The intensity of green in the color.</summary>
        </member>
        <member name="F:Native.RGBQUAD.rgbRed">
            <summary>The intensity of red in the color.</summary>
        </member>
        <member name="F:Native.RGBQUAD.rgbReserved">
            <summary>This member is reserved and must be zero.</summary>
        </member>
        <member name="M:Native.RGBQUAD.#ctor(System.IO.Stream)">
            <summary>Creates <see cref="T:Native.RGBQUAD"/>.</summary>
            <param name="stream">Stream to read from.</param>
        </member>
        <member name="M:Native.RGBQUAD.#ctor(System.IO.BinaryReader)">
            <summary>Creates <see cref="T:Native.RGBQUAD"/>.</summary>
            <param name="br">Reader to read from.</param>
        </member>
        <member name="T:Native.BLENDFUNCTION">
            <summary>
            The <see cref="T:Native.BLENDFUNCTION"/> structure controls blending by specifying the blending
            functions for source and destination bitmaps.
            </summary>
        </member>
        <member name="F:Native.BLENDFUNCTION.BlendOp">
            <summary>
            The source blend operation. Currently, the only source and destination
            blend operation that has been defined is AC_SRC_OVER.
            </summary>
        </member>
        <member name="F:Native.BLENDFUNCTION.BlendFlags">
            <summary>Must be zero.</summary>
        </member>
        <member name="F:Native.BLENDFUNCTION.SourceConstantAlpha">
            <summary>
            Specifies an alpha transparency value to be used on the entire source bitmap.
            The SourceConstantAlpha value is combined with any per-pixel alpha values in the source bitmap.
            If you set SourceConstantAlpha to 0, it is assumed that your image is transparent.
            Set the SourceConstantAlpha value to 255 (opaque) when you only want to use per-pixel alpha values.
            </summary>
        </member>
        <member name="F:Native.BLENDFUNCTION.AlphaFormat">
            <summary>
            This member controls the way the source and destination bitmaps are interpreted.
            </summary>
        </member>
        <member name="T:Native.POINT">
            <summary>The POINT structure defines the x- and y- coordinates of a point.</summary>
        </member>
        <member name="F:Native.POINT.X">
            <summary>The x-coordinate of the point.</summary>
        </member>
        <member name="F:Native.POINT.Y">
            <summary>The y-coordinate of the point.</summary>
        </member>
        <member name="M:Native.POINT.#ctor(System.Int32,System.Int32)">
            <summary>Creates <see cref="T:Native.POINT"/>.</summary>
            <param name="x">The x-coordinate of the point.</param>
            <param name="y">The y-coordinate of the point.</param>
        </member>
        <member name="T:Native.SIZE">
            <summary>The SIZE structure specifies the width and height of a rectangle.</summary>
        </member>
        <member name="F:Native.SIZE.Width">
            <summary>Specifies the rectangle's width. The units depend on which function uses this.</summary>
        </member>
        <member name="F:Native.SIZE.Height">
            <summary>Specifies the rectangle's height. The units depend on which function uses this.</summary>
        </member>
        <member name="M:Native.SIZE.#ctor(System.Int32,System.Int32)">
            <summary>Creates <see cref="T:Native.SIZE"/> struct.</summary>
            <param name="width">Specifies the rectangle's width.</param>
            <param name="height">Specifies the rectangle's height.</param>
        </member>
        <member name="T:Native.RECT">
            <summary>The RECT structure defines the coordinates of the upper-left and lower-right corners of a rectangle.</summary>
        </member>
        <member name="F:Native.RECT.Left">
            <summary>The x-coordinate of the upper-left corner of the rectangle.</summary>
        </member>
        <member name="F:Native.RECT.Top">
            <summary>The y-coordinate of the upper-left corner of the rectangle.</summary>
        </member>
        <member name="F:Native.RECT.Right">
            <summary>The x-coordinate of the lower-right corner of the rectangle.</summary>
        </member>
        <member name="F:Native.RECT.Bottom">
            <summary>The y-coordinate of the lower-right corner of the rectangle.</summary>
        </member>
        <member name="M:Native.RECT.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Creates <see cref="T:Native.RECT"/>.</summary>
            <param name="left">The x-coordinate of the upper-left corner of the rectangle.</param>
            <param name="top">The y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="right">The x-coordinate of the lower-right corner of the rectangle.</param>
            <param name="bottom">The y-coordinate of the lower-right corner of the rectangle.</param>
        </member>
        <member name="T:Native.PAINTSTRUCT">
            <summary>
            The PAINTSTRUCT structure contains information for an application.
            This information can be used to paint the client area of a window owned by that application.
            </summary>
        </member>
        <member name="F:Native.PAINTSTRUCT.hdc">
            <summary>A handle to the display DC to be used for painting.</summary>
        </member>
        <member name="F:Native.PAINTSTRUCT.fErase">
            <summary>
            Indicates whether the background must be erased.
            This value is nonzero if the application should erase the background.
            The application is responsible for erasing the background if a window class is created without a background brush.
            For more information, see the description of the hbrBackground member of the WNDCLASS structure.
            </summary>
        </member>
        <member name="F:Native.PAINTSTRUCT.rcPaint">
            <summary>
            A <see cref="T:Native.RECT"/> structure that specifies the upper left and lower right corners of the rectangle in
            which the painting is requested, in device units relative to the upper-left corner of the client area.
            </summary>
        </member>
        <member name="F:Native.PAINTSTRUCT.fRestore">
            <summary>Reserved; used internally by the system.</summary>
        </member>
        <member name="F:Native.PAINTSTRUCT.fIncUpdate">
            <summary>Reserved; used internally by the system.</summary>
        </member>
        <member name="F:Native.PAINTSTRUCT._Reserved1">
            <summary>Reserved; used internally by the system.</summary>
        </member>
        <member name="F:Native.PAINTSTRUCT._Reserved2">
            <summary>Reserved; used internally by the system.</summary>
        </member>
        <member name="F:Native.PAINTSTRUCT._Reserved3">
            <summary>Reserved; used internally by the system.</summary>
        </member>
        <member name="F:Native.PAINTSTRUCT._Reserved4">
            <summary>Reserved; used internally by the system.</summary>
        </member>
        <member name="F:Native.PAINTSTRUCT._Reserved5">
            <summary>Reserved; used internally by the system.</summary>
        </member>
        <member name="F:Native.PAINTSTRUCT._Reserved6">
            <summary>Reserved; used internally by the system.</summary>
        </member>
        <member name="F:Native.PAINTSTRUCT._Reserved7">
            <summary>Reserved; used internally by the system.</summary>
        </member>
        <member name="F:Native.PAINTSTRUCT._Reserved8">
            <summary>Reserved; used internally by the system.</summary>
        </member>
        <member name="T:Native.WINDOWPOS">
            <summary>Contains information about the size and position of a window.</summary>
        </member>
        <member name="F:Native.WINDOWPOS.hwnd">
            <summary>A handle to the window.</summary>
        </member>
        <member name="F:Native.WINDOWPOS.hwndInsertAfter">
            <summary>
            The position of the window in Z order (front-to-back position).
            This member can be a handle to the window behind which this window is placed,
            or can be one of the special values listed with the SetWindowPos function.
            </summary>
        </member>
        <member name="F:Native.WINDOWPOS.x">
            <summary>The position of the left edge of the window.</summary>
        </member>
        <member name="F:Native.WINDOWPOS.y">
            <summary>The position of the top edge of the window.</summary>
        </member>
        <member name="F:Native.WINDOWPOS.cx">
            <summary>The window width, in pixels.</summary>
        </member>
        <member name="F:Native.WINDOWPOS.cy">
            <summary>The window height, in pixels.</summary>
        </member>
        <member name="F:Native.WINDOWPOS.flags">
            <summary>
            The window position. This member can be one or more of the following values:
            <see cref="M:SWP.DRAWFRAME"/>
            <see cref="M:SWP.FRAMECHANGED"/>
            <see cref="M:SWP.HIDEWINDOW"/>
            <see cref="M:SWP.NOACTIVATE"/>
            <see cref="M:SWP.NOCOPYBITS"/>
            <see cref="M:SWP.NOMOVE"/>
            <see cref="M:SWP.NOOWNERZORDER"/>
            <see cref="M:SWP.NOREDRAW"/>
            <see cref="M:SWP.NOREPOSITION"/>
            <see cref="M:SWP.NOSENDCHANGING"/>
            <see cref="M:SWP.NOSIZE"/>
            <see cref="M:SWP.NOZORDER"/>
            <see cref="M:SWP.SHOWWINDOW"/>
            </summary>
        </member>
        <member name="T:Native.DWM_BLURBEHIND">
            <summary>
            Specifies Desktop Window Manager (DWM) blur-behind properties.
            Used by the <see cref="M:Dwmapi.DwmEnableBlurBehindWindow"/> function.
            </summary>
        </member>
        <member name="F:Native.DWM_BLURBEHIND.dwFlags">
            <summary>
            A bitwise combination of <see cref="T:DWM_BB"/> constant values that indicates
            which of the members of this structure have been set.
            </summary>
        </member>
        <member name="F:Native.DWM_BLURBEHIND.fEnable">
            <summary>
            <c>true</c> to register the window handle to DWM blur behind;
            <c>false</c> to unregister the window handle from DWM blur behind.
            </summary>
        </member>
        <member name="F:Native.DWM_BLURBEHIND.hRgnBlur">
            <summary>
            The region within the client area where the blur behind will be applied.
            A <c>IntPtr.Zero</c> value will apply the blur behind the entire client area.
            </summary>
        </member>
        <member name="F:Native.DWM_BLURBEHIND.fTransitionOnMaximized">
            <summary>
            <c>true</c> if the window's colorization should transition to match the maximized windows;
            otherwise, <c>false</c>.
            </summary>
        </member>
        <member name="T:Native.FLASHWINFO">
            <summary>Contains the flash status for a window and the number of times the system should flash the window.</summary>
        </member>
        <member name="F:Native.FLASHWINFO.cbSize">
            <summary>The size of the structure, in bytes.</summary>
        </member>
        <member name="F:Native.FLASHWINFO.hwnd">
            <summary>A handle to the window to be flashed. The window can be either opened or minimized.</summary>
        </member>
        <member name="F:Native.FLASHWINFO.dwFlags">
            <summary>The flash status.</summary>
        </member>
        <member name="F:Native.FLASHWINFO.uCount">
            <summary>The number of times to flash the window.</summary>
        </member>
        <member name="F:Native.FLASHWINFO.dwTimeout">
            <summary>
            The rate at which the window is to be flashed, in milliseconds.
            If dwTimeout is zero, the function uses the default cursor blink rate.</summary>
        </member>
        <member name="T:Native.MINMAXINFO">
            <summary>
            Contains information about a window's maximized size and position 
            and its minimum and maximum tracking size.
            </summary>
            <remarks>
            For systems with multiple monitors, the ptMaxSize and ptMaxPosition members describe the maximized size
            and position of the window on the primary monitor, even if the window ultimately maximizes onto a secondary monitor.
            In that case, the window manager adjusts these values to compensate for differences between the primary monitor and the
            monitor that displays the window. Thus, if the user leaves ptMaxSize untouched, a window on a monitor larger than the
            primary monitor maximizes to the size of the larger monitor.
            </remarks>
        </member>
        <member name="F:Native.MINMAXINFO.ptReserved">
            <summary>Reserved; do not use.</summary>
        </member>
        <member name="F:Native.MINMAXINFO.ptMaxSize">
            <summary>
            The maximized width (x member) and the maximized height (y member) of the window.
            For top-level windows, this value is based on the width of the primary monitor.
            </summary>
        </member>
        <member name="F:Native.MINMAXINFO.ptMaxPosition">
            <summary>
            The position of the left side of the maximized window (x member) and the position
            of the top of the maximized window (y member). For top-level windows, this value
            is based on the position of the primary monitor.
            </summary>
        </member>
        <member name="F:Native.MINMAXINFO.ptMinTrackSize">
            <summary>
            The minimum tracking width (x member) and the minimum tracking height (y member) of the window.
            This value can be obtained programmatically from the system metrics SM_CXMINTRACK and SM_CYMINTRACK (see the GetSystemMetrics function).
            </summary>
        </member>
        <member name="F:Native.MINMAXINFO.ptMaxTrackSize">
            <summary>
            The maximum tracking width (x member) and the maximum tracking height (y member) of the window.
            This value is based on the size of the virtual screen and can be obtained programmatically from the system metrics SM_CXMAXTRACK and SM_CYMAXTRACK (see the GetSystemMetrics function).
            </summary>
        </member>
        <member name="T:Native.MONITORINFO">
            <summary>Contains information about a display monitor.</summary>
            <seealso>http://msdn.microsoft.com/en-us/library/dd145065%28v=vs.85%29.aspx</seealso>
        </member>
        <member name="F:Native.MONITORINFO.cbSize">
            <summary>The size of the structure, in bytes.</summary>
        </member>
        <member name="F:Native.MONITORINFO.rcMonitor">
            <summary>
            A <see cref="T:Native.RECT"/> structure that specifies the display monitor rectangle, expressed in
            virtual-screen coordinates. Note that if the monitor is not the primary display monitor,
            some of the rectangle's coordinates may be negative values.
            </summary>
        </member>
        <member name="F:Native.MONITORINFO.rcWork">
            <summary>
            A <see cref="T:Native.RECT"/> structure that specifies the work area rectangle of the display monitor,
            expressed in virtual-screen coordinates. Note that if the monitor is not the primary display
            monitor, some of the rectangle's coordinates may be negative values.
            </summary>
        </member>
        <member name="F:Native.MONITORINFO.dwFlags">
            <summary>
            A set of flags that represent attributes of the display monitor.
            </summary>
        </member>
    </members>
</doc>
